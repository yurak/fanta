---
http_interactions:
- request:
    method: get
    uri: https://www.magicleghe.fco.live/it/serie-a/2021-2022/diretta-live/5-giornata
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - rest-client/2.1.0 (darwin20.3.0 x86_64) ruby/2.5.1p57
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.magicleghe.fco.live
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx-rc
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Vary:
      - Accept-Encoding
      X-Trace:
      - 2BA89EF606EA7351A7829556A224E47A6BF153829B88A8D2B7ACC4F81D00
      Cache-Control:
      - no-cache, private
      Date:
      - Fri, 24 Sep 2021 18:59:17 GMT
      Set-Cookie:
      - W9LAHyoQvSK5SqHIrFhlyFsSCxpjl85KwuaH2aKL=eyJpdiI6IkNmZGNRdUlta3pvQUwzSU9IeUg4b0E9PSIsInZhbHVlIjoiOFI4R1BmMk1zSG42QW03d0VJNkx0M3hVblBNWUh4NHJMbExkaFwvSEQzdzhIYU55VUtGbnJobWtwNTViOGNobnZlVUNwTVh1Y0xCU3BMXC9yXC96TnZ0UTYzVXQ2VzcrRzR3WFVqV0JIVUwwWkFmZUJISE9MbkpDR1dIZHA4NnlOQ3g0amZxMXk1cEJoYW5cL254blwvOHQ2bmtcL1FVcUNHY2wyM1FLZmJMVFZGblJJeEE1eTRGVTh3Nk5KUGdFRlpndnZWVVwvY1JqcGwzTWNialA1QjR0OHRRWjd6Z0tkRHJiREJDVVRsenJNYjZFc0hcL1F6eGRkSWhPUExkaTFpdzRHd0MyZUxZNWx5VlFcL2lDMnphWkpPSjl4NE5xMFlZc2p6UWpEbGpWTFVtYVNia3pQT3p2OWxrUTlNSFdUMGxnbWZDbWZWRk5Ib1ROUjFjRFp1VzhibmtDUitqcWRRVm1VT0JCbGl2YnV4QnNFOFE0ZFBMNTkxeUQwcExaWVdBYXBTSFpldVV1N2dVNTBrdzBNRm94eFB0TmtGSk9GS09ocFdqZ0V1K0pLNDhlWXZ6Nlp5SXZWeEdUdGJwbWYzTEJpRlRpRnc1Z2dHZXlocjBPazY1UlUrRDdvSmc9PSIsIm1hYyI6IjRlZDRkNTc5MzY3YTY3YzNlMWZmN2NjOWI0ZjZjNmQ0MWNjYWFmOTQyNDI2ODRmNmVhMjc0ZTJkMmRkNjQ4ZmMifQ%3D%3D;
        expires=Fri, 01-Oct-2021 17:39:17 GMT; Max-Age=600000; path=/; httponly
      - fantav6_user2=eyJpdiI6IkZPUDcxTTFQOEY5bmZqMlQ4Qm9aMVE9PSIsInZhbHVlIjoiTG9Tenl0VHBiRko1dmFtVXBaWEhHY3JMd2d0dUhMczFPTDdYXC91VkZWN1BEcXdzckpwUlhObXpcL3JXbm5wbFFaQmp2N0tnVFwvbjVscmlFYTNSTHlGWmViOVZFUVJES3ZybmE5eTRrcXNtRTkrTXlER0Q3QkI1Z1VlN1RQMmhDa1BvaDUrZVU5bFJQNCtMOHFhNVQrN2NCZU1obDZwaTVvNHJ4VmJrTTA4UlJBPSIsIm1hYyI6ImU2OWJkMWYyMWJhMzYzMDJkMDZhZDNhMGVmMGFiMTNjZjE3NTE4NDNkYjNiMDQ0ZDBlNzFhNTFlZDkzOTE0MWIifQ%3D%3D;
        expires=Fri, 03-Dec-2021 05:39:17 GMT; Max-Age=6000000; path=/; httponly
      - fantav6_user=eyJpdiI6InVhYlZjeWdLSVRicmxSdEl6YmF5ZEE9PSIsInZhbHVlIjoiK3l4bVo1bm1iTmphR1N5NVlobFZuVDZkK0szWVwvZGRJU3VWeklwQmNOQ3JETGRlN0x3TmZxZTF2cDROTGFJSE9LRll3bWl3XC8wbkZadWg0TFFJbUFoNzVsY2JmRGlGZk5CZ1lhN0RycGxoRXdyKzdIN0FKWm0rZ2xFUHpRZTA3dyIsIm1hYyI6IjZjYWEzYTc3MTY4NzVhY2EwYTY2NDRjODkwZTVjYjk3NTgxZmI2ODc1MWUwZjUxZDdlMWI4YTUwMzdjYTRhOTcifQ%3D%3D;
        expires=Fri, 03-Dec-2021 05:39:17 GMT; Max-Age=6000000; path=/; httponly
      - magicfco_session=eyJpdiI6IkZGNk1vTWpMeXdJTzJ6TGtsdzN0Ync9PSIsInZhbHVlIjoidVlobzlrS1ArOWJlRks1amRiN0cxSkFrNUJFSEs4b2VESFI1QjczVUdCaGNua2FOTXpVSCtOeXAzeWh5aGhoMFhlTGZNXC9RS0tzRkdmYW5GVmZkeU14VXpLbGd2NEZlRUtDdEFtbFVwS0hrdXVPS0JMRGJwUjFKcjlseVZicnUwIiwibWFjIjoiOGM4YjVlMzE1OWUxNjQ1MTYyYjFmNDc4YzA3M2ExNjQ4OGIzMzRiYjg3MDNhZDBkMjYzMmI5ZTAxNDU5NjNjOCJ9;
        expires=Fri, 01-Oct-2021 17:39:17 GMT; Max-Age=600000; path=/; httponly
      Strict-Transport-Security:
      - max-age=15768000
      X-Frame-Options:
      - SAMEORIGIN
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="it">
    <head>
        <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="canonical" href="https://www.magicleghe.fco.live/it/serie-a/2021-2022/diretta-live/5-giornata"/>

    <!-- CSRF Token -->
    <meta name="csrf-token" content="raERvU72dqXGyNp6AZzVoPu1EIEVhKgKHIEo0S3x">

        <title>
                         Diretta Live 5° Giornata Serie A 2021 2022

 

         
        </title>
        <meta name="description" content="Segui in diretta, azione dopo azione con Voti Oggettivi e Statistiche Live">
                <meta property="og:site_name" content="Warp Core - Laravel 5 Package" />
        
        
        
        
        
        <meta property="og:url" content="https://www.magicleghe.fco.live/it/serie-a/2021-2022/diretta-live/5-giornata" />


            <link rel="apple-touch-icon" sizes="180x180" href="/magic/magic/assets/images/favicons/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/magic/magic/assets/images/favicons/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/magic/magic/assets/images/favicons/favicon-16x16.png">


    <link rel="mask-icon" href="/magic/magic/assets/images/favicons/safari-pinned-tab.svg" color="#33383f">
    <meta name="theme-color" content="#ffffff">
    <!-- Styles -->
    <link href="/magic/magic/assets/css/app.2a5cd8644338e48b475c4bf06fd14e0d.css" rel="stylesheet">

    <!-- Scripts -->
    <script>
        window.Laravel = {"csrfToken":"raERvU72dqXGyNp6AZzVoPu1EIEVhKgKHIEo0S3x"};
    </script>

    
<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
<script>
     (adsbygoogle = window.adsbygoogle || []).push({
          google_ad_client: "ca-pub-6350303044980323",
          enable_page_level_ads: true
     });
</script>

<!-- Facebook Pixel Code -->
<script>
  !function(f,b,e,v,n,t,s)
  {if(f.fbq)return;n=f.fbq=function(){n.callMethod?
  n.callMethod.apply(n,arguments):n.queue.push(arguments)};
  if(!f._fbq)f._fbq=n;n.push=n;n.loaded=!0;n.version='2.0';
  n.queue=[];t=b.createElement(e);t.async=!0;
  t.src=v;s=b.getElementsByTagName(e)[0];
  s.parentNode.insertBefore(t,s)}(window, document,'script',
  'https://connect.facebook.net/en_US/fbevents.js');
  fbq('init', '474433186727641');
  fbq('track', 'PageView');
</script>
<noscript><img height="1" width="1" style="display:none"
  src="https://www.facebook.com/tr?id=474433186727641&ev=PageView&noscript=1"
/></noscript>
<!-- End Facebook Pixel Code -->



    <script src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" async='async'></script>
    <script>
        var OneSignal = window.OneSignal || [];
        OneSignal.push(["init", {
            appId: "dfed18d6-1a68-4de1-b317-3fd958510105",
            safari_web_id: 'web.onesignal.auto.5dd3ebb9-e358-44e1-aacb-a095d3f33c10',
            autoRegister: false, /* Set to true to automatically prompt visitors */
                        subdomainName: 'magicleghe.fco.live',
                        persistNotification: false,
            httpPermissionRequest: {
                enable: true
            },
            notifyButton: {
                enable: false /* Set to false to hide */,
                modalTitle: 'Grazie per esserti registrato!',
                modalMessage: "Ora potrai ricevere aggiornamenti in tempo reale!",
                modalButtonText: 'Chiudi',
                position: 'bottom-left',
                offset: {
                    bottom: '60px',
                }
            },
            promptOptions: {
                /* These prompt options values configure both the HTTP prompt and the HTTP popup. */
                /* actionMessage limited to 90 characters */
                actionMessage: "Vuoi ricevere in tempo reale tutti gli aggiornamenti di Magic Leghe?",
                /* acceptButtonText limited to 15 characters */
                acceptButtonText: "SI GRAZIE!",
                /* cancelButtonText limited to 15 characters */
                cancelButtonText: "NO!"
            },
            welcomeNotification: {
                // disable:false,
                "title": "Grazie per esserti registrato !",
                "message": "Da questo momento inizierai a ricevere notifiche personalizzate !"
                // "url": "" /* Leave commented for the notification to not open a window on Chrome and Firefox (on Safari, it opens to your webpage) */
            }

        }]);

        OneSignal.push(function () {
            OneSignal.log.setLevel('trace');
            var isPushSupported = OneSignal.isPushNotificationsSupported();
            if (isPushSupported) {
                // Push notifications are supported
                OneSignal.isPushNotificationsEnabled(function (isEnabled) {
                    if (!isEnabled) {
                        OneSignal.showHttpPermissionRequest();
                        OneSignal.showHttpPrompt();
                    }
                });
            } else {
                // Push notifications are not supported
            }
        });

        
        OneSignal.push(function () {
            OneSignal.on('subscriptionChange', function (isSubscribed) {
                if (isSubscribed) {
                    // The user is subscribed
                    //   Either the user subscribed for the first time
                    //   Or the user was subscribed -> unsubscribed -> subscribed
                    OneSignal.getUserId(function (pushId) {

                        // Make a POST call to your server with the user ID
                        $.ajax({
                            type: "POST",
                            url: window.location.protocol + '//' + window.location.hostname + '/api/v2/webpush/user_save',
                            data: {webpushUser_id: pushId, source_id: 2, user_id: ""},
                            success: function (result) {
                                console.log(result);
                                if (result.results.push_id) {
                                    //console.log(result.results.push_id);
                                    var data = {
                                        "app_id": "dfed18d6-1a68-4de1-b317-3fd958510105",
                                        "include_player_ids": [result.results.push_id],
                                        "data": {"foo": "bar"},
                                        "contents": {
                                            "en": "Thank you for registering!",
                                            "it": "Grazie per esserti registrato!"
                                        }
                                    };
                                    var url = "https://onesignal.com/api/v1/notifications";
                                    $.ajax({
                                        type: "POST",
                                        url: url,
                                        data: data,
                                        success: function (result2) {
                                            console.log(result2);
                                        }
                                    });
                                }
                            }
                        });
                    });
                }else{
                    /** TODO: unsubscribe and remain unsubscribed **/
                }
            });
        });

    </script>



<meta name="facebook-domain-verification" content="9bcclq8qq2psr8pofl905ixkomnc0p" />            </head>
    <body>
        <div id="overlay" class="overlay"></div>




<div class="mobile-top d-block d-sm-none" style="min-height: 48px; background-color: #f89100;">
		<div class="row align-items-center mx-0 py-s">
	  <div class="col text-white font-weight-bold pr-0 pl-1 fs-13" style="line-height: 16px;">
			<span>Scarica l'App ufficiale di <strong>Magic Leghe</strong></span>
	  </div>
	  <div class="col-auto ml-auto pl-0 pr-1">
							
								  </div>
	</div>
	</div>






<header class="mainHeader">
			
		<div class="mainNavbar bg-dark left-lines fixed-top position-fixed">
	

		<div class="container mainNav px-1 px-md-2">
			<nav class="navbar navbar-dark justify-content-between px-0 px-md-2 ">
				<div class="left-side">
					<ul class="nav">
						<li class="nav-item">
							<button class="navbar-toggler mr-1 mr-sm-0 px-2" type="button" data-toggle="offcanvas" data-target="#navbarMain" aria-controls="navbarMain" aria-expanded="false" aria-label="Toggle navigation">
								
								<span class="icon fantaicon-bars text-primary fs-24"></span>
							</button>
						</li>
						<li class="nav-item d-none d-sm-inline-block"><a href="https://www.magicleghe.fco.live" class="nav-link fs-20 text-white py-0 px-2"><i class="fantaicon-home"></i></a></li>
					</ul>
				</div>
				<a class="navbar-brand p-0" href="/" title="Magic Leghe Campionato by FCO - Magic Leghe"><img src="/magic/magic/assets/images/logo-nav-white.png" class="img-fluid" alt="Magic Leghe Campionato by FCO - Magic Leghe"></a>
				<ul class="nav">

											<li class="nav-item login-form dropdown">
							<a id="gioca-dropdown" href="#" class="nav-link dropdown-toggle text-white fs-24 fs-sm-28 py-0 px-1 px-md-2" data-toggle="dropdown"><i class="fantaicon-user-login"></i></a>
							<ul id="login-dp" class="dropdown-menu p-2">
								<li>
									<div class="row">
										<div class="col-md-12">
											<div class="row clearfix no-gutters text-uppercase mb-1">
												<div class="text-left col font-weight-bold">ACCEDI</div>
												<div class="help-block col text-right"><a href="https://www.magicleghe.fco.live/it/request">Password Persa ?</a></div>
											</div>
											<form class="form" role="form" method="post" action="https://www.magicleghe.fco.live/it/login" accept-charset="UTF-8" id="login-nav">
												<div class="form-group">
													<label class="sr-only" for="exampleInputEmail2">Email</label>
													<div class="input-group">
														<div class="input-group-addon input-group-text bg-dark text-white"><i class="icon fantaicon-envelope"></i></div>
														<input name="email_login" type="email" class="form-control" id="exampleInputEmail2" placeholder="Indirizzo email" required>
													</div>
												</div>
												<div class="form-group">
													<label class="sr-only" for="exampleInputPassword2">Password</label>
													<div class="input-group">
														<div class="input-group-addon input-group-text bg-dark text-white"><i class="icon fantaicon-key"></i></div>
														<input name="password_login" type="password" class="form-control" id="exampleInputPassword2" placeholder="Password" required>
													</div>
												</div>
												<!--div class="checkbox">
													<label>
														<input type="checkbox"> <small>Resta collegato</small>
													</label>
												</div-->
												<div class="form-group float-right ml-2">
													<button type="submit" class="btn btn-primary text-uppercase">ACCEDI</button>
												</div>
												<div class="bottom text-right pt-1">
													<a href="https://www.magicleghe.fco.live/it/signup"><b>Registrati</b></a>
												</div>
											</form>

											<hr>
											
										</div>
									</div>
								</li>
							</ul>
						</li>
					
				</ul>
				<div class="offcanvas-collapse navbar-collapse overflow-visible" id="navbarMain">
					<a class="close-offcanvas text-white position-absolute fs-40">&times;</a>
					<ul class="navbar-nav text-uppercase mt-3">
													<li class="nav-item">
								<div class="row align-items-center justify-content-center">
									<div class="col-12 text-center mb-3">
										<img src="/images/user_avatar.svg" class="rounded-circle img-fluid" alt="" style="width: 50px; height:50px;">
									</div>
									<div class="col-6 text-lg-right pl-2 pr-1">
										<a href="https://www.magicleghe.fco.live/it/login" class="btn btn-primary">Login</a>

									</div>
									<div class="col-6 px-1">
										<a href="https://www.magicleghe.fco.live/it/signup" class="btn btn-outline-secondary text-white">Registrati</a>
									</div>
								</div>
								<hr class="my-1">
							</li>
						

							<li class="nav-item">
								<a href="javascript:void(0)" class="nav-link openSubPanel text-white text-left text-md-center">Serie A 2021/2022<i class="fantaicon-angle-right"></i></a>
								<nav class="subPanel bg-dark outset-shadow nav flex-column" style="top:83px">
									<a class="nav-link px-2 text-left text-md-center closeSubPanel bg-black-t"><i class="fantaicon-angle-left"></i> Indietro</a>
									<a class="nav-link px-2 text-left text-md-center" href="/it/serie-a/2021-2022/diretta-live/ultima-giornata">Voti Statistici</a>
																		<a class="nav-link px-2 text-left text-md-center" href="/it/serie-a/2021-2022/quotazioni">Quotazioni</a>

								</nav>
							</li>


							



						<li class="nav-item ">
							<a class="nav-link text-left text-md-center" href="https://www.magicleghe.fco.live/it/pro">Abbonamenti</a>
						</li>


						<li class="nav-item">
							<a class="nav-link text-left text-md-center" href="https://www.magicleghe.fco.live/it/news">News</a>
						</li>
											</ul>
				</div>
				</nav>
			</nav>
		</div>
	</div>
	
		<div class="secondaryNavbar bg-half w-100 d-none d-xl-block">
		<div class="container">
			<div class="row no-gutters clearfix">
				<div class="d-none d-xl-block col-lg-6 ultimiRisultatiHead">
					
					<div class="col-md-3 text-center text-uppercase float-left ultimi-label">
						<a href="/it/serie-a/2021-2022/diretta-live/ultima-giornata"><small>Voti Live <br/>
						6° GIORNATA
						</small></a>
					</div>
					<div class="carousel col-md-9 pr-5 float-right">
							<div class="ultimi-risultati-navbar text-uppercase">
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Spezia</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-spezia" data-toggle="tooltip" title="Spezia" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 25/09 alle ore 15:00'' >25/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-milan" data-toggle="tooltip" title="Milan" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Milan</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Inter</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-inter" data-toggle="tooltip" title="Inter" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 25/09 alle ore 18:00'' >25/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-atalanta" data-toggle="tooltip" title="Atalanta" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Atalanta</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Genoa</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-genoa" data-toggle="tooltip" title="Genoa" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 25/09 alle ore 20:45'' >25/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-verona" data-toggle="tooltip" title="Verona" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Verona</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Juventus</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-juventus" data-toggle="tooltip" title="Juventus" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 26/09 alle ore 12:30'' >26/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-sampdoria" data-toggle="tooltip" title="Sampdoria" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Sampdoria</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Sassuolo</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-sassuolo" data-toggle="tooltip" title="Sassuolo" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 26/09 alle ore 15:00'' >26/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-salernitana" data-toggle="tooltip" title="Salernitana" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Salernitana</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Empoli</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-empoli" data-toggle="tooltip" title="Empoli" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 26/09 alle ore 15:00'' >26/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-bologna" data-toggle="tooltip" title="Bologna" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Bologna</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Udinese</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-udinese" data-toggle="tooltip" title="Udinese" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 26/09 alle ore 15:00'' >26/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-fiorentina" data-toggle="tooltip" title="Fiorentina" data-animation="false"><span class="path1"></span><span class="path2"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Fiorentina</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Lazio</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-lazio" data-toggle="tooltip" title="Lazio" data-animation="false"><span class="path1"></span><span class="path2"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 26/09 alle ore 18:00'' >26/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-roma" data-toggle="tooltip" title="Roma" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Roma</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Napoli</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-napoli" data-toggle="tooltip" title="Napoli" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 26/09 alle ore 20:45'' >26/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-cagliari" data-toggle="tooltip" title="Cagliari" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Cagliari</span>
									</div>
									</div>
								</div>
								

								<div>
									<div class="row clearfix live-navbar-item align-items-center">
									<div class="col-5 p-0 text-right float-left team-left">
										<span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Venezia</span> <span class="team-icon fs-32 d-inline-block align-middle"><span class="fantaicon-team-venezia" data-toggle="tooltip" title="Venezia" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></span>
									</div>
									<div class="col px-0 text-center score"><a class="px-1">
																			<span class='label border-bottom-grey-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Prevista il 27/09 alle ore 20:45'' >27/09</span> 
									


									</a></div>
									<div class="col-5 p-0 team-right">
										<span class="team-icon d-inline-block fs-32 align-middle"><span class="fantaicon-team-torino" data-toggle="tooltip" title="Torino" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></span> <span class="team-name d-inline-block align-middle fs-12 font-weight-bold">Torino</span>
									</div>
									</div>
								</div>
															</div>
					</div>
									</div>

				<nav class="navbar col-lg-6 navbar-expand  navbar-left navbar-dark">
					<button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navbarSecondary" aria-controls="navbarSecondary" aria-expanded="false" aria-label="Toggle navigation">
						<span class="navbar-toggler-icon"></span>
					</button>
					<div class="collapse navbar-collapse " id="navbarSecondary">
						<ul class="nav navbar-nav nav-fill mr-auto ml-auto text-uppercase align-items-center w-100">


							<li class="nav-item d-none d-xl-block ">
								<a class="nav-link" href="/it/pro">Abbonamenti</a>
							</li>
							<li class="nav-item d-none d-xl-block ">
								<a class="nav-link" href="/it/come-funziona">COME FUNZIONA</a>
							</li>
							<li class="nav-item d-none d-xl-block ">
								<a class="nav-link" href="/it/c/regole">GUIDE </a>
							</li>

							

							<li class="nav-item d-none d-xl-block ">
								<a class="nav-link" href="/it/serie-a/2021-2022/quotazioni">Quotazioni<br/>
								Ruoli Ufficiali</a>
							</li>




						</ul>
					</div>
				</nav>

			</div>
		</div>
	</div>
		</div>
</header>
            <div class="container">
        <div class="row clearfix">
            <div class="col-12 breadcrumbs text-muted small text-uppercase">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="https://www.magicleghe.fco.live">Home</a></li>
                    <li class="breadcrumb-item active">Live Serie A 2021 2022 5° Giornata</li>
                </ol>
            </div>
            <div class="col-12 page-title text-center">
                <h1 class="fs-20 fs-md-28 font-weight-normal mb-2"><i class="fantaicon-live" id="live-score-board-icon" data-style="regular" data-state="connecting"></i>Voti Statistici 5° Giornata serie a </h1>
                <h2 class="display-4"><small>Voti Statistici in tempo reale</strong> della 5° Giornata di serie a 2021 2022</small></h2>
            </div>
        </div>
        <hr class="d-none d-xl-block">
    </div>

                    
        <div id="app">
                
    
    <div class="giornata-select-mobile d-xl-none bg-dark text-white mt-2 inset-shadow fixed-bottom">
  
        <div class="container">

            <div class="row">
                <div class="col-5 pr-0 left-giornata-dropdown">
                    <a id="dropdownGiornata" class="dropdown-toggle py-2 d-inline-block" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" data-flip="false">
                        Giornata 5
                    </a>
                    <div class="dropdown-menu" aria-labelledby="dropdownGiornata">
                                                    <a class="dropdown-item" href="/it/serie-a/2021-2022/diretta-live/4-giornata">Giornata 4</a>
                                                <a class="dropdown-item active disabled" href="#">Giornata 5</a>
                                            </div>
                </div>
                <div class="col-7 pl-0 right-matches-dropdown text-right">
                    <a id="dropdownMatches" class="dropdown-toggle py-2 d-block" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        Seleziona Partita
                    </a>
                    <div class="dropdown-menu dropdown-menu-right col-12 col-sm-8 col-lg-6 m-0 p-0" aria-labelledby="dropdownMatches">
                        <ul class="nav nav-tabs fs-12 fs-sm-14 px-1 pb-1 pt-0">
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 active" data-toggle="tab" data-value="Roma - Udinese" href="#lineup-2902" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Roma</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>1-0</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Udinese</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Sampdoria - Napoli" href="#lineup-2904" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Sampdoria</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>0-4</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Napoli</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Torino - Lazio" href="#lineup-2906" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Torino</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>1-1</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Lazio</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Milan - Venezia" href="#lineup-2901" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Milan</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-0</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Venezia</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Cagliari - Empoli" href="#lineup-2899" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Cagliari</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>0-2</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Empoli</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Salernitana - Verona" href="#lineup-2903" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Salernitana</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-2</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Verona</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Spezia - Juventus" href="#lineup-2905" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Spezia</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-3</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Juventus</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Fiorentina - Inter" href="#lineup-2900" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Fiorentina</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>1-3</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Inter</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Atalanta - Sassuolo" href="#lineup-2897" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Atalanta</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-1</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Sassuolo</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link p-0 pt-1 " data-toggle="tab" data-value="Bologna - Genoa" href="#lineup-2898" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col col-md-5 home-team text-left">Bologna</div>
                                                                                    <div class="col-2 col-md-2 text-center bg-vs score font-weight-bold"><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-2</span></div>
                                                                                    <div class="col col-md-5 away-team text-right">Genoa</div>
                                        </div>
                                    </a>
                                </li>
                                                    </ul>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="container mt-4">
        <div class="giornata-matches">
            <div class="row clearfix d-inline-flex no-gutters">
                <div class="main col-12 col-xl-8 px-lg-2 mb-3">

                    <div class="tab-content">
                                                <div class="tab-pane active" id="lineup-2902" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Roma" data-away-team="Udinese">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Roma</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-roma" data-toggle="tooltip" title="Roma" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">1</span> : <span class="away-score">0</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">23/09/21 20:45</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Udinese</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-udinese" data-toggle="tooltip" title="Udinese" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Roma</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-38533" data-player-id="38533">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/16583.png" alt="RUI PATRICIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RUI PATRICIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                                            <span class="fantaicon-glove-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Portiere Imbattuto (90 Minuti disputati) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-38533'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.03 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-466075" data-player-id="466075">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/572184.png" alt="CALAFIORI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CALAFIORI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 69" data-original-title='Sostituito al minuto 69'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(69')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-466075'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.88 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-430788" data-player-id="430788">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/474496.png" alt="IBANEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">IBANEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-430788'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.71 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-186665" data-player-id="186665">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/322327.png" alt="KARSDORP" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KARSDORP </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-186665'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.03 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-198374" data-player-id="198374">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/380617.png" alt="MANCINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MANCINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-198374'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.56 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-109511" data-player-id="109511">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/213130.png" alt="CRISTANTE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CRISTANTE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-109511'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.74 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-57249" data-player-id="57249">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/39797.png" alt="MKHITARYAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MKHITARYAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-57249'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.07 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-184441" data-player-id="184441">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/339273.png" alt="PELLEGRINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PELLEGRINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(89')</span>
                    
                                            <span class="fantaicon-espulsione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Espulsione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-184441'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.60 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-96740" data-player-id="96740">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/187142.png" alt="VERETOUT" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VERETOUT </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-96740'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.89 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-245414" data-player-id="245414">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/471102.png" alt="ZANIOLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZANIOLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-245414'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.84 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-173879" data-player-id="173879">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ABRAHAM" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ABRAHAM </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 86" data-original-title='Sostituito al minuto 86'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(86')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-vittoria tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal della Vittoria">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-173879'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.71 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Roma" aria-expanded="false" aria-controls="collapseHomePanchina-Roma">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Roma">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-466135" data-player-id="466135">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BOER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BOER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-466135'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-235585" data-player-id="235585">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/495150.png" alt="FUZATO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FUZATO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-235585'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-433059" data-player-id="433059">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/427012.png" alt="KUMBULLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KUMBULLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-433059'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-223353" data-player-id="223353">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/475976.png" alt="REYNOLDS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">REYNOLDS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-223353'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-55909" data-player-id="55909">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/79474.png" alt="SMALLING" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SMALLING </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 21" data-original-title='Subentrato al minuto 21'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(21')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-55909'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.89 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-477632" data-player-id="477632">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="DARBOE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DARBOE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-477632'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-212533" data-player-id="212533">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/396155.png" alt="DIAWARA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DIAWARA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-212533'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-179369" data-player-id="179369">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/372753.png" alt="PEREZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PEREZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-179369'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-466147" data-player-id="466147">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ZALEWSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZALEWSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-466147'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-58928" data-player-id="58928">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/69323.png" alt="EL SHAARAWY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">EL SHAARAWY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 16" data-original-title='Subentrato al minuto 16'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(16')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-58928'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.85 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-199248" data-player-id="199248">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/372447.png" alt="MAYORAL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAYORAL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-199248'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-205048" data-player-id="205048">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/334731.png" alt="SHOMURODOV" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SHOMURODOV </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 4" data-original-title='Subentrato al minuto 4'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(4')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-205048'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Udinese</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-56486" data-player-id="56486">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/95180.png" alt="SILVESTRI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SILVESTRI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-subito tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Subito ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-56486'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.07 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-221586" data-player-id="221586">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MOLINA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MOLINA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 62" data-original-title='Sostituito al minuto 62'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(62')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-221586'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.67 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-76623" data-player-id="76623">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/86442.png" alt="NUYTINCK" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">NUYTINCK </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 79" data-original-title='Sostituito al minuto 79'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(79')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-76623'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.73 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-220063" data-player-id="220063">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/429988.png" alt="RODRIGO BECãO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RODRIGO BECãO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-220063'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.34 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-162651" data-player-id="162651">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/280971.png" alt="SAMIR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SAMIR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-162651'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.03 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-487053" data-player-id="487053">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="UDOGIE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">UDOGIE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 79" data-original-title='Sostituito al minuto 79'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(79')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-487053'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.58 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-199666" data-player-id="199666">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MAKENGO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAKENGO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 85" data-original-title='Sostituito al minuto 85'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(85')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-199666'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.92 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-61566" data-player-id="61566">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/78933.png" alt="PEREYRA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PEREYRA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-61566'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.88 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-184289" data-player-id="184289">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/338353.png" alt="WALACE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">WALACE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-184289'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.08 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-94924" data-player-id="94924">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/160268.png" alt="DEULOFEU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DEULOFEU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-94924'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.75 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-168290" data-player-id="168290">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/299942.png" alt="PUSSETTO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PUSSETTO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 62" data-original-title='Sostituito al minuto 62'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(62')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-168290'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.82 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Udinese" aria-expanded="true" aria-controls="collapseAwayPanchina-Udinese">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Udinese">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-18377" data-player-id="18377">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/18585.png" alt="PADELLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PADELLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-18377'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-538079" data-player-id="538079">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="PIANA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PIANA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-538079'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-39781" data-player-id="39781">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/63052.png" alt="DE MAIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DE MAIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-39781'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-68659" data-player-id="68659">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/84193.png" alt="LARSEN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LARSEN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 11" data-original-title='Subentrato al minuto 11'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(11')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-68659'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.99 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-441052" data-player-id="441052">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="PEREZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PEREZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-441052'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-476883" data-player-id="476883">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="SOPPY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SOPPY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 28" data-original-title='Subentrato al minuto 28'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(28')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-476883'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.71 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-66247" data-player-id="66247">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/68469.png" alt="ZEEGELAAR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZEEGELAAR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-66247'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-62339" data-player-id="62339">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ARSLAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ARSLAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 5" data-original-title='Subentrato al minuto 5'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(5')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-62339'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-56733" data-player-id="56733">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/36750.png" alt="JAJALO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">JAJALO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-56733'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-477529" data-player-id="477529">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="SAMARDZIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SAMARDZIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 11" data-original-title='Subentrato al minuto 11'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(11')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-477529'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.25 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-486385" data-player-id="486385">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BETO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BETO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 28" data-original-title='Subentrato al minuto 28'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(28')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-486385'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.83 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-39570" data-player-id="39570">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="FORESTIERI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FORESTIERI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-39570'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2904" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Sampdoria" data-away-team="Napoli">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Sampdoria</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-sampdoria" data-toggle="tooltip" title="Sampdoria" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">0</span> : <span class="away-score">4</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">23/09/21 18:30</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Napoli</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-napoli" data-toggle="tooltip" title="Napoli" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Sampdoria</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-193509" data-player-id="193509">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/289808.png" alt="AUDERO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">AUDERO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-skull-red tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Errore Decisivo (che ha causato Goal Avversario) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-4-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="4 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-193509'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.29 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-431079" data-player-id="431079">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/256802.png" alt="AUGELLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">AUGELLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-431079'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.26 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-84724" data-player-id="84724">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/123106.png" alt="BERESZYNSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BERESZYNSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 71" data-original-title='Sostituito al minuto 71'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(71')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-84724'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.22 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-156267" data-player-id="156267">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/246644.png" alt="COLLEY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">COLLEY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(91')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-156267'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.32 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-80447" data-player-id="80447">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/5803.png" alt="YOSHIDA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">YOSHIDA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-80447'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.13 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-45156" data-player-id="45156">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/17976.png" alt="CANDREVA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CANDREVA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(91')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-45156'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.57 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-440089" data-player-id="440089">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="DAMSGAARD" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DAMSGAARD </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(91')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-440089'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.58 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-46483" data-player-id="46483">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/16585.png" alt="SILVA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SILVA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 55" data-original-title='Sostituito al minuto 55'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(55')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-46483'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.35 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-179296" data-player-id="179296">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/270648.png" alt="THORSBY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">THORSBY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 71" data-original-title='Sostituito al minuto 71'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(71')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-179296'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.45 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-50821" data-player-id="50821">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/63727.png" alt="CAPUTO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CAPUTO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 84" data-original-title='Sostituito al minuto 84'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(84')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-50821'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.55 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-12473" data-player-id="12473">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/4164.png" alt="QUAGLIARELLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">QUAGLIARELLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 55" data-original-title='Sostituito al minuto 55'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(55')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-12473'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.34 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Sampdoria" aria-expanded="false" aria-controls="collapseHomePanchina-Sampdoria">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Sampdoria">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-126486" data-player-id="126486">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/261393.png" alt="FALCONE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FALCONE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-126486'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-38597" data-player-id="38597">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="RAVAGLIA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RAVAGLIA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-38597'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-428785" data-player-id="428785">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/414054.png" alt="CHABOT" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CHABOT </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-428785'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-222467" data-player-id="222467">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/433613.png" alt="DEPAOLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DEPAOLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 19" data-original-title='Subentrato al minuto 19'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(19')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-222467'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.59 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-493125" data-player-id="493125">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="DRAGUSIN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DRAGUSIN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-493125'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-161490" data-player-id="161490">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/296232.png" alt="FERRARI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FERRARI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-161490'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-105108" data-player-id="105108">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/180574.png" alt="MURRU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MURRU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-105108'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-450048" data-player-id="450048">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/542640.png" alt="ASKILDSEN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ASKILDSEN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 19" data-original-title='Subentrato al minuto 19'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(19')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-450048'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.69 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-515593" data-player-id="515593">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="CIERVO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CIERVO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 6" data-original-title='Subentrato al minuto 6'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(6')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-515593'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-50779" data-player-id="50779">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/21090.png" alt="EKDAL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">EKDAL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 35" data-original-title='Subentrato al minuto 35'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(35')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-50779'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.49 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-476625" data-player-id="476625">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="TRIMBOLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TRIMBOLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-476625'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-104080" data-player-id="104080">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/141693.png" alt="TORREGROSSA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TORREGROSSA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 35" data-original-title='Subentrato al minuto 35'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(35')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-104080'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.72 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Napoli</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-48844" data-player-id="48844">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/22426.png" alt="OSPINA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">OSPINA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-glove-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Portiere Imbattuto (90 Minuti disputati) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-48844'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.74 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-93661" data-player-id="93661">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/192013.png" alt="DI LORENZO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DI LORENZO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-93661'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.14 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-86129" data-player-id="86129">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/139596.png" alt="KOULIBALY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KOULIBALY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-86129'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.66 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-101019" data-player-id="101019">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/134609.png" alt="MARIO RUI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MARIO RUI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-101019'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.27 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-165196" data-player-id="165196">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/261244.png" alt="RRAHMANI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RRAHMANI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 48" data-original-title='Sostituito al minuto 48'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(48')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-165196'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.43 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-203325" data-player-id="203325">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ANGUISSA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ANGUISSA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-203325'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.66 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-201379" data-player-id="201379">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/375571.png" alt="RUIZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RUIZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-201379'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.34 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-126440" data-player-id="126440">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/160328.png" alt="ZIELINSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZIELINSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 68" data-original-title='Sostituito al minuto 68'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(68')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-126440'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.94 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-75592" data-player-id="75592">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/113160.png" alt="INSIGNE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">INSIGNE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 68" data-original-title='Sostituito al minuto 68'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(68')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Assit Intenzionali su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span><span class="path12"></span><span class="path13"></span><span class="path14"></span><span class="path15"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-75592'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.50 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-179361" data-player-id="179361">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/327531.png" alt="LOZANO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LOZANO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 81" data-original-title='Sostituito al minuto 81'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(81')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Assit Intenzionali su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span><span class="path12"></span><span class="path13"></span><span class="path14"></span><span class="path15"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-179361'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.96 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-218329" data-player-id="218329">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/425645.png" alt="OSIMHEN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">OSIMHEN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 82" data-original-title='Sostituito al minuto 82'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(82')</span>
                    
                                            <span class="fantaicon-2-goals-green tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Segnati su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span>
					                </span><span class="fantaicon-gol-vittoria tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal della Vittoria">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-218329'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.17 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Napoli" aria-expanded="true" aria-controls="collapseAwayPanchina-Napoli">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Napoli">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-460758" data-player-id="460758">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MARFELLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MARFELLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-460758'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-171366" data-player-id="171366">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/319830.png" alt="MERET" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MERET </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-171366'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-91990" data-player-id="91990">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/113524.png" alt="JESUS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">JESUS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-91990'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-83340" data-player-id="83340">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/146639.png" alt="MALCUIT" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MALCUIT </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-83340'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-66806" data-player-id="66806">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/74396.png" alt="MANOLAS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MANOLAS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 42" data-original-title='Subentrato al minuto 42'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(42')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-66806'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.00 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-444251" data-player-id="444251">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ZANOLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZANOLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-444251'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-225807" data-player-id="225807">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/424964.png" alt="ELMAS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ELMAS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 22" data-original-title='Subentrato al minuto 22'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(22')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-225807'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.95 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-218005" data-player-id="218005">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/334096.png" alt="OUNAS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">OUNAS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 8" data-original-title='Subentrato al minuto 8'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(8')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-218005'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-147886" data-player-id="147886">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/279236.png" alt="PETAGNA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PETAGNA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 9" data-original-title='Subentrato al minuto 9'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(9')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-147886'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-153776" data-player-id="153776">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/245593.png" alt="POLITANO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">POLITANO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 22" data-original-title='Subentrato al minuto 22'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(22')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-153776'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.10 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2906" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Torino" data-away-team="Lazio">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Torino</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-torino" data-toggle="tooltip" title="Torino" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">1</span> : <span class="away-score">1</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">23/09/21 18:30</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Lazio</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-lazio" data-toggle="tooltip" title="Lazio" data-animation="false"><span class="path1"></span><span class="path2"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Torino</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-193773" data-player-id="193773">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/317299.png" alt="MILINKOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MILINKOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-skull-orange tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Errore Decisivo (che ha causato un Tiro avversario) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-subito tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Subito ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-193773'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.91 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-159506" data-player-id="159506">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/274798.png" alt="AINA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">AINA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 62" data-original-title='Sostituito al minuto 62'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(62')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-159506'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.39 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-428585" data-player-id="428585">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/462884.png" alt="BREMER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BREMER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(95')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-428585'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.31 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-102766" data-player-id="102766">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/196792.png" alt="DJIDJI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DJIDJI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-whistle-red tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Concesso ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-102766'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.15 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-69305" data-player-id="69305">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/95797.png" alt="RODRIGUEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RODRIGUEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-69305'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.41 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-478960" data-player-id="478960">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/598633.png" alt="SINGO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SINGO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(95')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-478960'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.31 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-218368" data-player-id="218368">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BREKALO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BREKALO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-218368'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.67 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-140181" data-player-id="140181">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/213909.png" alt="LINETTY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LINETTY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-140181'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.73 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-182514" data-player-id="182514">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/335207.png" alt="MANDRAGORA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MANDRAGORA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 62" data-original-title='Sostituito al minuto 62'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(62')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-182514'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.67 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-459025" data-player-id="459025">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="POBEGA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">POBEGA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-459025'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.06 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-168598" data-player-id="168598">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/260733.png" alt="SANABRIA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SANABRIA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(95')</span>
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-168598'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.62 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Torino" aria-expanded="false" aria-controls="collapseHomePanchina-Torino">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Torino">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-61824" data-player-id="61824">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/39897.png" alt="BERISHA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BERISHA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-61824'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-473242" data-player-id="473242">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="GEMELLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GEMELLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-473242'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-50937" data-player-id="50937">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/14270.png" alt="ANSALDI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ANSALDI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 28" data-original-title='Subentrato al minuto 28'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(28')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-50937'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.12 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-247359" data-player-id="247359">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BUONGIORNO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BUONGIORNO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-247359'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-212667" data-player-id="212667">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VOJVODA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VOJVODA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-212667'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-477753" data-player-id="477753">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ZIMA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZIMA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-477753'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-102195" data-player-id="102195">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/201154.png" alt="BASELLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BASELLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-102195'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-212314" data-player-id="212314">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/268856.png" alt="LUKIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LUKIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 28" data-original-title='Subentrato al minuto 28'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(28')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-212314'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.71 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-50933" data-player-id="50933">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/52645.png" alt="RINCON" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RINCON </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 17" data-original-title='Subentrato al minuto 17'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(17')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-50933'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.82 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-78819" data-player-id="78819">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/111753.png" alt="VERDI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VERDI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-78819'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-102228" data-player-id="102228">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/215494.png" alt="PJACA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PJACA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 17" data-original-title='Subentrato al minuto 17'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(17')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-102228'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.61 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-423916" data-player-id="423916">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="WARMING" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">WARMING </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-423916'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Lazio</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-8432" data-player-id="8432">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/318.png" alt="REINA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">REINA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-subito tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Subito ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-8432'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.65 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-84178" data-player-id="84178">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/132296.png" alt="ACERBI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ACERBI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-84178'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.60 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-107363" data-player-id="107363">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/155954.png" alt="HYSAJ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HYSAJ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-107363'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.14 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215510" data-player-id="215510">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/405559.png" alt="LUIZ FELIPE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LUIZ FELIPE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215510'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.60 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-169107" data-player-id="169107">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/262315.png" alt="MARUSIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MARUSIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 62" data-original-title='Sostituito al minuto 62'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(62')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-169107'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.97 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-104359" data-player-id="104359">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="AKPA AKPRO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">AKPA AKPRO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 79" data-original-title='Sostituito al minuto 79'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(79')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-104359'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.88 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-101537" data-player-id="101537">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/157530.png" alt="ANDERSON" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ANDERSON </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-101537'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.40 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-130963" data-player-id="130963">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/288832.png" alt="CATALDI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CATALDI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 70" data-original-title='Sostituito al minuto 70'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(70')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-130963'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.04 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-82451" data-player-id="82451">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/149917.png" alt="LUIS ALBERTO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LUIS ALBERTO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-82451'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.36 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-59046" data-player-id="59046">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/75164.png" alt="IMMOBILE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">IMMOBILE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span><span class="fantaicon-gol-del-pareggio tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal del Pareggio">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-rigore-segnato tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Segnato ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-59046'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.10 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-465701" data-player-id="465701">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MORO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MORO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-465701'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.32 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Lazio" aria-expanded="true" aria-controls="collapseAwayPanchina-Lazio">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Lazio">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-212633" data-player-id="212633">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ADAMONIS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ADAMONIS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-212633'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-140200" data-player-id="140200">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/235328.png" alt="STRAKOSHA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">STRAKOSHA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-140200'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-156323" data-player-id="156323">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/257920.png" alt="LAZZARI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LAZZARI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 28" data-original-title='Subentrato al minuto 28'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(28')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-156323'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.37 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-106461" data-player-id="106461">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/217647.png" alt="PATRIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PATRIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-106461'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-27353" data-player-id="27353">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/11965.png" alt="RADU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RADU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-27353'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-212851" data-player-id="212851">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BASIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BASIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-212851'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-156305" data-player-id="156305">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ESCALANTE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ESCALANTE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-156305'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-43191" data-player-id="43191">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/9201.png" alt="LEIVA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LEIVA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 20" data-original-title='Subentrato al minuto 20'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(20')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-43191'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.90 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-180793" data-player-id="180793">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/299106.png" alt="MILINKOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MILINKOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-180793'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.62 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-508475" data-player-id="508475">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ROMERO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ROMERO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-508475'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-156293" data-player-id="156293">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MURIQI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MURIQI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 11" data-original-title='Subentrato al minuto 11'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(11')</span>
                    
                                            <span class="fantaicon-whistle-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Guadagnato ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-156293'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.51 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-49579" data-player-id="49579">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/61275.png" alt="PEDRO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PEDRO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-49579'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.47 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2901" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Milan" data-away-team="Venezia">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Milan</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-milan" data-toggle="tooltip" title="Milan" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">2</span> : <span class="away-score">0</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">22/09/21 20:45</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Venezia</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-venezia" data-toggle="tooltip" title="Venezia" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Milan</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-129487" data-player-id="129487">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MAIGNAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAIGNAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-glove-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Portiere Imbattuto (90 Minuti disputati) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-129487'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.25 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-225897" data-player-id="225897">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BALLO TOURE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BALLO TOURE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 59" data-original-title='Sostituito al minuto 59'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(59')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-225897'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.05 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-97617" data-player-id="97617">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/190553.png" alt="FLORENZI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FLORENZI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 59" data-original-title='Sostituito al minuto 59'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(59')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-97617'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.76 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215979" data-player-id="215979">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/426564.png" alt="GABBIA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GABBIA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 59" data-original-title='Sostituito al minuto 59'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(59')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215979'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.00 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-466041" data-player-id="466041">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/544178.png" alt="KALULU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KALULU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-466041'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.86 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-126551" data-player-id="126551">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/235485.png" alt="ROMAGNOLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ROMAGNOLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-126551'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.47 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-202041" data-player-id="202041">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/341847.png" alt="BENNACER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BENNACER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-202041'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.49 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-216183" data-player-id="216183">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/426785.png" alt="DIAZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DIAZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 81" data-original-title='Sostituito al minuto 81'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(81')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-vittoria tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal della Vittoria">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-216183'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.64 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-432422" data-player-id="432422">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/495152.png" alt="TONALI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TONALI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-432422'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.15 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-216065" data-player-id="216065">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/421589.png" alt="LEAO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LEAO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(94')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-216065'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.10 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-98456" data-player-id="98456">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/191203.png" alt="REBIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">REBIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-98456'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.77 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Milan" aria-expanded="false" aria-controls="collapseHomePanchina-Milan">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Milan">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-481509" data-player-id="481509">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="JUNGDAL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">JUNGDAL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-481509'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-44898" data-player-id="44898">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/19741.png" alt="TATARUSANU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TATARUSANU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-44898'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-193183" data-player-id="193183">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/162665.png" alt="CONTI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CONTI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-193183'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-222784" data-player-id="222784">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/372541.png" alt="HERNANDEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HERNANDEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 31" data-original-title='Subentrato al minuto 31'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(31')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-222784'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.16 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-194794" data-player-id="194794">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/324725.png" alt="TOMORI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TOMORI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 31" data-original-title='Subentrato al minuto 31'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(31')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-194794'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.02 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-193449" data-player-id="193449">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/214374.png" alt="CASTILLEJO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CASTILLEJO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-193449'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-173181" data-player-id="173181">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/319023.png" alt="KESSIE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KESSIE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 9" data-original-title='Subentrato al minuto 9'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(9')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-173181'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-488253" data-player-id="488253">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/619255.png" alt="MALDINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MALDINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-488253'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-437746" data-player-id="437746">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/462566.png" alt="SAELEMAEKERS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SAELEMAEKERS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 31" data-original-title='Subentrato al minuto 31'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(31')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-437746'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.05 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-209335" data-player-id="209335">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="PELLEGRI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PELLEGRI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 16" data-original-title='Subentrato al minuto 16'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(16')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-209335'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.99 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Venezia</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-48860" data-player-id="48860">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MAENPAA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAENPAA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-48860'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.90 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-174651" data-player-id="174651">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/321340.png" alt="CALDARA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CALDARA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-174651'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.63 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-169079" data-player-id="169079">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="CECCARONI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CECCARONI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-169079'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.25 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-186703" data-player-id="186703">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="EBUEHI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">EBUEHI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-186703'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.63 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-26720" data-player-id="26720">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/4315.png" alt="MOLINARO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MOLINARO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-26720'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.09 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-169034" data-player-id="169034">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/213201.png" alt="ARAMU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ARAMU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-169034'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.68 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-427168" data-player-id="427168">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BUSIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BUSIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-427168'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.97 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-212313" data-player-id="212313">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="PERETZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PERETZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 53" data-original-title='Sostituito al minuto 53'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(53')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-212313'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.71 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-76365" data-player-id="76365">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VACCA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VACCA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 81" data-original-title='Sostituito al minuto 81'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(81')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-76365'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.01 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-150526" data-player-id="150526">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="FORTE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FORTE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 53" data-original-title='Sostituito al minuto 53'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(53')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-150526'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.43 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-246875" data-player-id="246875">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="JOHNSEN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">JOHNSEN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-246875'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.17 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Venezia" aria-expanded="true" aria-controls="collapseAwayPanchina-Venezia">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Venezia">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-478363" data-player-id="478363">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="NERI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">NERI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-478363'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-428237" data-player-id="428237">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MAZZOCCHI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAZZOCCHI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 16" data-original-title='Subentrato al minuto 16'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(16')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-428237'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.85 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-19537" data-player-id="19537">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MODOLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MODOLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-19537'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-445433" data-player-id="445433">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="SCHNEGG" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SCHNEGG </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-445433'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-454490" data-player-id="454490">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="SVOBODA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SVOBODA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-454490'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-434039" data-player-id="434039">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BJARKASON" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BJARKASON </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-434039'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-120127" data-player-id="120127">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="CRNIGOJ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CRNIGOJ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 37" data-original-title='Subentrato al minuto 37'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(37')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-120127'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.49 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-230386" data-player-id="230386">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="HEYMANS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HEYMANS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-230386'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-244291" data-player-id="244291">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/469900.png" alt="KIYINE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KIYINE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-244291'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-426634" data-player-id="426634">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="TESSMANN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TESSMANN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 9" data-original-title='Subentrato al minuto 9'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(9')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-426634'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-220391" data-player-id="220391">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="HENRY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HENRY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 37" data-original-title='Subentrato al minuto 37'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(37')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-220391'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.33 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-221781" data-player-id="221781">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="OKEREKE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">OKEREKE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 16" data-original-title='Subentrato al minuto 16'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(16')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-221781'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.80 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2899" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Cagliari" data-away-team="Empoli">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Cagliari</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-cagliari" data-toggle="tooltip" title="Cagliari" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">0</span> : <span class="away-score">2</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">22/09/21 20:45</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Empoli</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-empoli" data-toggle="tooltip" title="Empoli" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Cagliari</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-105133" data-player-id="105133">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/180566.png" alt="CRAGNO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CRAGNO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(96')</span>
                    
                                            <span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-105133'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.26 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-501395" data-player-id="501395">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/647792.png" alt="CARBONI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CARBONI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-501395'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.39 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-60849" data-player-id="60849">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/93293.png" alt="CEPPITELLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CEPPITELLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 85" data-original-title='Sostituito al minuto 85'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(85')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-60849'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.30 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-212752" data-player-id="212752">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/329953.png" alt="DALBERT" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DALBERT </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-212752'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.79 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-111515" data-player-id="111515">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/214391.png" alt="LYKOGIANNIS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LYKOGIANNIS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 77" data-original-title='Sostituito al minuto 77'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(77')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-111515'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.56 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-429187" data-player-id="429187">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/477415.png" alt="WALUKIEWICZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">WALUKIEWICZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 70" data-original-title='Sostituito al minuto 70'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(70')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-429187'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.85 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-162330" data-player-id="162330">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/297043.png" alt="DEIOLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DEIOLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-162330'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.61 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-163632" data-player-id="163632">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/270586.png" alt="MARIN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MARIN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-163632'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.64 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-192351" data-player-id="192351">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/331580.png" alt="NANDEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">NANDEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(96')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-192351'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.07 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-88340" data-player-id="88340">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/131916.png" alt="JOAO PEDRO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">JOAO PEDRO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-88340'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.50 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-156708" data-player-id="156708">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/289061.png" alt="KEITA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KEITA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(96')</span>
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-156708'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.14 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Cagliari" aria-expanded="false" aria-controls="collapseHomePanchina-Cagliari">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Cagliari">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-39354" data-player-id="39354">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/63271.png" alt="ARESTI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ARESTI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-39354'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-213535" data-player-id="213535">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/297914.png" alt="RADUNOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RADUNOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-213535'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-423902" data-player-id="423902">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ALTARE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ALTARE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-423902'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-209330" data-player-id="209330">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BELLANOVA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BELLANOVA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-209330'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-43693" data-player-id="43693">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/19070.png" alt="CACERES" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CACERES </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 20" data-original-title='Subentrato al minuto 20'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(20')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-43693'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.35 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-32281" data-player-id="32281">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/20153.png" alt="GODIN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GODIN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-32281'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.06 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-195516" data-player-id="195516">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/213128.png" alt="GRASSI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GRASSI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-195516'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-444628" data-player-id="444628">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/534464.png" alt="OLIVA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">OLIVA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-444628'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-49887" data-player-id="49887">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/24675.png" alt="STROOTMAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">STROOTMAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-49887'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.08 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-55654" data-player-id="55654">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/93376.png" alt="FARIAS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FARIAS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-55654'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-67977" data-player-id="67977">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/91442.png" alt="PAVOLETTI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PAVOLETTI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 5" data-original-title='Subentrato al minuto 5'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(5')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-67977'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-153603" data-player-id="153603">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/284215.png" alt="PEREIRO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PEREIRO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 13" data-original-title='Subentrato al minuto 13'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(13')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-153603'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.75 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Empoli</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-184254" data-player-id="184254">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/338189.png" alt="VICARIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VICARIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-glove-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Portiere Imbattuto (90 Minuti disputati) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-184254'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.34 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-201333" data-player-id="201333">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/377081.png" alt="MARCHIZZA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MARCHIZZA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-201333'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.98 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-82334" data-player-id="82334">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/147788.png" alt="ROMAGNOLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ROMAGNOLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-82334'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.10 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-153814" data-player-id="153814">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="STOJANOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">STOJANOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 64" data-original-title='Sostituito al minuto 64'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(64')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-153814'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.81 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-499156" data-player-id="499156">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VITI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VITI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-499156'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.29 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-194783" data-player-id="194783">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/360595.png" alt="HAAS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HAAS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 83" data-original-title='Sostituito al minuto 83'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(83')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-194783'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.12 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-168225" data-player-id="168225">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/265494.png" alt="HENDERSON" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HENDERSON </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-168225'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.84 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-450023" data-player-id="450023">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="RICCI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RICCI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 64" data-original-title='Sostituito al minuto 64'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(64')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-450023'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.12 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-427148" data-player-id="427148">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/468951.png" alt="ZURKOWSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZURKOWSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-427148'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.14 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-157735" data-player-id="157735">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/290747.png" alt="DI FRANCESCO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DI FRANCESCO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 83" data-original-title='Sostituito al minuto 83'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(83')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-vittoria tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal della Vittoria">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-157735'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.68 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-216040" data-player-id="216040">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/426569.png" alt="PINAMONTI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PINAMONTI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 87" data-original-title='Sostituito al minuto 87'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(87')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-216040'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.74 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Empoli" aria-expanded="true" aria-controls="collapseAwayPanchina-Empoli">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Empoli">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-105139" data-player-id="105139">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="FURLAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FURLAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-105139'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-229912" data-player-id="229912">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/445212.png" alt="ISMAJLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ISMAJLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 26" data-original-title='Subentrato al minuto 26'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(26')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-229912'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.36 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-168618" data-player-id="168618">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/307047.png" alt="LUPERTO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LUPERTO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-168618'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-515952" data-player-id="515952">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="PARISI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PARISI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-515952'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-517997" data-player-id="517997">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ASLLANI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ASLLANI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 7" data-original-title='Subentrato al minuto 7'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(7')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-517997'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-204674" data-player-id="204674">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BAJRAMI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BAJRAMI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 7" data-original-title='Subentrato al minuto 7'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(7')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-204674'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-518908" data-player-id="518908">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BALDANZI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BALDANZI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-518908'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-114355" data-player-id="114355">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/166678.png" alt="STULAC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">STULAC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 26" data-original-title='Subentrato al minuto 26'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(26')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-114355'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.70 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-209353" data-player-id="209353">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/384563.png" alt="CUTRONE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CUTRONE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-209353'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-517998" data-player-id="517998">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="EKONG" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">EKONG </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-517998'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-79847" data-player-id="79847">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/121282.png" alt="LA MANTIA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LA MANTIA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 3" data-original-title='Subentrato al minuto 3'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(3')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-79847'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-153758" data-player-id="153758">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MANCUSO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MANCUSO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-153758'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2903" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Salernitana" data-away-team="Verona">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Salernitana</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-salernitana" data-toggle="tooltip" title="Salernitana" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">2</span> : <span class="away-score">2</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">22/09/21 18:30</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Verona</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-verona" data-toggle="tooltip" title="Verona" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Salernitana</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-60066" data-player-id="60066">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/85489.png" alt="BELEC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BELEC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(95')</span>
                    
                                            <span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-60066'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.22 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-153693" data-player-id="153693">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/251825.png" alt="GAGLIOLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GAGLIOLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Passaggio Decisivo (Assist non intenzionale) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-153693'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.24 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-108732" data-player-id="108732">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/211263.png" alt="GYOMBER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GYOMBER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(95')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-108732'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.88 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-230113" data-player-id="230113">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="KECHRIDA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KECHRIDA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-230113'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.67 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215983" data-player-id="215983">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="RANIERI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RANIERI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 89" data-original-title='Sostituito al minuto 89'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(89')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215983'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.62 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-61966" data-player-id="61966">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="STRANDBERG" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">STRANDBERG </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-61966'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.69 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215047" data-player-id="215047">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="COULIBALY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">COULIBALY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 89" data-original-title='Sostituito al minuto 89'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(89')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215047'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.10 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-249710" data-player-id="249710">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/478375.png" alt="COULIBALY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">COULIBALY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-del-pareggio tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal del Pareggio">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-249710'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.84 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215886" data-player-id="215886">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="GONDO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GONDO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215886'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.62 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-28559" data-player-id="28559">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/547.png" alt="RIBERY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RIBERY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 88" data-original-title='Sostituito al minuto 88'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(88')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-28559'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.20 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-164633" data-player-id="164633">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/198866.png" alt="SIMY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SIMY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 58" data-original-title='Sostituito al minuto 58'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(58')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-164633'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.62 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Salernitana" aria-expanded="false" aria-controls="collapseHomePanchina-Salernitana">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Salernitana">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-40670" data-player-id="40670">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="FIORILLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FIORILLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-40670'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-220002" data-player-id="220002">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BOGDAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BOGDAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-220002'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-169420" data-player-id="169420">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/302730.png" alt="JAROSZYNSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">JAROSZYNSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-169420'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-89087" data-player-id="89087">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/102641.png" alt="VESELI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VESELI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-89087'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-489209" data-player-id="489209">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ZORTEA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZORTEA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 1" data-original-title='Subentrato al minuto 1'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(1')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-489209'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-56247" data-player-id="56247">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="DI TACCHIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DI TACCHIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 1" data-original-title='Subentrato al minuto 1'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(1')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-56247'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-199637" data-player-id="199637">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="KASTANOS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KASTANOS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 2" data-original-title='Subentrato al minuto 2'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(2')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-199637'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-60068" data-player-id="60068">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/85498.png" alt="OBI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">OBI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-60068'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-141561" data-player-id="141561">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="SCHIAVONE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SCHIAVONE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-141561'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-161932" data-player-id="161932">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/273833.png" alt="BONAZZOLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BONAZZOLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 16" data-original-title='Subentrato al minuto 16'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(16')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-161932'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.04 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-49203" data-player-id="49203">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/20902.png" alt="DJURIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DJURIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 32" data-original-title='Subentrato al minuto 32'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(32')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-49203'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.86 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-226273" data-player-id="226273">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VERGANI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VERGANI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-226273'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Verona</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-156245" data-player-id="156245">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/258396.png" alt="MONTIPO'" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MONTIPO' </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-156245'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.91 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-141925" data-player-id="141925">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/276363.png" alt="DAWIDOWICZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DAWIDOWICZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-141925'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.39 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-49391" data-player-id="49391">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/63522.png" alt="FARAONI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FARAONI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-49391'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.35 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-118888" data-player-id="118888">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/160106.png" alt="GUNTER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GUNTER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-118888'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.56 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-161794" data-player-id="161794">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/295568.png" alt="MAGNANI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAGNANI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-161794'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.78 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-218784" data-player-id="218784">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/298484.png" alt="BARAK" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BARAK </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-218784'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.53 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-241127" data-player-id="241127">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="HONGLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HONGLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-241127'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.17 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-430848" data-player-id="430848">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ILIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ILIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-430848'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.26 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-57012" data-player-id="57012">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/45612.png" alt="LAZOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LAZOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 92" data-original-title='Sostituito al minuto 92'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(92')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-57012'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.83 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-95180" data-player-id="95180">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/180518.png" alt="CAPRARI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CAPRARI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 66" data-original-title='Sostituito al minuto 66'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(66')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-95180'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.56 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-50401" data-player-id="50401">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/33232.png" alt="KALINIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KALINIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 56" data-original-title='Sostituito al minuto 56'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(56')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-2-goals-green tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Segnati su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span>
					                </span><span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-50401'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.41 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Verona" aria-expanded="true" aria-controls="collapseAwayPanchina-Verona">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Verona">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-94239" data-player-id="94239">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/153979.png" alt="BERARDI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BERARDI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-94239'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-459089" data-player-id="459089">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="PANDUR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PANDUR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-459089'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-244453" data-player-id="244453">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="CASALE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CASALE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-244453'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.09 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-90557" data-player-id="90557">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/162485.png" alt="CECCHERINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CECCHERINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-90557'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-433734" data-player-id="433734">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/458700.png" alt="CETIN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CETIN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 0" data-original-title='Subentrato al minuto 0'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-433734'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-149260" data-player-id="149260">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/218100.png" alt="BESSA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BESSA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 24" data-original-title='Subentrato al minuto 24'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(24')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-149260'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.82 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-152338" data-player-id="152338">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/162523.png" alt="TAMEZE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TAMEZE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-152338'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.71 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-466149" data-player-id="466149">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="CANCELLIERI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CANCELLIERI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-466149'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-192905" data-player-id="192905">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/349701.png" alt="LASAGNA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LASAGNA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-192905'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-59972" data-player-id="59972">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/72526.png" alt="RAGUSA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RAGUSA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-59972'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-166016" data-player-id="166016">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/303036.png" alt="SIMEONE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SIMEONE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 34" data-original-title='Subentrato al minuto 34'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(34')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-166016'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.87 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2905" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Spezia" data-away-team="Juventus">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Spezia</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-spezia" data-toggle="tooltip" title="Spezia" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">2</span> : <span class="away-score">3</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">22/09/21 18:30</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Juventus</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-juventus" data-toggle="tooltip" title="Juventus" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Spezia</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-59108" data-player-id="59108">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/61206.png" alt="ZOET" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZOET </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(97')</span>
                    
                                            <span class="fantaicon-3-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="3 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-59108'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.50 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-217596" data-player-id="217596">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="AMIAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">AMIAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(97')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-217596'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.92 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-179329" data-player-id="179329">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BASTONI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BASTONI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(97')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-179329'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.90 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-467208" data-player-id="467208">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/575287.png" alt="FERRER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FERRER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-467208'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.75 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-228276" data-player-id="228276">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="HRISTOV" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HRISTOV </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(97')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-228276'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.40 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-214286" data-player-id="214286">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="NIKOLAOU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">NIKOLAOU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-214286'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.95 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-78796" data-player-id="78796">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/104710.png" alt="BOURABIA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BOURABIA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 77" data-original-title='Sostituito al minuto 77'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(77')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-78796'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.23 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-233558" data-player-id="233558">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MAGGIORE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAGGIORE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 85" data-original-title='Sostituito al minuto 85'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(85')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Passaggio Decisivo (Assist non intenzionale) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-233558'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.29 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-503184" data-player-id="503184">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ANTISTE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ANTISTE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 77" data-original-title='Sostituito al minuto 77'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(77')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-503184'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.24 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-159043" data-player-id="159043">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="GYASI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GYASI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(97')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-159043'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.72 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-153867" data-player-id="153867">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/373031.png" alt="VERDE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VERDE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 77" data-original-title='Sostituito al minuto 77'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(77')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-153867'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.63 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Spezia" aria-expanded="false" aria-controls="collapseHomePanchina-Spezia">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Spezia">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-151923" data-player-id="151923">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/282888.png" alt="PROVEDEL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PROVEDEL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-151923'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-547065" data-player-id="547065">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="ZOVKO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZOVKO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-547065'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-539223" data-player-id="539223">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BERTOLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BERTOLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-539223'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-440854" data-player-id="440854">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="KIWIOR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KIWIOR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-440854'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-80974" data-player-id="80974">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/134032.png" alt="SALA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SALA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 13" data-original-title='Subentrato al minuto 13'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(13')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-80974'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.43 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-519337" data-player-id="519337">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="PODGOREANU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PODGOREANU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-519337'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-194827" data-player-id="194827">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/357321.png" alt="MANAJ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MANAJ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 13" data-original-title='Subentrato al minuto 13'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(13')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-194827'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.92 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-218707" data-player-id="218707">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/330852.png" alt="NZOLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">NZOLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 13" data-original-title='Subentrato al minuto 13'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(13')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-218707'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.75 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-428897" data-player-id="428897">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/497250.png" alt="SALCEDO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SALCEDO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 5" data-original-title='Subentrato al minuto 5'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(5')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-428897'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-456304" data-player-id="456304">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="STRELEC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">STRELEC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-456304'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Juventus</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-59936" data-player-id="59936">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/16085.png" alt="SZCZESNY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SZCZESNY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-59936'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.22 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-28277" data-player-id="28277">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/3979.png" alt="BONUCCI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BONUCCI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Passaggio Decisivo (Assist non intenzionale) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-28277'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.87 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-100180" data-player-id="100180">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/75848.png" alt="DANILO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DANILO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-100180'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.74 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-209365" data-player-id="209365">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/399768.png" alt="DE LIGT" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DE LIGT </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-vittoria tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal della Vittoria">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-209365'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.79 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-107013" data-player-id="107013">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/158411.png" alt="DE SCIGLIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DE SCIGLIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-107013'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.76 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-202993" data-player-id="202993">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/396178.png" alt="BENTANCUR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BENTANCUR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-202993'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.49 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-223541" data-player-id="223541">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/453705.png" alt="CHIESA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CHIESA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 84" data-original-title='Sostituito al minuto 84'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(84')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-223541'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.59 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-241519" data-player-id="241519">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/459693.png" alt="MCKENNIE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MCKENNIE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-241519'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.78 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-120743" data-player-id="120743">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/242768.png" alt="RABIOT" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RABIOT </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 67" data-original-title='Sostituito al minuto 67'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(67')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Passaggio Decisivo (Assist non intenzionale) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-120743'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.04 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-120638" data-player-id="120638">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/201072.png" alt="DYBALA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DYBALA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-120638'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.95 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-242058" data-player-id="242058">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/429830.png" alt="KEAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KEAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 59" data-original-title='Sostituito al minuto 59'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(59')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-242058'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.56 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Juventus" aria-expanded="true" aria-controls="collapseAwayPanchina-Juventus">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Juventus">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-87995" data-player-id="87995">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/103157.png" alt="PERIN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PERIN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-87995'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-59338" data-player-id="59338">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/95779.png" alt="PINSOGLIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PINSOGLIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-59338'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-53693" data-player-id="53693">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/78657.png" alt="ALEX SANDRO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ALEX SANDRO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-53693'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.89 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-66733" data-player-id="66733">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/61414.png" alt="CUADRADO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CUADRADO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-66733'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215981" data-player-id="215981">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/419721.png" alt="PELLEGRINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PELLEGRINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215981'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-150710" data-player-id="150710">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/162676.png" alt="RUGANI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RUGANI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-150710'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-147297" data-player-id="147297">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/278876.png" alt="BERNARDESCHI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BERNARDESCHI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 23" data-original-title='Subentrato al minuto 23'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(23')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-147297'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.20 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-445044" data-player-id="445044">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/460405.png" alt="KULUSEVSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KULUSEVSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 6" data-original-title='Subentrato al minuto 6'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(6')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-445044'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-171387" data-player-id="171387">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/319840.png" alt="LOCATELLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LOCATELLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-171387'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.28 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-41792" data-player-id="41792">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/66532.png" alt="RAMSEY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RAMSEY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-41792'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-88482" data-player-id="88482">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/103171.png" alt="MORATA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MORATA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 31" data-original-title='Subentrato al minuto 31'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(31')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Passaggio Decisivo (Assist non intenzionale) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-88482'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.27 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2900" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Fiorentina" data-away-team="Inter">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Fiorentina</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-fiorentina" data-toggle="tooltip" title="Fiorentina" data-animation="false"><span class="path1"></span><span class="path2"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">1</span> : <span class="away-score">3</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">21/09/21 20:45</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Inter</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-inter" data-toggle="tooltip" title="Inter" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Fiorentina</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-162842" data-player-id="162842">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/297844.png" alt="DRAGOWSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DRAGOWSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(93')</span>
                    
                                            <span class="fantaicon-skull-orange tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Errore Decisivo (che ha causato un Tiro avversario) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-3-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="3 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-162842'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.65 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-88432" data-player-id="88432">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/165998.png" alt="BIRAGHI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BIRAGHI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(93')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-88432'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.16 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-227444" data-player-id="227444">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/440930.png" alt="MILENKOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MILENKOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(93')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-227444'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.76 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-84702" data-player-id="84702">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="NASTASIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">NASTASIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-84702'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.70 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-122476" data-player-id="122476">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/218153.png" alt="BENASSI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BENASSI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 66" data-original-title='Sostituito al minuto 66'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(66')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-122476'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.14 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-49417" data-player-id="49417">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/31967.png" alt="BONAVENTURA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BONAVENTURA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 84" data-original-title='Sostituito al minuto 84'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(84')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-49417'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.25 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-116056" data-player-id="116056">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/218101.png" alt="DUNCAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DUNCAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 84" data-original-title='Sostituito al minuto 84'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(84')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-116056'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.78 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-198849" data-player-id="198849">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/348191.png" alt="TORREIRA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TORREIRA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 66" data-original-title='Sostituito al minuto 66'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(66')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-198849'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.21 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-231004" data-player-id="231004">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="GONZALEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GONZALEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(78')</span>
                    
                                            <span class="fantaicon-espulsione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Espulsione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-231004'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.39 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-235454" data-player-id="235454">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/498242.png" alt="SOTTIL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SOTTIL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 74" data-original-title='Sostituito al minuto 74'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(74')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-235454'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.20 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-225479" data-player-id="225479">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/436316.png" alt="VLAHOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VLAHOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(93')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-225479'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.48 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Fiorentina" aria-expanded="false" aria-controls="collapseHomePanchina-Fiorentina">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Fiorentina">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-17192" data-player-id="17192">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/18505.png" alt="ROSATI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ROSATI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-17192'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-79583" data-player-id="79583">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/98312.png" alt="TERRACCIANO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TERRACCIANO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-79583'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-223434" data-player-id="223434">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/433270.png" alt="IGOR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">IGOR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-223434'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-209736" data-player-id="209736">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/404648.png" alt="MARTINEZ QUARTA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MARTINEZ QUARTA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-209736'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-201172" data-player-id="201172">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/311705.png" alt="ODRIOZOLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ODRIOZOLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 24" data-original-title='Subentrato al minuto 24'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(24')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-201172'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.78 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-430847" data-player-id="430847">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/427728.png" alt="TERZIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TERZIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-430847'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-172912" data-player-id="172912">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/319054.png" alt="AMRABAT" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">AMRABAT </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 24" data-original-title='Subentrato al minuto 24'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(24')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-172912'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.94 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-530776" data-player-id="530776">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BIANCO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BIANCO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-530776'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-51732" data-player-id="51732">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/58320.png" alt="CALLEJON" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CALLEJON </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 6" data-original-title='Subentrato al minuto 6'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(6')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-51732'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-232066" data-player-id="232066">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="MALEH" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MALEH </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-232066'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-57107" data-player-id="57107">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/145357.png" alt="SAPONARA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SAPONARA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 16" data-original-title='Subentrato al minuto 16'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(16')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-57107'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.96 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-57038" data-player-id="57038">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/65259.png" alt="KOKORIN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KOKORIN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 6" data-original-title='Subentrato al minuto 6'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(6')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-57038'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Inter</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-18383" data-player-id="18383">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/17974.png" alt="HANDANOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HANDANOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-subito tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Subito ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-18383'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.74 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215977" data-player-id="215977">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/426558.png" alt="BASTONI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BASTONI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215977'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.90 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-40002" data-player-id="40002">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/17720.png" alt="DARMIAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DARMIAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 66" data-original-title='Sostituito al minuto 66'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(66')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-40002'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.40 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-78140" data-player-id="78140">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/102880.png" alt="DE VRIJ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DE VRIJ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-78140'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.91 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-112065" data-player-id="112065">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/213590.png" alt="SKRINIAR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SKRINIAR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-112065'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.61 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-171384" data-player-id="171384">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/319838.png" alt="BARELLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BARELLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 70" data-original-title='Sostituito al minuto 70'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(70')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-171384'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.52 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-94425" data-player-id="94425">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/137619.png" alt="BROZOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BROZOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-94425'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.77 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-111732" data-player-id="111732">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/155410.png" alt="CALHANOGLU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CALHANOGLU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 84" data-original-title='Sostituito al minuto 84'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(84')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-assist-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist da Fermo ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-111732'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.33 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-45034" data-player-id="45034">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/13756.png" alt="PERISIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PERISIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-45034'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.90 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-42544" data-player-id="42544">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/20588.png" alt="DZEKO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DZEKO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 70" data-original-title='Sostituito al minuto 70'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(70')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-vittoria tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal della Vittoria">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-42544'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.48 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-209737" data-player-id="209737">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/404462.png" alt="MARTINEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MARTINEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 83" data-original-title='Sostituito al minuto 83'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(83')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-209737'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.14 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Inter" aria-expanded="true" aria-controls="collapseAwayPanchina-Inter">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Inter">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-17423" data-player-id="17423">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/18676.png" alt="CORDAZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CORDAZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-17423'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215531" data-player-id="215531">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/408805.png" alt="RADU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RADU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215531'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-39826" data-player-id="39826">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/112151.png" alt="D'AMBROSIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">D'AMBROSIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-39826'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-161919" data-player-id="161919">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/273832.png" alt="DIMARCO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DIMARCO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 7" data-original-title='Subentrato al minuto 7'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(7')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-161919'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-199432" data-player-id="199432">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="DUMFRIES" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DUMFRIES </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 24" data-original-title='Subentrato al minuto 24'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(24')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-199432'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.32 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-42593" data-player-id="42593">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/17782.png" alt="KOLAROV" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KOLAROV </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-42593'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-39167" data-player-id="39167">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/61141.png" alt="RANOCCHIA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RANOCCHIA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-39167'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-171152" data-player-id="171152">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/275443.png" alt="GAGLIARDINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GAGLIARDINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 6" data-original-title='Subentrato al minuto 6'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(6')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-171152'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.30 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-148215" data-player-id="148215">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/121289.png" alt="VECINO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VECINO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 20" data-original-title='Subentrato al minuto 20'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(20')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-148215'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.32 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-37265" data-player-id="37265">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/4117.png" alt="SANCHEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SANCHEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 20" data-original-title='Subentrato al minuto 20'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(20')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-37265'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.67 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-474843" data-player-id="474843">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="SATRIANO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SATRIANO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-474843'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2897" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Atalanta" data-away-team="Sassuolo">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Atalanta</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-atalanta" data-toggle="tooltip" title="Atalanta" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">2</span> : <span class="away-score">1</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">21/09/21 20:45</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Sassuolo</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-sassuolo" data-toggle="tooltip" title="Sassuolo" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Atalanta</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-121537" data-player-id="121537">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/261928.png" alt="MUSSO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MUSSO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-subito tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Subito ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-121537'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.87 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-439128" data-player-id="439128">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/374637.png" alt="DEMIRAL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DEMIRAL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-439128'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.26 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-96645" data-player-id="96645">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/186633.png" alt="DJIMSITI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DJIMSITI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(95')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-96645'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.28 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-177901" data-player-id="177901">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/327174.png" alt="GOSENS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GOSENS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 69" data-original-title='Sostituito al minuto 69'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(69')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-177901'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.93 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-61118" data-player-id="61118">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/78553.png" alt="TOLOI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TOLOI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-61118'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.12 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-105700" data-player-id="105700">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/205625.png" alt="ZAPPACOSTA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZAPPACOSTA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 69" data-original-title='Sostituito al minuto 69'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(69')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-gol-vittoria tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal della Vittoria">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-105700'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>7.33 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-82428" data-player-id="82428">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/123946.png" alt="DE ROON" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DE ROON </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(95')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-82428'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.80 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-204644" data-player-id="204644">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="KOOPMEINERS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KOOPMEINERS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-204644'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.16 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-432105" data-player-id="432105">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/305841.png" alt="PESSINA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PESSINA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 84" data-original-title='Sostituito al minuto 84'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(84')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-432105'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.51 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-157374" data-player-id="157374">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/217771.png" alt="MALINOVSKIY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MALINOVSKIY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 63" data-original-title='Sostituito al minuto 63'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(63')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-157374'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.41 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-103086" data-player-id="103086">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/33276.png" alt="ZAPATA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ZAPATA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 84" data-original-title='Sostituito al minuto 84'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(84')</span>
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-103086'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.43 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Atalanta" aria-expanded="false" aria-controls="collapseHomePanchina-Atalanta">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Atalanta">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-519394" data-player-id="519394">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="SCALVINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SCALVINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-519394'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-73709" data-player-id="73709">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/95822.png" alt="ROSSI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ROSSI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-73709'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-55083" data-player-id="55083">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/193830.png" alt="SPORTIELLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SPORTIELLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-55083'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-483988" data-player-id="483988">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="LOVATO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LOVATO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-483988'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-229220" data-player-id="229220">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/449126.png" alt="MAEHLE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAEHLE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 21" data-original-title='Subentrato al minuto 21'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(21')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-229220'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.44 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-89861" data-player-id="89861">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/90283.png" alt="PALOMINO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PALOMINO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-89861'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-215312" data-player-id="215312">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/415580.png" alt="PEZZELLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PEZZELLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 21" data-original-title='Subentrato al minuto 21'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(21')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-215312'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.73 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-89076" data-player-id="89076">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/129109.png" alt="FREULER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FREULER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-89076'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-164570" data-player-id="164570">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/215485.png" alt="PASALIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PASALIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 6" data-original-title='Subentrato al minuto 6'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(6')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-164570'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-55712" data-player-id="55712">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/74539.png" alt="ILICIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ILICIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 27" data-original-title='Subentrato al minuto 27'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(27')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-55712'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.10 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-160174" data-player-id="160174">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/293676.png" alt="MIRANCHUK" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MIRANCHUK </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-160174'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-226267" data-player-id="226267">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/575343.png" alt="PICCOLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PICCOLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 6" data-original-title='Subentrato al minuto 6'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(6')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-226267'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Sassuolo</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-18500" data-player-id="18500">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/18628.png" alt="CONSIGLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CONSIGLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-18500'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.14 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-159522" data-player-id="159522">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/159868.png" alt="AYHAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">AYHAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-159522'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.76 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-155620" data-player-id="155620">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/205555.png" alt="FERRARI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FERRARI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-155620'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.21 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-106247" data-player-id="106247">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/308326.png" alt="KYRIAKOPOULOS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KYRIAKOPOULOS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-106247'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.22 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-224990" data-player-id="224990">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/440982.png" alt="MULDUR" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MULDUR </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Passaggio Decisivo (Assist non intenzionale) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-224990'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.16 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-235453" data-player-id="235453">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="FRATTESI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FRATTESI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 82" data-original-title='Sostituito al minuto 82'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(82')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-235453'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.25 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-14715" data-player-id="14715">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/58559.png" alt="MAGNANELLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAGNANELLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 60" data-original-title='Sostituito al minuto 60'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(60')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-14715'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.48 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-424044" data-player-id="424044">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/495017.png" alt="TRAORE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TRAORE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 67" data-original-title='Sostituito al minuto 67'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(67')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-424044'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.25 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-116796" data-player-id="116796">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/246415.png" alt="BERARDI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BERARDI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-116796'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.41 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-135365" data-player-id="135365">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/263399.png" alt="BOGA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BOGA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 60" data-original-title='Sostituito al minuto 60'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(60')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-135365'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.20 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-95215" data-player-id="95215">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/191223.png" alt="DEFREL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DEFREL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 82" data-original-title='Sostituito al minuto 82'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(82')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-95215'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>4.83 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Sassuolo" aria-expanded="true" aria-controls="collapseAwayPanchina-Sassuolo">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Sassuolo">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-7485" data-player-id="7485">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/17694.png" alt="PEGOLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PEGOLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-7485'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-62305" data-player-id="62305">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/68268.png" alt="CHIRICHES" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CHIRICHES </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-62305'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-147614" data-player-id="147614">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/279072.png" alt="GOLDANIGA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GOLDANIGA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-147614'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-38476" data-player-id="38476">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/18275.png" alt="PELUSO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PELUSO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-38476'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-218441" data-player-id="218441">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/425515.png" alt="ROGERIO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ROGERIO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-218441'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-160540" data-player-id="160540">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/182732.png" alt="TOLJAN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TOLJAN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-160540'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-66228" data-player-id="66228">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/116377.png" alt="DJURICIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DJURICIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 23" data-original-title='Subentrato al minuto 23'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(23')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-66228'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.15 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-234506" data-player-id="234506">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="HARROUI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HARROUI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 30" data-original-title='Subentrato al minuto 30'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(30')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-234506'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.72 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-440730" data-player-id="440730">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="HENRIQUE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HENRIQUE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-440730'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-213965" data-player-id="213965">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/314574.png" alt="LOPEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">LOPEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 8" data-original-title='Subentrato al minuto 8'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(8')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-213965'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.90 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-446969" data-player-id="446969">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/467679.png" alt="RASPADORI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">RASPADORI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 30" data-original-title='Subentrato al minuto 30'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(30')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-446969'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.87 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-195899" data-player-id="195899">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/377105.png" alt="SCAMACCA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SCAMACCA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 8" data-original-title='Subentrato al minuto 8'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(8')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-195899'>
                                <span id='note-13' class="text-danger semi-bold tip live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Assegnato / Senza Voto'><i class="fa fa-ban"></i> </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                                <div class="tab-pane " id="lineup-2898" role="tabpanel">
                            <div class="big-match-slide" data-home-team="Bologna" data-away-team="Genoa">
                                <div class="score-container">
                                    <div class="big-score">
                                        <div class="row clearfix">
                                            <div class="col-5 home-team text-right">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 home-team-name text-uppercase text-center text-md-right display-4 font-weight-bold mb-0">Bologna</div>
                                                    <div class="col-12 col-md-4 home-team-logo text-center pl-md-2 fs-60"><span class="fantaicon-team-bologna" data-toggle="tooltip" title="Bologna" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-2 text-center score-container p-0">
                                                                                                    <div class="score display-3 font-weight-bold mb-1"><span class="home-score">2</span> : <span class="away-score">2</span></div>
                                                    <div class="status text-uppercase text-success font-weight-bold fs-11 opacity-80">Terminata</div>
                                                                                                <div class="matchdate">21/09/21 18:30</div>
                                                <p class="live-score-board-last-update fs-10 font-weight-bold text-green"></p>
                                            </div>
                                            <div class="col-5 away-team">
                                                <div class="row clearfix no-gutters align-items-center">
                                                    <div class="col-12 col-md-8 order-md-2 away-team-name text-uppercase text-center text-md-left display-4 font-weight-bold mb-0">Genoa</div>
                                                    <div class="col-12 col-md-4 order-md-1  away-team-logo text-center pr-md-2 fs-60"><span class="fantaicon-team-genoa" data-toggle="tooltip" title="Genoa" data-animation="false"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></span></div>
                                                </div>
                                            </div>
                                            <div class="col-12 col-sm-12 text-center mt-2">
                                                
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                                                    <div class="row clearfix mt-3 live-tables">
                                        <div class="col-6 col-sm-6 col-md-6 px-1 home-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Bologna</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-85288" data-player-id="85288">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/67190.png" alt="SKORUPSKI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SKORUPSKI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-85288'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.63 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-175639" data-player-id="175639">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/323251.png" alt="BONIFAZI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BONIFAZI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(96')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-whistle-red tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Concesso ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-175639'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.13 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-21125" data-player-id="21125">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/4059.png" alt="DE SILVESTRI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DE SILVESTRI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-21125'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.02 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-472713" data-player-id="472713">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="HICKEY" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HICKEY </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 80" data-original-title='Sostituito al minuto 80'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(80')</span>
                    
                                            <span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-472713'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.58 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-48853" data-player-id="48853">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/21790.png" alt="MEDEL" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MEDEL </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-48853'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.23 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-250199" data-player-id="250199">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/477166.png" alt="DOMINGUEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DOMINGUEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(96')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-250199'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.56 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-59920" data-player-id="59920">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/72309.png" alt="SORIANO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SORIANO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(96')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-59920'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.72 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-210912" data-player-id="210912">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/377463.png" alt="SVANBERG" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SVANBERG </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 80" data-original-title='Sostituito al minuto 80'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(80')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-210912'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.62 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-41464" data-player-id="41464">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/21018.png" alt="ARNAUTOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ARNAUTOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                                            <span class="text-muted fs-12">(96')</span>
                    
                                            <span class="fantaicon-rigore-segnato tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Segnato ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-41464'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.66 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-442430" data-player-id="442430">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/529431.png" alt="BARROW" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BARROW </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 64" data-original-title='Sostituito al minuto 64'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(64')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-442430'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.86 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-223966" data-player-id="223966">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/401959.png" alt="ORSOLINI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ORSOLINI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 64" data-original-title='Sostituito al minuto 64'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(64')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-223966'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.06 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
            </tbody>


                                            </table>
                                            <a class="d-block text-muted home-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseHomePanchina-Bologna" aria-expanded="false" aria-controls="collapseHomePanchina-Bologna">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseHomePanchina-Bologna">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-74011" data-player-id="74011">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/90659.png" alt="BARDI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BARDI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-74011'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-248981" data-player-id="248981">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BINKS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BINKS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-248981'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-119213" data-player-id="119213">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/219029.png" alt="DIJKS" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DIJKS </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 10" data-original-title='Subentrato al minuto 10'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(10')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-119213'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.35 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-119908" data-player-id="119908">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/221800.png" alt="MBAYE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MBAYE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-119908'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-103155" data-player-id="103155">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/175868.png" alt="SOUMAORO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SOUMAORO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-103155'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-465189" data-player-id="465189">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="THEATE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">THEATE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-465189'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-430368" data-player-id="430368">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/490969.png" alt="SKOV OLSEN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SKOV OLSEN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 26" data-original-title='Subentrato al minuto 26'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(26')</span>
                    
                                            <span class="fantaicon-ball-hit-post tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Palo / Traversa ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-430368'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.88 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-244290" data-player-id="244290">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VIGNATO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VIGNATO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 26" data-original-title='Subentrato al minuto 26'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(26')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-244290'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.15 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-464770" data-player-id="464770">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="CANGIANO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CANGIANO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-464770'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-81033" data-player-id="81033">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/114988.png" alt="SANSONE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SANSONE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 10" data-original-title='Subentrato al minuto 10'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(10')</span>
                    
                                            <span class="fantaicon-whistle-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Guadagnato ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-81033'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.08 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-78109" data-player-id="78109">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/31548.png" alt="SANTANDER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SANTANDER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-78109'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-459655" data-player-id="459655">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VAN HOOIJDONK" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VAN HOOIJDONK </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-459655'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>
                                        <!-- Away Team Votes -->
                                        <div class="col-6 col-sm-6 col-md-6 px-1 away-team-votes">
                                            <h5 class="d-md-none text-center text-uppercase text-muted">Genoa</h5>
                                            <table class="table table-hover table-sm mb-0">
                                                <thead>
    <tr>

        <th colspan="3">
            <span><small class="text-muted">TITOLARE</small></span>
            
        </th>
        <th class=""></th>
        <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
    </tr>
    </thead>
    
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-21155" data-player-id="21155">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/58378.png" alt="SIRIGU" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SIRIGU </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-skull-orange tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Errore Decisivo (che ha causato un Tiro avversario) ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-2-goal tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="2 Goal Subiti ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span><span class="path9"></span><span class="path10"></span><span class="path11"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-21155'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.33 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-152965" data-player-id="152965">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/250403.png" alt="BANI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BANI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 80" data-original-title='Sostituito al minuto 80'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(80')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-152965'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.16 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-515759" data-player-id="515759">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="CAMBIASO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CAMBIASO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 80" data-original-title='Sostituito al minuto 80'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(80')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-515759'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.24 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-19821" data-player-id="19821">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/17686.png" alt="CRISCITO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">CRISCITO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-assist tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Assist Intenzionale su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span><span class="fantaicon-gol-del-pareggio tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Goal del Pareggio">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span><span class="fantaicon-rigore-segnato tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Segnato ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span><span class="path7"></span><span class="path8"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-19821'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.95 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-184661" data-player-id="184661">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/340535.png" alt="FARES" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">FARES </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 59" data-original-title='Sostituito al minuto 59'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(59')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-184661'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.35 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-87542" data-player-id="87542">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/84284.png" alt="MAKSIMOVIC" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MAKSIMOVIC </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-87542'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.94 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-56999" data-player-id="56999">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/85043.png" alt="BADELJ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BADELJ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-56999'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.37 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-157717" data-player-id="157717">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/180889.png" alt="HERNANI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">HERNANI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 68" data-original-title='Sostituito al minuto 68'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(68')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-157717'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.89 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-450024" data-player-id="450024">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/548615.png" alt="ROVELLA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">ROVELLA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Sostituito al minuto 45" data-original-title='Sostituito al minuto 45'><span class="fantaicon-t-shirt-out tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-450024'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.54 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-60071" data-player-id="60071">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/85503.png" alt="DESTRO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">DESTRO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-gol-fatto tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Goal Segnato su Azione ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span><span class="path6"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-60071'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.37 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-539199" data-player-id="539199">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="KALLON" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">KALLON </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat text-success semi-bold " data-toggle="tooltip" data-placement="top" title="90" data-original-title='90'></span>
                    
                    
                                            <span class="fantaicon-whistle-blue tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Guadagnato ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-539199'>
                                <span id='note-13' class="font-weight-bold text-green live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>6.57 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
            </tbody>


                                            </table>

                                            <a class="d-block text-muted away-panchina bg-light p-1 text-uppercase mb-3" data-toggle="collapse" href="#collapseAwayPanchina-Genoa" aria-expanded="true" aria-controls="collapseAwayPanchina-Genoa">
                                                <span class="label">Panchina</span>
                                            </a>
                                            <div class="collapse show" id="collapseAwayPanchina-Genoa">
                                                <table class="table table-hover table-sm">
                                                    <thead>
        <tr>
            <th colspan="3">
                <span><small class="text-muted text-uppercase">In Panchina</small></span>
                
            </th>
            <th class=""></th>
            <th class="text-center vote-col-no font-weight-normal text-muted small"><span>O</span><span class="d-none d-lg-inline-block">ggettivi</span></th>
        </tr>
        </thead>
        <tbody>
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-218362" data-player-id="218362">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/386599.png" alt="SEMPER" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-p'>P</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SEMPER </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-218362'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-202903" data-player-id="202903">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/394648.png" alt="GHIGLIONE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">GHIGLIONE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 10" data-original-title='Subentrato al minuto 10'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(10')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-202903'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.94 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-17985" data-player-id="17985">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/4312.png" alt="MASIELLO" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MASIELLO </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-17985'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-126488" data-player-id="126488">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/211935.png" alt="SABELLI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">SABELLI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-126488'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-423112" data-player-id="423112">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VANHEUSDEN" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VANHEUSDEN </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 10" data-original-title='Subentrato al minuto 10'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(10')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span><span class="fantaicon-whistle-red tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="1 Rigore Concesso ">
					                <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span><span class="path5"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-423112'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.16 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-431026" data-player-id="431026">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="VASQUEZ" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-d'>D</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">VASQUEZ </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-431026'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-21123" data-player-id="21123">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/206.png" alt="BEHRAMI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BEHRAMI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 45" data-original-title='Subentrato al minuto 45'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(45')</span>
                    
                                            <span class="fantaicon-ammonizione tip" data-popup="tooltip" data-toggle="tooltip"  data-popup="tooltip" data-toggle="tooltip"  data-original-title="Ammonizione">
					                <span class="path1"></span>
					                </span>
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-21123'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.38 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-195896" data-player-id="195896">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/384555.png" alt="MELEGONI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">MELEGONI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-195896'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-437802" data-player-id="437802">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/477620.png" alt="PORTANOVA" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PORTANOVA </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 31" data-original-title='Subentrato al minuto 31'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(31')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-437802'>
                                <span id='note-13' class="font-weight-bold text-warning live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.48 </span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-158496" data-player-id="158496">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="TOURE" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-c'>C</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">TOURE </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-158496'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
                    <tr class="live-score-board-handler" id="row_for_player-209340" data-player-id="209340">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/0.png" alt="BIANCHI" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">BIANCHI </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted text-danger tip " data-toggle="tooltip" data-placement="top" title="Incontro non disputato" data-original-title='Incontro non disputato'></span>
                    
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-209340'>
                                <span id='note-13' class="text-muted fs-9 semi-bold live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='Voto Non Disponibile'>-</span>
                            </td>
                                                            


            </td>
        </tr>
            
        
            
        
            
        
            
        
            
        
            
        
                    <tr class="live-score-board-handler" id="row_for_player-15061" data-player-id="15061">
            <td class="text-center p-0">

            </td>
            <td class="player-avatar ">
                <span class="avatar-container position-relative d-inline-block font-weight-bold pr-1">
                <img src="https://static.magicleghe.fco.live/assets/img/4072.png" alt="PANDEV" class="img-fluid d-none d-md-block rounded-circle outset-shadow">
                                    <span class='role role-a'>A</span>
                                </span>
            </td>
            <td class="text-uppercase player-name fs-12 fs-lg-14">
                <span class="voti-last-name float-left fs-11 fs-md-13">PANDEV </span>
                <span class="clearfix d-md-none"></span>
                <span class="icons float-left float-md-right fs-14 fs-md-18 ml-auto">
                                            <span class="icon player-stat muted tip " data-toggle="tooltip" data-placement="top" title="Minuti Giocati: 22" data-original-title='Subentrato al minuto 22'><span class="fantaicon-t-shirt-in tip" >
                      <span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span>
                      </span> </span>
                    
                                            <span class="text-muted fs-12">(22')</span>
                    
                    
            </span>
            </td>

            <td class="text-right fs-12 fs-sm-13 px-0">
            
                
                    
                
                    
                
                    
                
                    
                
                    
                
            

                                                                                        <td class="text-center vote-col-no fs-13 fs-lg-14 live-score-board-vote-wrapper" id='vote_player_row-15061'>
                                <span id='note-13' class="font-weight-bold text-muted live-score-board-handler-vote" data-animation="false" data-toggle="tooltip" title="" data-placement='bottom' data-original-title='M.V. senza Bonus/Malus'>5.75 </span>
                            </td>
                                                            


            </td>
        </tr>
            
            </tbody>


                                                </table>
                                            </div>
                                        </div>

                                    </div>
                                
                            </div>
                        </div>
                                            </div>
                </div>
                <div class="sidebar col-12 col-xl-4 px-lg-2">
                    <div class="widget giornata-dropdown d-none d-xl-block mb-2 outset-shadow position-relative bg-light px-2 py-1">
                        <a id="dropdownGiornataSide" class="dropdown-toggle d-block text-center font-weight-bold" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            Giornata 5
                        </a>
                        <div class="dropdown-menu w-100 text-center" aria-labelledby="dropdownGiornataSide">
                                                           <a class="dropdown-item" href="/it/serie-a/2021-2022/diretta-live/4-giornata">Giornata 4</a>
                                                        <a class="dropdown-item active disabled" href="#">Giornata 5</a>
                                                    </div>
                    </div>
                    <div class="widget matches-tabs d-none d-xl-block mb-2 outset-shadow">
                        <ul class="nav nav-tabs matches-nav" role="tablist">
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 active" data-toggle="tab" href="#lineup-2902" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Roma</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>1-0</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Udinese</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2904" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Sampdoria</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>0-4</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Napoli</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2906" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Torino</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>1-1</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Lazio</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2901" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Milan</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-0</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Venezia</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2899" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Cagliari</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>0-2</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Empoli</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2903" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Salernitana</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-2</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Verona</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2905" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Spezia</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-3</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Juventus</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2900" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Fiorentina</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>1-3</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Inter</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2897" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Atalanta</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-1</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Sassuolo</div>
                                        </div>
                                    </a>
                                </li>
                                                            <li class="nav-item w-100">
                                    <a class="nav-link py-1 " data-toggle="tab" href="#lineup-2898" role="tab">
                                        <div class="row clearfix no-gutters">
                                            <div class="col-md-5 home-team text-center">Bologna</div>
                                                                                            <div class="col-md-2 text-center score bg-dark bg-vs text-white "><span class='label border-bottom-primary-800 label-striped label-striped-bottom tip no-padding-top no-padding-bottom' data-toggle='tooltip' data-popup='tooltip' data-placement='bottom' data-original-title='Partita Terminata. Voti Ufficiali'>2-2</span></div>
                                                                                        <div class="col-md-5 away-team text-center">Genoa</div>
                                        </div>
                                    </a>
                                </li>
                                                    </ul>
                    </div>

                </div>
            </div>
        </div>
    </div>
   
        </div>

        <div class="bg-light text-center">
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
	<!-- Insite -->
	<ins class="adsbygoogle"
	     style="display:block"
	     data-ad-client="ca-pub-6350303044980323"
	     data-ad-slot="4987888634"
	     data-ad-format="auto"
	     data-full-width-responsive="true"></ins>
	<script>
	     (adsbygoogle = window.adsbygoogle || []).push({});
	</script>
	</div>



<footer class="mainFooter bg-dark text-white pt-3  pb-5 pb-xl-1  left-lines inset-shadow">
	<div class="container  ">
		<div class="row clearfix">
			<div class="col">
				<ul class="list-inline">
					<li class="list-inline-item"><a href="/">Home</a></li>
					<li class="list-inline-item"><a href="https://www.magicleghe.fco.live/it/pro">Abbonamenti</a></li>
										<li class="list-inline-item"><a href="/it/serie-a/2021-2022/diretta-live/ultima-giornata">Live</a></li>
										<li class="list-inline-item"><a href="https://www.magicleghe.fco.live/it/privacy-policy">Privacy Policy</a></li>
				</ul>
			</div>
			<div class="col text-right">
				<p class="credits">Magic Leghe Campionato by <a href="https://www.fantacalcio-online.com">FCO</a>  </p>
				<p class="copyright text-muted"><small>Copyright © <a href="https://www.atlanticmoon.com" rel="nofollow">Atlanticmoon Italia Srl | PI 11178610017</a><br>
						</small></p>
			</div>
		</div>
	</div>

</footer>


<a id="totop" href="#" class="text-center bg-white outset-shadow rounded-circle" data-toggle="tooltip" data-placement="top" title="Torna Su"><i class="fantaicon-angle-double-up"></i></a>



        <!-- Scripts -->
        <script src="/magic/magic/assets/js/vendor.d4ef1ad1272f219be36f35852b69401b.js"></script>

<script type="text/javascript">
  $(document).ready(function() {





	    $('.dt-responsive').DataTable({
	    autoWidth: false,
	    "iDisplayLength"    : 30,
        buttons: {
            buttons: [
                {
                    extend: 'excelHtml5',
                    className: 'btn btn-default float-right mr-1 ml-1 datatableButton',

                    text: '<i class="fantaicon-xls"></i> XLS',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'copyHtml5',

                    className: 'btn btn-default float-right mr-1 ml-1 datatableButton',
                    text: '<i class="fantaicon-copy position-left"></i> COPIA',
                    exportOptions: {
                        columns: ':visible'
                    }
                }
            ]
        },
            dom: '<"datatable-scroll-wrap"t><"row align-items-end text-align-right mt-1 mb-1"<"datatable-footer col-md-3 offset-md-9"B>>F"<"float-left"><"float-right"p>',
      	"bProcessing": false,
        language: {
            search: '<span>Filtra:</span> _INPUT_',
            lengthMenu: '<span>Mostra:</span> _MENU_',
            paginate: { 'first': 'Primo', 'last': 'Ultimo', 'next': '→', 'previous': '←' },
                "sEmptyTable":     "Nessun dato presente nella tabella",
                "sInfo":           "Vista da _START_ a _END_ di _TOTAL_ elementi",
                "sInfoEmpty":      "Vista da 0 a 0 di 0 elementi",
                "sInfoFiltered":   "(filtrati da _MAX_ elementi totali)",
                "sInfoPostFix":    "",
                "sInfoThousands":  ".",
                "sLengthMenu":     "Visualizza _MENU_ elementi",
                "sLoadingRecords": "Caricamento...",
                "sProcessing":     "Elaborazione...",
                "sSearch":         "Cerca:",
                "sZeroRecords":    "La ricerca non ha portato alcun risultato.",
                "oPaginate": {
                    "sFirst":      "Inizio",
                    "sPrevious":   "Precedente",
                    "sNext":       "Successivo",
                    "sLast":       "Fine"
                },
                "oAria": {
                    "sSortAscending":  ": attiva per ordinare la colonna in ordine crescente",
                    "sSortDescending": ": attiva per ordinare la colonna in ordine decrescente"
                }
        },

      });



	    $('.dt-responsive-players').DataTable({
	    autoWidth: false,
	    responsive: true,
	    columnDefs: [
			{ className: "hidden", type: 'enum', targets: 0, visible: false, searchable: true},
			{ targets:1, orderData: 0}

	    ] ,
	    "iDisplayLength"    : 50,
        buttons: {
            buttons: [
                {
                    extend: 'excelHtml5',
                    className: 'btn btn-default float-right mr-1 ml-1 datatableButton',

                    text: '<i class="fantaicon-xls"></i> XLS',
                    exportOptions: {
                        columns: ':visible'
                    }
                },
                {
                    extend: 'copyHtml5',

                    className: 'btn btn-default float-right mr-1 ml-1 datatableButton',
                    text: '<i class="fantaicon-copy position-left"></i> COPIA',
                    exportOptions: {
                        columns: ':visible'
                    }
                }
            ]
        },
	    dom: '<"datatable-scroll-wrap"t><"row align-items-end text-align-right mt-1 mb-1"<"datatable-footer col-md-3 offset-md-9"B>>F"<"float-left"><"float-right"p>',
      	"bProcessing": false,
        language: {
            search: '<span>Filtra:</span> _INPUT_',
            lengthMenu: '<span>Mostra:</span> _MENU_',
            paginate: { 'first': 'First', 'last': 'Last', 'next': '→', 'previous': '←' },
                "sEmptyTable":     "Nessun dato presente nella tabella",
                "sInfo":           "Vista da _START_ a _END_ di _TOTAL_ elementi",
                "sInfoEmpty":      "Vista da 0 a 0 di 0 elementi",
                "sInfoFiltered":   "(filtrati da _MAX_ elementi totali)",
                "sInfoPostFix":    "",
                "sInfoThousands":  ".",
                "sLengthMenu":     "Visualizza _MENU_ elementi",
                "sLoadingRecords": "Caricamento...",
                "sProcessing":     "Elaborazione...",
                "sSearch":         "Cerca:",
                "sZeroRecords":    "La ricerca non ha portato alcun risultato.",
                "oPaginate": {
                    "sFirst":      "Inizio",
                    "sPrevious":   "Precedente",
                    "sNext":       "Successivo",
                    "sLast":       "Fine"
                },
                "oAria": {
                    "sSortAscending":  ": attiva per ordinare la colonna in ordine crescente",
                    "sSortDescending": ": attiva per ordinare la colonna in ordine decrescente"
                }
        },

      });



  } );
</script>


<!-- Begin Cookie Consent plugin by Silktide - http://silktide.com/cookieconsent -->
<script type="text/javascript">
    window.cookieconsent_options = {"message":"Questo sito utilizza cookie tecnici e di profilazione propri e di terze parti. Se vuoi saperne di più puoi leggere l'informativa estesa. Chiudendo questo banner o navigando nel sito accetti implicitamente le condizioni. ","dismiss":"Accetto","learnMore":"Maggiori Info","link":"https://www.fantacalcio-online.com/it/privacy-policy","theme":"dark-bottom"};
</script>

<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/cookieconsent2/1.0.10/cookieconsent.min.js"></script>
<!-- End Cookie Consent plugin -->

    


        <script>
          (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
          (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
          m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
          })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

          ga('create', 'UA-655459-19', 'auto');
          ga('send', 'pageview');
          ga('require', 'ecommerce');

              </script>
    


<!-- Global site tag (gtag.js) - Google Analytics
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-655459-19"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-655459-19');
</script>-->



<!-- start Gist JS code--><script>    (function(d,h,w){var gist=w.gist=w.gist||[];gist.methods=['trackPageView','identify','track','setAppId'];gist.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);gist.push(e);return gist;}};for(var i=0;i<gist.methods.length;i++){var c=gist.methods[i];gist[c]=gist.factory(c)}s=d.createElement('script'),s.src="https://widget.getgist.com",s.async=!0,e=d.getElementsByTagName(h)[0],e.appendChild(s),s.addEventListener('load',function(e){},!1),gist.setAppId("ur7zrov9"),gist.trackPageView()})(document,'head',window);</script><!-- end Gist JS code-->



	

	

    
    <script src="https://browser.sentry-cdn.com/6.11.0/bundle.min.js" integrity="sha384-c+8PXtRnYfCKsSEvgtDqFeJvhjltkNLIUB1vcWKW4EleABoS4jh87UrE+1nQXg+g" crossorigin="anonymous"></script>
    <script type="text/javascript">
        Logger.setSentryDNS('https://fba5165f63aa4471aded2a2df40e6802@sentry.io/1523790').init();
    </script>



	
        
<script>
    LiveScoreboard.setContainerID('live').init();


    /*var mySetInterval = setInterval(function() {
        var newValue = (Math.random() * 10).toFixed(2);
        console.log("casted: " + newValue);

        updatePlayerVote(newValue, 17745);

        var newValue2 = (Math.random() * 10).toFixed(2);
        updatePlayerVote(6.66, 44413);
    }, 5000);*/

    /** 
     * @param  float vote | Player vote
     * @param  int pk | opta_id from the player
     * @return  bool
     */
    function updatePlayerVote(vote, pk)
    {
        // selecting the dom to update
        var buffer = document.getElementById('vote_player_row-' + pk);
        if(buffer == null) {
            return;
        }
        var voteElement = buffer.querySelector('span');
        var oldVote = voteElement.textContent.trim();
        var colorClass = 'live-vote-same';
        var newClasses = '';
        var blinkClass = '';
        
        //console
        //console.log("oldVote: " + oldVote);

        //checking what is happening
        if(oldVote !== '-') {
            var oldVoteFloat = parseFloat(oldVote);

            if(oldVoteFloat === vote) {
                return true;
            }

            if(oldVoteFloat > vote) {
                colorClass = 'live-vote-lower';
                blinkClass = 'worse-vote'
            } else {
                colorClass = 'live-vote-upper';
                blinkClass = 'better-vote';
            }
        } else {
            voteElement.setAttribute('data-original-title', 'Voto non Disponibile');
        }

        //removing all classes from element
        voteElement.className = '';
        buffer.className = '';

        //defaulting
        newClasses = 'text-muted fs-9 semi-bold live-vote-span';
        buffer.className = 'text-center vote-col-no fs-13 fs-lg-14';

        //specific cases
        if(vote >= 6.25) {
            voteElement.className = 'font-weight-bold text-green live-vote-span';
            voteElement.setAttribute('data-original-title', 'M.V. senza Bonus/Malus');
        } else {
            if(vote >= 5.75) {
                voteElement.className = 'font-weight-bold text-muted live-vote-span';
                voteElement.setAttribute('data-original-title', 'M.V. senza Bonus/Malus');
            } else {
                if(vote >= 0) {
                    voteElement.className = 'font-weight-bold text-warning live-vote-span';
                    voteElement.setAttribute('data-original-title', 'M.V. senza Bonus/Malus');
                }
            }
        }

        //console
        //console.log("blinkClass: " + blinkClass);
        //console.log("colorClass: " + colorClass);

        //SETTING NEW CLASSES
        setTimeout(function() {
            voteElement.className = voteElement.className + ' ' + colorClass;
            buffer.className = buffer.className + ' ' + blinkClass;
        }, 100);

        //setting new vote
        voteElement.textContent = vote;

        return true;
    }
    </script>

    </body> 
</html>
  recorded_at: Fri, 24 Sep 2021 18:59:17 GMT
recorded_with: VCR 6.0.0
