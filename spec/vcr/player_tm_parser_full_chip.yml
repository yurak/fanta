---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/profil/spieler/986180
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 16:39:46 GMT
      X-Host:
      - web08
      X-User:
      - '0'
      Set-Cookie:
      - TMSESSID=a114e6ff00c87690e8e44fbc11d4ef12; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Sun, 31 Dec 2023 19:39:46 GMT
      Pragma:
      - ''
      Cache-Control:
      - public, max-age=600, must-revalidate
      Last-Modified:
      - Mon, 18 Sep 2023 22:00:00 GMT
      Location:
      - https://www.transfermarkt.com/noah-raveyre/profil/spieler/986180
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 d24f708ab52a3355ee0608b56f5760ac.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - WNdXBIFxefrnFsiCPXDTGNMgaA-Rzq5K3arS74ITwnpCFys_LwH1mw==
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sun, 31 Dec 2023 16:39:46 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/noah-raveyre/profil/spieler/986180
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Cookie:
      - TMSESSID=a114e6ff00c87690e8e44fbc11d4ef12
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 16:39:47 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web09
      X-User:
      - '0'
      Set-Cookie:
      - TMSESSID=a114e6ff00c87690e8e44fbc11d4ef12; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Sun, 31 Dec 2023 19:39:47 GMT
      Pragma:
      - ''
      Cache-Control:
      - public, max-age=600, must-revalidate
      Last-Modified:
      - Mon, 18 Sep 2023 22:00:00 GMT
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 56e0f71ccac5e1ab9044883545c2d314.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - ZwFQXf_meqSJG7b0TeQrwIyrR2tF6kHdPOAcNKgbKiLBbRkA52hQ9g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 31 Dec 2023 16:39:47 GMT
recorded_with: VCR 6.2.0
