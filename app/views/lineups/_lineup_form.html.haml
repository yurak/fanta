.new-lineup-page
  .new-lineup-header
    .new-lineup-back
      .new-lineup-close
        = link_to tour_path(tour) do
          &times;
      .new-lineup-header-text
        .new-lineup-header-title= t('lineups.setup_lineup')
        .new-lineup-header-subtitle= t('lineups.select')
    .new-lineup-confirm
      = submit_tag t('lineups.confirm_squad'), form: 'new_lineup', class: 'submit', id: 'submit-lineup-btn'
  .new-lineup-block
    .module-section
      #modules-modal-btn
        .module-name
          = team_module&.name || lineup.team_module.name
          = image_tag('icons/dropdown.svg')
        #modules-modal.modal
          .modal-content
            %span.close
            .modal-title
              = t('lineups.change_module')
            .modal-modules-block
              - @modules.each do |team_module|
                = link_to module_link(lineup, team_module) do
                  .team-module-block
                    = team_module.name
                    = image_tag("#{modules_path}#{team_module.name}.jpg")
      .module-image
        = image_tag("#{modules_path}#{team_module&.name || lineup.team_module.name}.jpg")
      .lineup-round-data
        .lineup-tabs.default-tabs
          #fixtures.default-tab-item.default-tab-active
            .default-= "#{t('tours.round')} #{tour.tournament_round.number}"
          -##standings.default-tab-item
          -#  .default-= "#{tour.league.tournament.name} #{t('tours.standings')}"
        .fixtures.lineup-round-tab-content.round-matches
          - if tour.national?
            = render 'tournaments/national_matches_lineup', matches: tour.tournament_round.national_matches
          - else
            = render 'tournaments/tournament_matches', matches: tour.tournament_round.tournament_matches
        -#.standings.lineup-round-tab-content
          -# - if tour.league.tournament.sofa_number.present?
          -#   %iframe{ id: "sofa-standings-embed-#{tour.league.tournament.sofa_number}", src: "https://widgets.sofascore.com/embed/tournament/#{tour.league.tournament.sofa_number.split('-')[0]}/season/#{tour.league.tournament.sofa_number.split('-')[1]}/standings", style: "height:794px!important;width:100%!important;border:none;", frameborder: "0", scrolling: "no", sandbox: "allow-pointer-lock allow-scripts" }

    .players-section
      .main-players-title
        = t('lineups.main_squad')
      - if tour.fanta?
        .main-conditions
          .main-conditions-title
            = t('lineups.conditions')
          .squad-rules
            %ul
              %li= t('lineups.min_limit', limit: tour.min_country_players)
              %li= t('lineups.max_limit', limit: tour.max_country_players)

      .main-players
        #position-naming{ type: "hidden", value: "#{current_user.ital_pos_naming}"}
        = form_with model: [team, lineup], id: 'new_lineup', local: true do |f|
          = f.hidden_field :team_module_id, value: team_module&.id || lineup.team_module.id
          = f.hidden_field :tour_id, value: tour.id
          #position-naming{ type: "hidden", value: "#{current_user.ital_pos_naming}"}
          #national-tour{ type: "hidden", value: "#{tour.national?}"}
          = f.fields_for :match_players do |mp|
            - if mp.index == 11
              .reserve-players-title
                = t('lineups.reserve_squad')
            .lineup-slot
              = mp.hidden_field(:real_position, value: team_module.slots[mp.index]&.position, id: "real-position-#{mp.index}") if team_module.slots[mp.index]&.position
              = mp.hidden_field(:round_player_id, value: player_by_mp(mp, team_module)&.id, class: 'round-player-input', id: "round-player-#{mp.index}")
              .input-group
                .player-data{id: "modal-player-data#{mp.index}"}
                  .team-player-data{id: "team-player-data#{mp.index}"}
                    .team-player-avatar
                      .player-show-face
                        %object{data: player_by_mp(mp, team_module)&.avatar_path || '', type: ApplicationRecord::CONTENT_TYPE_PNG, id: "avatar-#{mp.index}"}
                          = image_tag('avatar.png')
                      .player-show-kit
                        - if tour.national?
                          %object{data: player_by_mp(mp, team_module)&.national_kit_path || '', type: ApplicationRecord::CONTENT_TYPE_PNG, id: "kit-#{mp.index}"}
                            = image_tag('kit_small_default.png')
                        - else
                          %object{data: player_by_mp(mp, team_module)&.kit_path || '', type: ApplicationRecord::CONTENT_TYPE_PNG, id: "kit-#{mp.index}"}
                            = image_tag('kit_small_default.png')
                      .squad-position
                        .module-position.slot-position{class: "slot-position-#{team_module.slots[mp.index]&.position&.tr('/', '')}"}
                          - if team_module.slots[mp.index]&.position
                            = slot_position_name(team_module.slots[mp.index]&.position)
                          - elsif mp.index == 11 && tour.mantra?
                            = slot_position_name('Por')
                          - else
                            = 'Res'
                    .team-player-name-pos
                      .team-player-name
                        .team-player-last-name{ id: "name-#{mp.index}" }
                          = player_by_mp(mp, team_module)&.name || t('lineups.not_selected')
                        .team-player-first-name{ id: "first-name-#{mp.index}" }
                          = player_by_mp(mp, team_module)&.first_name || ''
                        - if tour.eurocup?
                          .team-player-club{ id: "club-#{mp.index}", style: "display: none;" }= player_by_mp(mp, team_module)&.club&.code
                        - if tour.national?
                          .team-player-country{ id: "country-#{mp.index}", style: "display: none;" }= player_by_mp(mp, team_module)&.national_team&.name
                      .team-player-positions{ id: "positions-#{mp.index}" }<
                        - if player_by_mp(mp, team_module)
                          - if player_by_mp(mp, team_module).position_names[0]
                            .team-player-position.slot-position{class: "slot-position-#{player_by_mp(mp, team_module).position_names[0]}"}<
                              = slot_position_name(player_by_mp(mp, team_module).position_names[0])
                          - if player_by_mp(mp, team_module).position_names[1]
                            .team-player-position.slot-position{class: "slot-position-#{player_by_mp(mp, team_module).position_names[1]}"}<
                              = slot_position_name(player_by_mp(mp, team_module).position_names[1])
                          - if player_by_mp(mp, team_module).position_names[2]
                            .team-player-position.slot-position{class: "slot-position-#{player_by_mp(mp, team_module).position_names[2]}"}<
                              = slot_position_name(player_by_mp(mp, team_module).position_names[2])
                    .team-player-dropdown
                      = image_tag('icons/dropdown.svg')
                  .modal-players-list{id: "modal-players-list#{mp.index}"}
                    .players-modal-content
                      %span.close
                      .modal-players-title
                        .modal-players-title-text Select player
                        .modal-players-title-position{class: "modal-position-#{team_module.slots[mp.index]&.position}", id: "modal-position#{mp.index}"}
                          .slot-position{class: "slot-position-#{team_module.slots[mp.index]&.position&.tr('/', '')}"}
                            - if team_module.slots[mp.index]&.position
                              = slot_position_name(team_module.slots[mp.index]&.position)
                            - elsif mp.index == 11 && tour.mantra?
                              = slot_position_name('Por')
                            - else
                              = 'Res'
                      .modal-modules-block{id: "modal-modules-block#{mp.index}"}
                        - if tour.mantra?
                          - if team_module.slots[mp.index]&.position
                            - available_hash = available_by_slot(team, team_module.slots[mp.index])
                            .modal-malus-block
                              - available_hash['']&.each do |player|
                                = render 'lineup_player_item', player: player, tour: tour
                            - if available_hash['1.5']
                              .modal-malus-title 🎭 MALUS -1.5
                              .modal-malus-block
                                - available_hash['1.5'].each do |player|
                                  = render 'lineup_player_item', player: player, tour: tour
                            - if available_hash['3.0']
                              .modal-malus-title 🎭 MALUS -3
                              .modal-malus-block
                                - available_hash['3.0'].each do |player|
                                  = render 'lineup_player_item', player: player, tour: tour
                          - elsif mp.index == 11
                            .modal-malus-block
                              - available_by_slot(team, team_module.slots.first)['']&.each do |player|
                                = render 'lineup_player_item', player: player, tour: tour
                          - else
                            .modal-malus-block
                              - available_for_select(team).each do |player|
                                = render 'lineup_player_item', player: player, tour: tour
                        - if tour.national?
                          - tournament_round_players(tour.tournament_round, team_module.slots[mp.index]&.position).each do |national_team, players|
                            .modal-malus-title
                              = national_team.name.upcase
                            .modal-malus-block
                              - players.each do |player|
                                .modal-player-item{id: "player#{player.id}"}
                                  .modal-player-images{style: "background-color: ##{ player.national_team.color };"}
                                    .player-show-face
                                      %object{data: player.avatar_path, type: ApplicationRecord::CONTENT_TYPE_PNG}
                                        = image_tag('avatar.png')
                                    .player-show-kit
                                      %object{data: player.national_kit_path, type: ApplicationRecord::CONTENT_TYPE_PNG}
                                        = image_tag('kit_small_default.png')
                                  .modal-player-data
                                    .player-positions
                                      - player.player_positions.includes(:position).each do |player_position|
                                        .position-item{class: "position-item-#{player_position.position.name}"}
                                          = position_name(player_position.position)
                                  .modal-player-name
                                    = player.name
                                  .modal-player-match
                                    .player-match-team
                                      = flag_icon(player.national_team.code.to_sym, element: :div)
                                    .player-match-team
                                      vs
                                    .player-match-team
                                      = flag_icon(player.national_team.opponent_by_round(tour.tournament_round)&.code.to_sym, element: :div)

:javascript
  $(document).ready(function() {
    $(document).on('click' ,'.modal-player-item' ,function(e) {
      e.stopPropagation();
      const modalList = $(this).parent().parent().parent().parent();

      const blockId = modalList.attr('id').replace('modal-players-list','');
      const playerId = $(this).attr('id').replace('player','');
      const playerRow = $('#modal-player-data'+blockId);
      const avatarContainer = $('#avatar-'+blockId);
      const kitContainer = $('#kit-'+blockId);
      const nameContainer = $('#name-'+blockId);
      const firstNameContainer = $('#first-name-'+blockId);
      const roundPlayerContainer = $('#round-player-'+blockId);
      const countryContainer = $('#country-'+blockId);
      const clubContainer = $('#club-'+blockId);
      const positionsContainer = $('#positions-'+blockId);
      const playerBidContainer = $('#player-bid-'+blockId);
      const italPosNaming = ($('#position-naming')[0].getAttribute('value') === 'true');

      let nationalTour = false;
      if ($('#national-tour').length > 0) { nationalTour = ($('#national-tour')[0].getAttribute('value') === 'true'); }

      let slotPosition = [];
      if ($('#real-position-'+blockId).length > 0) { slotPosition = $('#real-position-'+blockId).attr("value").split("/"); }

      $.ajax({
        type: "GET",
        dataType: "json",
        url: "/players/"+playerId,
        success: function(data){
          avatarContainer.attr("data", data.avatar_path);
          clubContainer.text(data.club_code);
          countryContainer.text(data.national_team_name);
          roundPlayerContainer.attr("value", playerId);
          playerBidContainer.attr("value", playerId);

          if (nationalTour) {
            kitContainer.attr("data", data.national_kit_path);
          } else {
            kitContainer.attr("data", data.kit_path);
          }

          if (data.first_name != null) {
            firstNameContainer.text(data.first_name);
          } else {
            firstNameContainer.text("");
          }

          positionsContainer.children(".team-player-position").remove();
          data.position_arr.forEach((positionName, index) => {
            let posName = data.position_classic_arr[index];
            if (italPosNaming) { posName = positionName; }

            $('<div/>',{
              text: posName,
              class: "team-player-position slot-position slot-position-" + positionName
            }).appendTo(positionsContainer);
            positionsContainer.append(' ');
          })

          let malus = "";
          if (slotPosition.length > 0) {
            const intersection = slotPosition.filter(element => data.position_arr.includes(element));
            if (intersection.length === 0) {
              playerRow.css("border-bottom","1px solid #DB0A23");
              malus = "⚠️ ";
            }
          }

          nameContainer.text(malus + data.name);

          if (nationalTour) {
            const club_players_limit = "#{tour.max_country_players}";
            $('.round-tournament-team-players').text('')
            $('.round-tournament-team-players').css("background-color", "");

            $('.team-player-country').each(function() {
              let tagId = '#national-players-' + this.textContent;
              let element = $(tagId);
              element.text(element.text() + "👨");
              if (element.text().length > (club_players_limit * 2) ) {
                element.css("background-color", "#DB0A23");
              }
            });

          }
        }
      });

      $(modalList).hide();
    });

    $("#submit-lineup-btn").click(function(){
      const player_ids = [];
      $('.round-player-input').each(function() { player_ids.push($(this).val()); });

      if (String("#{tour.national?}").toLowerCase() == "true") {
        const player_countries = [];
        $('.team-player-country').each(function() { player_countries.push(this.textContent); });
        const unique_countries = player_countries.filter((v, i, a) => a.indexOf(v) === i).filter(Boolean);

        if (unique_countries.length < "#{tour.national_teams_count}") {
          alert("#{t('lineups.min_limit', limit: tour.min_country_players)}");
          return false;
        }

        const counts = {};
        player_countries.filter(Boolean).forEach(function(x) { counts[x] = (counts[x] || 0)+1; });
        const countries_values = Object.keys(counts).map(function(v) { return counts[v]; });
        const max_country_players = Math.max.apply(Math, countries_values);
        const min_country_players = Math.min.apply(Math, countries_values);
        const country_players_max_limit = "#{tour.max_country_players}"
        const country_players_min_limit = "#{tour.min_country_players}"

        if (max_country_players > country_players_max_limit) {
          alert("#{t('lineups.max_limit', limit: tour.max_country_players)}");
          return false;
        }

        if (min_country_players < country_players_min_limit) {
          alert("#{t('lineups.min_limit', limit: tour.min_country_players)}");
          return false;
        }
      } else {
        // const player_ids = [];
        // $('.round-player-input').each(function() { player_ids.push($(this).val()); });
        const filtered = player_ids.filter(Boolean);

        if (filtered.length < "#{lineup.players_count}") {
            alert("#{t('lineups.total', number: lineup.players_count)}");
            return false;
        }

        if (String("#{tour.eurocup?}").toLowerCase() == "true") {
          const counts = {};
          const clubs = [];
          $('.team-player-club').each(function() { clubs.push(this.textContent); });
          clubs.filter(Boolean).forEach(function(x) { counts[x] = (counts[x] || 0)+1; });

          const unique_clubs = clubs.filter((v, i, a) => a.indexOf(v) === i).filter(Boolean);
          const tour_clubs = "#{tour.tournament_round.tournament_matches.count * 2}";

          if (tour_clubs < 12 && unique_clubs.length < tour_clubs) {
            alert("#{t('lineups.min_limit', limit: tour.min_country_players)}");
            return false;
          }

          const clubs_values = Object.keys(counts).map(function(v) { return counts[v]; });
          const max_club_players = Math.max.apply(Math, clubs_values);
          const club_players_limit = "#{tour.max_country_players}";

          if (max_club_players > club_players_limit) {
            alert("#{t('lineups.max_limit', limit: tour.max_country_players)}");
            return false;
          }
        }
      }

      const duplicate_ids = player_ids.reduce(function(acc, el, i, arr) {
          if (arr.indexOf(el) !== i && acc.indexOf(el) < 0) acc.push(el); return acc;
      }, []);

      if (duplicate_ids.length > 0) {
          alert("#{t('lineups.duplicates')}");
          return false;
      }
    });

    const modal = document.getElementById("modules-modal");
    const modal_btn = document.getElementById("modules-modal-btn");
    const span = document.getElementsByClassName("close")[0];

    if (modal_btn) {
      modal_btn.onclick = function() { modal.style.display = "block"; };
    }
    span.onclick = function() { modal.style.display = "none"; };

    $('.team-player-data').click(function() {
      const slotId = $(this).attr('id').replace('team-player-data','');
      const playersList = $('#modal-players-list' + slotId);

      playersList.css("display", "block");

      if ("#{tour.eurocup?}" === 'true') {
        const slotPositionName = $('#modal-position' + slotId).attr('class').replace('modal-players-title-position modal-position-','');
        const avatarImgSrc = $('#avatar-'+slotId).children()[0].src;
        const italPosNaming = ($('#position-naming')[0].getAttribute('value') === 'true');

        $.ajax({
          type: "GET",
          dataType: 'json',
          url: "/slots",
          data: { tour_id: "#{tour.id}", position: slotPositionName },
          success: function(data){
            const modalBlock = $('#modal-modules-block' + slotId);
            modalBlock.empty();
            const playersHash = data.eurocup_players;
            let listHtml = '';

            for (var key in playersHash){
              listHtml += '<div class="modal-malus-title">' + key + '</div> <div class="modal-malus-block">';
              playersHash[key].forEach(function(player) {
                // console.log(player)

                let positionsItems = '';
                player.position_arr.forEach((positionName, index) => {
                  let posName = player.position_classic_arr[index];
                  if (italPosNaming) { posName = positionName; }

                  positionsItems += '<div class="position-item position-item-' + positionName + '">' + posName + '</div> ';
                })

                let firstName = ' ';
                if (player.first_name != null) {
                  firstName = player.first_name;
                }

                listHtml +=
                  '<div class="modal-player-item" id="' + player.id + '">' +
                    '<div class="modal-player-images" style="background-color: #' + player.club_color + '">' +
                      '<div class="player-show-face">' +
                        '<object data=' + player.avatar_path + ' type="image/png">' +
                          '<img src=' + avatarImgSrc + '>' +
                        '</object>' +
                      '</div>' +
                      '<div class="player-show-kit">' +
                        '<object data=' + player.kit_path + ' type="image/png">' +
                        '</object>' +
                      '</div>' +
                    '</div>' +
                    '<div class="modal-player-data">' +
                      '<div class="player-positions">' +
                        positionsItems +
                      '</div>' +
                    '</div>' +
                    '<div class="modal-player-name">' +
                      player.name +
                    '</div>' +
                    '<div class="modal-player-first-name">' +
                      firstName +
                    '</div>' +
                  '</div>';
              });
              listHtml += '</div>';
            }
            modalBlock.append(listHtml);
          }
        });
      } else {
        const playerIds = [];
        $('.round-player-input').each(function() { playerIds.push($(this).val()); });
        const pickedPlayers = playerIds.filter(Boolean);

        playersList.find(".modal-player-item").each(function(innerIndex, innerElement) {
          if (pickedPlayers.includes(innerElement.id.replace("player", ""))) {
            innerElement.style.backgroundColor = "rgb(230, 230, 230)";
          }
        });
      }
    });

    window.onclick = function(event) {
      if (event.target == modal) { modal.style.display = "none"; }

      if (event.target.className == "modal-players-list") {
        $('#' + event.target.id).css("display", "none");
      }
    }

    $(".lineup-round-tab-content").hide();

    $(".default-tab-item").first().addClass("default-tab-active");
    $(".lineup-round-tab-content").first().show();

    $(".default-tab-item").click(function(){
      var listId = this.id;

      $(".default-tab-item").removeClass("default-tab-active");
      $(".lineup-round-tab-content").hide();

      $("#" + listId).addClass("default-tab-active");
      $("." + listId).show();
    });
  });
