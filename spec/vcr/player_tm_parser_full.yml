---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/profil/spieler/576024
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 15:28:18 GMT
      X-Host:
      - web01
      X-User:
      - '0'
      Set-Cookie:
      - TMSESSID=6ea2c7cbc0501d19685f771d6b97e186; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Sun, 31 Dec 2023 18:28:18 GMT
      Pragma:
      - ''
      Cache-Control:
      - public, max-age=600, must-revalidate
      Last-Modified:
      - Tue, 19 Dec 2023 18:10:00 GMT
      Location:
      - https://www.transfermarkt.com/julian-alvarez/profil/spieler/576024
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 01508c56da60b38ed14eba678e55a38c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - UpitQIzgvlk2LHIk60EUzzsLNqQlzbMznV1G8hjlom_yvfiQ9pOATw==
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sun, 31 Dec 2023 15:28:17 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/julian-alvarez/profil/spieler/576024
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Cookie:
      - TMSESSID=6ea2c7cbc0501d19685f771d6b97e186
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 15:28:18 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web03
      X-User:
      - '0'
      Set-Cookie:
      - TMSESSID=6ea2c7cbc0501d19685f771d6b97e186; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Sun, 31 Dec 2023 18:28:18 GMT
      Pragma:
      - ''
      Cache-Control:
      - public, max-age=600, must-revalidate
      Last-Modified:
      - Tue, 19 Dec 2023 18:10:00 GMT
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 8df14479d114ba491250765ab0716880.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - 1bzNaL95WjC47Ff_n5hn-sHnQ2d4yTWnqmqNhQqD4ihi4eODgRF0sA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 31 Dec 2023 15:28:18 GMT
recorded_with: VCR 6.2.0
