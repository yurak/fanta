---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/576024/plus/0?saison=2023
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 14:44:12 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web09
      Set-Cookie:
      - TMSESSID=5e1dff7add150bf5ec088ad9dcfb2ac5; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f4021b1aef9bacd347e69fce08bd4964.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - OaT2TFGUrrclPXe9GXQtjAPUNk2UWHVa9ULXnQgMsBUHwIkwAtAF5Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">

<head>
    
<script type="text/javascript" data-description="sourcepoint stub code">
    !function () { var e = function () { var e, t = "__tcfapiLocator", a = [], n = window; for (; n;) { try { if (n.frames[t]) { e = n; break } } catch (e) { } if (n === window.top) break; n = n.parent } e || (!function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var i = a.createElement("iframe"); i.style.cssText = "display:none", i.name = t, a.body.appendChild(i) } else setTimeout(e, 5); return !r }(), n.__tcfapi = function () { for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++)n[r] = arguments[r]; if (!n.length) return a; if ("setGdprApplies" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && "boolean" == typeof n[3] && (e = n[3], "function" == typeof n[2] && n[2]("set", !0)); else if ("ping" === n[0]) { var i = { gdprApplies: e, cmpLoaded: !1, cmpStatus: "stub" }; "function" == typeof n[2] && n[2](i) } else a.push(n) }, n.addEventListener("message", (function (e) { var t = "string" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data } catch (e) { } var n = a.__tcfapiCall; n && window.__tcfapi(n.command, n.version, (function (a, r) { var i = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId } }; t && (i = JSON.stringify(i)), e.source.postMessage(i, "*") }), n.parameter) }), !1)) }; "undefined" != typeof module ? module.exports = e : e() }();
</script>
<script data-description="sourcepoint configuration">
window._sp_ = {
    config: {"accountId":1254,"propertyId":7427,"gdpr":{"consentLanguage":"en","targetingParams":{"acps":"false"}},"baseEndpoint":"https://cdn.privacy-mgmt.com","isSPA":true,"cpPropertyId":"7a84b340"}}
</script>
<script src="https://cdn.privacy-mgmt.com/wrapperMessagingWithoutDetection.js" async></script>

<script type="text/javascript" data-description="contentpass integration">
    (function() {
        var cpBaseUrl = 'https://cp.transfermarkt.com';
        var cpController = cpBaseUrl + '/now.js';
        var cpPropertyId = '7a84b340';

        !function(C,o,n,t,P,a,s){C['CPObject']=n;C[n]||(C[n]=function(){
        (C[n].q=C[n].q||[]).push(arguments)});C[n].l=+new Date;a=o.createElement(t);
        s=o.getElementsByTagName(t)[0];a.src=P;s.parentNode.insertBefore(a,s)}
        (window,document,'cp','script',cpController);

        !function(C,o,n,t,P){if(!C[n].patched){cp('extension','authenticate');P=C[n].q.push;
        C[n].q.push=function(a){if(a[0]==='authenticate'){if((o['cookie']||'').indexOf('_cpauthhint=')===-1&&
        !(C['localStorage']||{})['_cpuser']&&C.location.href.toLowerCase().indexOf('cpauthenticated')===-1){
        t={isLoggedIn:function(){return false;},hasValidSubscription:function(){return false;}};
        (typeof a[1]==='function'&&a[1](null,t));C[n].afp=true;P.apply(C[n].q,[['authenticate',null]]);
        return t;}}P.apply(C[n].q,[a]);}}}
        (window,document,'cp',false);

        cp('create', cpPropertyId, {
        baseUrl: cpBaseUrl
        });

        cp('render', {
        onFullConsent: function() {
            console.log('[DEMO] onFullConsent');
        }
        })
    })()
</script>

<script type="text/javascript" data-description="contentpass sourcepoint fast path">
(function () {
    cp('authenticate', function(err, user) {
        if (err || (!user.isLoggedIn() && !user.hasValidSubscription())) {
        console.log('[SPCP] Taking fast path');
        (function spExecMsg() {
            if (window._sp_ && window._sp_.executeMessaging) {
            if (!window._sp_.config.isSPA) {
                console.warn('[SPCP] Sourcepoint not in SPA mode!');
            } else if (window._sp_.version) {
                console.log('[SPCP] Sourcepoint already running');
            } else {
                console.log('[SPCP] Starting Sourcepoint');
                window._sp_.executeMessaging();
            }
            } else {
            console.log('[SPCP] Sourcepoint not loaded yet. Retrying.');
            setTimeout(spExecMsg, 10);
            }
        })();
        }
    });
    })();
</script>
    <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" sizes="16x16" href="/favicon-16x16.png">
    <link rel="shortcut icon" sizes="192x192" href="/android-chrome-192x192.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=no" />
<meta name="robots" content="noindex, nofollow" />
<meta name="keywords" content="Julián Álvarez,Manchester City,Premier League,Argentina" />
<meta name="description" content="Player stats of Julián Álvarez (Manchester City) ➤ Goals ➤ Assists ➤ Matches played ➤ All performance data" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://img.a.transfermarkt.technology/portrait/big/576024-1684920938.jpg?lm=1" />
<meta property="og:description" content="" />
<meta property="og:title" content="Julián Álvarez - Stats 23/24" />
<meta property="og:url" content="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/576024/plus/0?saison=2023" />
<link hreflang="de" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="de-LU" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="de-AT" rel="alternate" href="https://www.transfermarkt.at/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="de-CH" rel="alternate" href="https://www.transfermarkt.ch/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="tr" rel="alternate" href="https://www.transfermarkt.com.tr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="it-CH" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="it" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="pl" rel="alternate" href="https://www.transfermarkt.pl/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="en-GB" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="en-IE" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-ES" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-CL" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-VE" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-EC" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-CU" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="nl" rel="alternate" href="https://www.transfermarkt.nl/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="pt" rel="alternate" href="https://www.transfermarkt.pt/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="ru" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="world" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="fr-CH" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="fr" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="fr-CA" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="fr-CI" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="fr-LU" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="fr-BE" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="pt-BR" rel="alternate" href="https://www.transfermarkt.com.br/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="en-US" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="en-CA" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="en-IN" rel="alternate" href="https://www.transfermarkt.co.in/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="en-ZA" rel="alternate" href="https://www.transfermarkt.co.za/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="x-default" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="en" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="nl-BE" rel="alternate" href="https://www.transfermarkt.be/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="ro" rel="alternate" href="https://www.transfermarkt.ro/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="el-GR" rel="alternate" href="https://www.transfermarkt.gr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="ko-KR" rel="alternate" href="https://www.transfermarkt.co.kr/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-AR" rel="alternate" href="https://www.transfermarkt.com.ar/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-MX" rel="alternate" href="https://www.transfermarkt.mx/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-CO" rel="alternate" href="https://www.transfermarkt.co/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="es-PE" rel="alternate" href="https://www.transfermarkt.pe/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="ms" rel="alternate" href="https://www.transfermarkt.my/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="ja" rel="alternate" href="https://www.transfermarkt.jp/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link hreflang="id" rel="alternate" href="https://www.transfermarkt.co.id/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/menue.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-main.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main_desktop.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/print.css?_sn=1?lm=1703164027" media="print" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/chosen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-player-profile.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/gespieltePositionen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/statistiken.css?lm=1703164027" />
<script type="text/javascript" src="https://tmssl.akamaized.net/js/vendor/jquery.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/b7c5571cf8957553f95f6d9069eaed67/jquery.ba-bbq.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.ajaxaddition.jquery.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/functions.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main_desktop.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.jquery.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
console.info("%c [TM-ADs] Initialize Ads on domain com (wettbewerbe_profile_spieler | spieler/leistungsdaten)", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle1 (div-gpt-ad-1621526463511-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle2 (div-gpt-ad-1621528018930-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraper (div-gpt-ad-1621527521939-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraperbtf (div-gpt-ad-1621528123398-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render billboard (div-gpt-ad-1621524903956-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render fullsize_contentad (div-gpt-ad-1621528173524-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] No ad configuration found for richmedia", "background: #222; color: #bada55")
    var oddsServe = function(placement,competition,match,node) {
        if (!node){
            var s=document.readyState==='loading'?document.getElementsByTagName('script'):[];
            node=s.length?s[s.length-1].parentNode:null;
        }
        oddsServe.queue.push({contentUnitId:placement,competition:competition,match:match,node:node});
    }
    
    oddsServe.onInit=function(callbacks){
        if (typeof window.__tcfapi === 'function') {
            __tcfapi('addEventListener', 2, function(tcdata, success) {
                let tcf20compatibleString;
                if(success) {
                    if (tcdata.eventStatus === 'useractioncomplete') {
                        tcf20compatibleString = tcdata.tcString;
                    } else if (tcdata.eventStatus === 'tcloaded') {
                        tcf20compatibleString = tcdata.tcString;
                    }
                    callbacks.setGdprOptions({
                        gdpr:1,
                        gdpr_pd:1,
                        gdpr_consent:tcf20compatibleString,
                    });
                }
            });
        } else {
            console.warn('E2: __tcfapi not found');
        }
    };
    oddsServe.options={gdpr_wait:true};
    oddsServe.queue=[];
console.info("%c [TM-ADs] Add initScript for slots: rectangle1 | rectangle2 | skyscraper | skyscraperbtf | billboard | fullsize_contentad", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Register slots with JS vendor lib", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render ad slots js for google", "background: #222; color: #bada55")
PWT = {};
window.googletag = window.googletag || {cmd: []};
googletag.cmd.push(() => {
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-1",
    [[960,90],[970,250],[950,90],[728,90],[970,90]],
    "div-gpt-ad-1621524903956-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-1",
    [[300,250],[336,280]],
    "div-gpt-ad-1621526463511-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-2",
    [[300,250],[336,280]],
    "div-gpt-ad-1621528018930-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-1",
    [[160,600],[336,280],[300,250],[300,600],[120, 600]],
    "div-gpt-ad-1621527521939-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-2",
    [[300,250],[336,280],[160,600],[300,600],[120, 600]],
    "div-gpt-ad-1621528123398-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-2",
    [[950,90],[970,250],[728,90],[970,90],[960,90],[300, 250]],
    "div-gpt-ad-1621528173524-0"
  ) 
.addService(googletag.pubads());
  googletag.pubads().enableLazyLoad({
    fetchMarginPercent: 500,
    renderMarginPercent: 200,
    mobileScaling: 2.0
  });
  googletag.pubads().setCentering(true);
  googletag.pubads().disableInitialLoad();
  googletag.pubads().enableSingleRequest();
  googletag.pubads().setTargeting("cg1", ["spieler"]);
  googletag.pubads().setTargeting("URL", "www.transfermarkt.com");
  googletag.enableServices();
});

console.info("%c [TM-ADs] Added external ad script(s) for vendor google", "background: #222; color: #bada55")
/*]]>*/
</script>
<title>Julián Álvarez - Stats 23/24 | Transfermarkt</title>
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-152x152.png">
            <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/manager/base/es6/bundle.js" as="script" id="IOMmBundle">
        <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js" as="script">
        <script type="text/javascript" src="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js"></script>
    
<script type="text/javascript">
   tmData = {
       loggedIn : "0",
       tmTraffic: "0",
   };
</script>
<script>// Set to the same value as the web property used on the site
		var gaProperty = 'UA-3816204-13';

		// Disable tracking if the opt-out cookie exists.
		var disableStr = 'ga-disable-' + gaProperty;
		if (document.cookie.indexOf(disableStr + '=true') > -1) {
			window[disableStr] = true;
		}

		// Opt-out function
		function gaOptout() {
			document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
			window[disableStr] = true;
		}</script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag() { dataLayer.push(arguments); } 
   gtag('set', 'linker', { 'domains': [/^transfermarkt\.(com|de|nl|it|at|ch|es|fr|com\.tr|pt|tv|pl|co\.uk)$/]});
   gtag('js', new Date()); 
   gtag('set',
  {
    'custom_map': {
                    'dimension1': 'loggedIn',
                    'dimension2': 'tmTraffic'
                }
  });
        gtag('config', 'UA-3816204-13', {
                'anonymize_ip': true,
                'transport_type': 'beacon',
                'content_group1': 'statistik',
                'content_group2': 'spieler',
                'content_group3': 'leistungsdaten',
                'content_group4': '576024',
                'loggedIn': tmData.loggedIn,
                'tmTraffic': tmData.tmTraffic
            }); 
   function tmEvent(category, action, label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event',
                    action,
                    {
                        'event_category': category,
                        'event_label': label
                    }
                );
            }

            function tmTiming(value, name, event_category, event_label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event', 'timing_complete', {
                    name,
                    value,
                    event_category,
                    event_label
                });
            }
            
	</script>    <script type="text/javascript" src="https://tmssl.akamaized.net//ads/ads.js"></script>
    <script type="text/javascript">
        window.tmGaId = "UA-3816204-13";
    </script>

            <link rel="canonical" href="https://www.transfermarkt.com/julian-alvarez/leistungsdaten/spieler/576024">
    <!-- no Tisoomi -->
    </head>

<body class="" itemscope itemtype="http://schema.org/WebPage" data-tm-tld="com" data-cmp-layer-id="910164">
    
                <tm-language-hint></tm-language-hint>
        <div id="main">
                <div class="werbung-skyscraper-container">
            <div class="werbung werbung-skyscraper">
  <div id="div-gpt-ad-1621527521939-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621527521939-0"); });</script>
  </div>
</div>
        </div>

        <div class="werbung-skyscraperbtf-container">
            <div class="werbung werbung-skyscraperbtf">
  <div id="div-gpt-ad-1621528123398-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528123398-0"); });</script>
  </div>
</div>
        </div>
        
        <header class="tm-header">
                            <div class="tm-header__box ">
                                            <a href="/">
                            <img class="icon-logo" src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" height="62" width="156" title="Transfermarkt" alt="Transfermarkt">
                        </a>
                                                                <tm-domainswitcher open-list="false" tld="com"></tm-domainswitcher>
                                            <div class="tm-header__social-box">
                        <a href="https://www.facebook.com/Transfermarkt.global" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Facebook');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/fb_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://twitter.com/TMuk_news" target="_blank" class="header__social-link header__social-link--twitter" onclick="tmEvent('SM-Icons_Header','click','Twitter');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/twitter.svg" width="20" height="20" class="header__icon header__icon--twitter">
                </a>
                <a href="http://instagram.com/transfermarkt_official" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Instagram');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/instagram_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="/intern/rssguide" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','RSS');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/rss_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://www.tiktok.com/@transfermarkt" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Tiktok');
">
                    <img src="https://tmsi.akamaized.net/icons/tiktokRebrush.svg" width="20" height="20" class="header__icon">
                </a>
                    </div>
                            <div class="tm-header__input-wrapper " id="schnellsuche-platz">
                            <form name="schnellsuche" id="schnellsuche" class="tm-header__form" action="/schnellsuche/ergebnis/schnellsuche">
                                <input type="text" name="query" class="tm-header__input--search-field" onClick="" placeholder="Enter your search term" autocorrect="off" spellcheck="false" value="" />
                                <input type="submit" value="" class="tm-header__input--search-send" alt="search" />
                            </form>
                            <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="tm-header__search-detail">
                                <img src="https://tmsi.akamaized.net/icons/search_icon_plus_blue_white.svg" alt="search" class="tm-header__icon-detail-search" height="26" width="26">
                            </a>
                        </div>
                                    </div>
            
            <nav class="main-navbar navihalter">
                                                                        <ul class="main-navbar__container megamenu_dark_bar megamenu_dark" itemscope="itemscope" itemtype="http://www.schema.org/SiteNavigationElement">
                    <a href="/" class="sticky-logo hide-for-small">
                <span title="Transfermarkt" class="tm_svg"></span>
            </a>
            
    <li class="main-navbar__list" data-nav-group="news">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('News','click','menu');
"
            >
            News        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="transfers">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Transfers & Gerüchte','click','menu');
"
            >
            Transfers & rumours        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="marktwerte">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Marktwerte','click','menu');
"
            >
            Market values        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list aktiv" data-nav-group="wettbewerbe">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Wettbewerbe','click','menu');
"
            >
            Competitions        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="foren">
                <a
            class="main-navbar__list-title tm-main-nav-el"
            href="/uebersicht/index/forum/com"
            onClick="tmEvent('Foren','click','menu');
"
            >
            Forums                    </a>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="meintm">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('MeinTM','click','menu');
"
            >
            My TM        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" >
                <a
            class="main-navbar__list-title tm-main-nav-el live-navilink"
            href="/ticker/index/live"
            onClick="tmEvent('Live','click','menu');
"
            >
            Live                            <tm-live-match-counter auto-request="true" content='["Live maches", "Live matches"]'></tm-live-match-counter>
                    </a>
            </li>
</ul>

                
                <form name="schnellsuche" id="schnellsuche-sticky" class="noclose sticky-suche" action="/schnellsuche/ergebnis/schnellsuche">
                    <input type="text" name="query" class="header-suche" onClick="" placeholder="Enter your search term" />
                    <input type="image" class="header-suche-abschicken" src="https://tmssl.akamaized.net//images/suchicon.png" alt="search" />
                </form>
                <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="header-suche-detailsuche">
                    <span class="icon-detailsuche"></span>
                </a>
                                    <a id="arrow-up-xy" href="#">
                        <svg style="fill: white; width: 20px; height: 20px;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                            <g>
                                <path d="M78.016,49.132L51.961,12.714c-0.471-0.66-1.233-1.049-2.043-1.051c-0.006,0-0.006,0-0.006,0
                                c-0.815,0.002-1.575,0.396-2.048,1.059L21.977,49.14c-0.546,0.767-0.616,1.776-0.183,2.612c0.426,0.835,1.292,1.361,2.236,1.361
                                h12.183l-0.001,32.709c0,1.39,1.125,2.515,2.516,2.515l22.541-0.001c1.389,0.001,2.515-1.124,2.516-2.517l0-32.705h12.187
                                c0.94,0,1.803-0.53,2.237-1.367C78.641,50.911,78.566,49.9,78.016,49.132z" />
                            </g>
                        </svg>
                    </a>
                <div class="tm-login " id="login" onClick="tmEvent('login','click','sign_in_button');
">
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     fill="#FFF" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="tm-login__image">
        <g>
            <path d="M80.161,60.441l-15.66-7.47l-6.622-3.159c2.892-1.822,5.241-4.634,6.778-8.022c1.22-2.69,1.946-5.734,1.946-8.99
                c0-1.827-0.29-3.562-0.694-5.236C63.94,19.453,57.605,13.477,50,13.477c-7.461,0-13.701,5.763-15.792,13.645
                c-0.482,1.808-0.815,3.688-0.815,5.68c0,3.459,0.808,6.684,2.181,9.489c1.587,3.254,3.94,5.937,6.804,7.662l-6.342,2.953
                l-16.168,7.53c-1.404,0.658-2.327,2.242-2.327,4.011v15.062v2.703c0,2.381,1.659,4.312,3.708,4.312h57.505
                c2.048,0,3.708-1.93,3.708-4.312v-2.703V64.446C82.46,62.683,81.552,61.114,80.161,60.441z"/>
        </g>
    </svg>
    <span class="tm-login__cta">
        Log in    </span>
</div>
            </nav>

            
            <div class="quick-select-wrapper">
    <div id="quickselect-skeleton" class="ssc" style="height: 40px;">
        <div class="ssc-wrapper flex" style="height: 100%; padding: 0">
            <div class="ssc-square quickselect-element" style="width: 40px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 171.06px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 170.84px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 138.03px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 141.5px;"></div>
        </div>
    </div>

    <tm-quick-select-bar
        default-country="189"
        default-competition="GB1"
        default-club="281"
        default-player="576024"
        dropdown-visible=""
        translations='{&quot;home&quot;:&quot;Home&quot;,&quot;country&quot;:&quot;Country&quot;,&quot;competition&quot;:&quot;Competition&quot;,&quot;club&quot;:&quot;Club&quot;,&quot;player&quot;:&quot;Player&quot;,&quot;attack&quot;:&quot;Striker&quot;,&quot;midfield&quot;:&quot;Mittelfeld&quot;,&quot;defense&quot;:&quot;Defender&quot;,&quot;goalkeeper&quot;:&quot;Goalkeeper&quot;}'
        >
    </tm-quick-select-bar>
</div>


            <div class="werbung werbung-billboard">
  <div id="div-gpt-ad-1621524903956-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621524903956-0"); });</script>
  </div>
</div>
        </header>
        <main>

            
            
    <div id="modal-1" class="modal micromodal-slide" aria-hidden="true" tabindex="1">
        <div class="modal__overlay" tabindex="-1" data-custom-close>
            <div
                class="modal__container"
                role="dialog"
                aria-modal="true"
                aria-labelledby="modal-1-title"
                data-custom-close
                >
                <header class="modal__header">
                    <button
                        class="modal__close modal__close--profile-img"
                        aria-label="Close modal"
                        data-custom-close
                        >
                    </button>
                </header>
                <div id="modal-1-content" class="modal__content">
                                        <img src='https://img.a.transfermarkt.technology/portrait/big/576024-1684920938.jpg?lm=1' alt='Julián Álvarez' title='Julián Álvarez' data-custom-close loading="lazy">
                </div>
            </div>
        </div>
    </div>


<header class="data-header" itemscope itemtype="https://schema.org/Person">
                    <div class="data-header__headline-container">
            <h1 class="data-header__headline-wrapper">
                                    <span class="data-header__shirt-number">
                        #19                    </span>
                                Julián <strong>Álvarez</strong>            </h1>
                                </div>
                    <div class="data-header__badge-container">
                                    <a href="/julian-alvarez/erfolge/spieler/576024" title="Top goal scorer" class="data-header__success-data">
                                                    <img src="data:image/gif;base64,R0lGODlhAQABAIAAAMLCwgAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==" data-src="https://tmssl.akamaized.net/images/titel/header/5.png?lm=1465908312" title="Top goal scorer" alt="Top goal scorer" class="data-header__success-image lazy lazy" />                                                <span class="data-header__success-number">2</span>
                    </a>
                                    <a href="/julian-alvarez/erfolge/spieler/576024" title="TM-Player of the season" class="data-header__success-data">
                                                    <img src="data:image/gif;base64,R0lGODlhAQABAIAAAMLCwgAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==" data-src="https://tmssl.akamaized.net/images/titel/header/256.png?lm=1623075349" title="TM-Player of the season" alt="TM-Player of the season" class="data-header__success-image lazy lazy" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                                    <a href="/julian-alvarez/erfolge/spieler/576024" title="World Cup winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/101.png?lm=1520606996" title="World Cup winner" alt="World Cup winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/julian-alvarez/erfolge/spieler/576024" title="Copa América winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/106.png?lm=1461847499" title="Copa América winner" alt="Copa América winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/julian-alvarez/erfolge/spieler/576024" title="Champions League winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/4.png?lm=1520606999" title="Champions League winner" alt="Champions League winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                                    <a href="/julian-alvarez/erfolge/spieler/576024" title="All titles & victories">
                        <div class="data-header__success-data">
                            <span class="data-header__success-more">
                                <img src="/images/icons/mehr_erfolge.png" />
                            </span>
                        </div>
                    </a>
                            </div>
        
                    <div class="data-header__box--big">
                                    <a href="/manchester-city/startseite/verein/281" class="data-header__box__club-link">
                                            <img srcset="
                            https://tmssl.akamaized.net/images/wappen/normquad/281.png?lm=1467356331 1x,
                            https://tmssl.akamaized.net/images/wappen/homepageWappen150x150/281.png?lm=1467356331 2x
                            " alt="Manchester City" height="100" width="100" />
                                        </a>
                                <div class="data-header__club-info">
                    <span class="data-header__club" itemprop="affiliation">
                        <a title="Manchester City" href="/manchester-city/startseite/verein/281">Man City</a>                    </span><br />                    
                                                                            <span class="data-header__league">
                                    <a class="data-header__league-link" href="/premier-league/startseite/wettbewerb/GB1">
                                        <img src="https://tmssl.akamaized.net/images/logo/verytiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League                                    </a>
                                </span>
                                                                            <span class="data-header__label">League level:
                                <span class="data-header__content">
                                    <img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" />First Tier                                </span>
                            </span>
                                                                                                        <span class="data-header__label">Joined: <span class="data-header__content">Jan 31, 2022</span></span>
                            <span class="data-header__label">Contract expires: <span class="data-header__content">Jun 30, 2028</span></span>
                                                            </div>
            </div>
        
        <div class="data-header__profile-container">
                            <div class="modal-trigger" data-custom-open="modal-1" id="fotoauswahlOeffnen" style="cursor:pointer" onclick="tmEvent('spielerprofil','click','profilbild');">
            
                                <img src="https://img.a.transfermarkt.technology/portrait/header/576024-1684920938.jpg?lm=1" title="Julián Álvarez" alt="Julián Álvarez" class="data-header__profile-image" height="181" width="139" /><div class="bildquelle"><span title="IMAGO">IMAGO</span></div>
                                    <span class="modal-trigger-icon">+</span>
                </div>
                        </div>
        <div class="data-header__info-box ">
            <div class="data-header__details">
                <ul class="data-header__items">
                                            <li class="data-header__label">Date of birth/Age:
                            <span itemprop="birthDate" class="data-header__content">
                                Jan 31, 2000 (23)                            </span>
                        </li>

                                                    <li class="data-header__label">Place of birth:
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />                                <span class="data-header__content" itemprop="birthPlace">
                                    Calchín                                </span>
                            </li>
                        
                                            <li class="data-header__label">Citizenship:
                            <span itemprop="nationality" class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />                                Argentina                            </span>
                        </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li class="data-header__label">Height:
                            <span itemprop="height" class="data-header__content">
                                1,70 m                            </span>
                        </li>
                    
                    <li class="data-header__label">Position:
                        <span class="data-header__content">
                            Second Striker                        </span>
                    </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li for="" class="data-header__label">
                                                            Current international:
                                                        <span class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen flagge" /><a title="Argentina" href="/argentinien/startseite/verein/3437">Argentina</a>                            </span>
                        </li>
                                                    <li class="data-header__label">Caps/Goals:
                                <a class="data-header__content data-header__content--highlight" href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/3437">28                                </a>/
                                <a class="data-header__content data-header__content--highlight" href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/3437">7                                </a>
                            </li>
                                    </ul>
            </div>
        </div>
        
    
            <div class="data-header__box--small">
                <a href="/julian-alvarez/marktwertverlauf/spieler/576024" class="data-header__market-value-wrapper"><span class="waehrung">€</span>90.00<span class="waehrung">m</span>                <p class="data-header__last-update">Last update: Dec 19, 2023</p></a>
            </div>

            
    </header>
    <div class="row hide-on-print" id="subnavi" data-season="" data-controller="spieler" data-action="leistungsdaten" data-path="player-path/leistungsdaten/spieler/576024/plus/0" data-id="576024">
        <div class="page_wrapper subnavi">
            <div class="large-12 columns">
                <div class="subnavi_box" id="subnavigation">
                    <div class="submenu-text show-for-small">
                        <a name="SubNavi" title="Navigation">
                            <span>≡ Sub navigation</span>
                        </a>
                    </div>
                    <nav>
                        <ul id="submenu">
                                                <li id="close_submenu" class="show-for-small">
                            <div id="submenu-icon">
                                <span class="clicked"></span>
                                <span class="clicked"></span>
                            </div>
                            <a>Close subnavigation</a>
                        </li>
                                                    <li id="profile" class="first-button  " data-nav-group="profile">
                                <a name="SubNavi" href="/julian-alvarez/profil/spieler/576024" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','profil');
">Profile</a>
                                                            </li>
                                                        <li id="stats" class="  " data-nav-group="stats">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','leistungsdaten');
">Stats</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="market-values" class="  " data-nav-group="market-values">
                                <a name="SubNavi" href="/julian-alvarez/marktwertverlauf/spieler/576024" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','marktwert');
">Market values</a>
                                                            </li>
                                                        <li id="transfers" class="  " data-nav-group="transfers">
                                <a name="SubNavi" href="/julian-alvarez/transfers/spieler/576024" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','transfers');
">Transfers</a>
                                                            </li>
                                                        <li id="rumors" class="  " data-nav-group="rumors">
                                <a name="SubNavi" href="/julian-alvarez/geruechte/spieler/576024" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','geruchte');
">Rumors</a>
                                                            </li>
                                                        <li id="national-team" class="  " data-nav-group="national-team">
                                <a name="SubNavi" href="/julian-alvarez/nationalmannschaft/spieler/576024" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','nationalmannschaft');
">National team</a>
                                                            </li>
                                                        <li id="news" class="  " data-nav-group="news">
                                <a name="SubNavi" href="/julian-alvarez/news/spieler/576024" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','news');
">News</a>
                                                            </li>
                                                        <li id="achievements" class="  " data-nav-group="achievements">
                                <a name="SubNavi" href="/julian-alvarez/erfolge/spieler/576024" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','erfolge');
">Achievements</a>
                                                            </li>
                                                        <li id="career" class="  " data-nav-group="career">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','karriere');
">Career</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="subnavi-edit" class="  subnavi-edit" data-nav-group="subnavi-edit">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','edit');
"></a>
                                <div class="dropdown_fullwidth gasthinweis" title="Log in or register now"><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                    </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <script>
        var stickySubTop = $('#subnavigation').offset().top;
        stickySubTop = stickySubTop - 60;
        var main = $("#main");
        $(document).ready(function() {
            $(window).on('scroll load', function() {
                if (!main.hasClass("stickySubnavigation")) {
                    stickySubTop = $('#subnavigation').offset().top;
                }
                if ($(window).scrollTop() > stickySubTop) {
                    main.addClass("stickySubnavigation");
                } else {
                    main.removeClass("stickySubnavigation");
                }
            });
        });
    </script>
    <style>
        .forum-anchor {
            margin-top: -80px;
        }
    </style>

                        
<div class="row">
    <div class="large-8 columns">

        <div class="box">
            <h2 class="content-box-headline">
                Stats of Julián Álvarez            </h2>
            <p class="info-content">
                This page contains information about a player's detailed stats. In the info box, you can filter by period, club, type of league and competition. The "Detailed stats" tab shows a player's total appearances, goals, cards and cumulative minutes of play for each competition, and indicates the season in which it occurred.            </p>
            <div class="content">
                <form action="/julian-alvarez/leistungsdaten/spieler/576024/plus/0" method="get">                <div class="row">
                    <div class="large-12 columns">
                        <table class="auflistung">
                            <tbody>
                                <tr>
                                    <td>Filter by season:</td>
                                    <td>
                                        <div class="inline-select">
                                            <select name="saison" data-placeholder="Filter by season" class="chzn-select" tabindex="0">
                                                <option value="ges">Overall balance</option>
                                                                                                    <option  selected="selected"value="2023">23/24</option>
                                                                                                    <option value="2022">22/23</option>
                                                                                                    <option value="2021">21/22</option>
                                                                                                    <option value="2020">20/21</option>
                                                                                                    <option value="2019">19/20</option>
                                                                                                    <option value="2018">18/19</option>
                                                                                                    <option value="2017">17/18</option>
                                                                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="submit" class="small button" value="Show">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                </form>            </div>
        </div>
        <div class="box">
            <h2 class="content-box-headline">
                Stats 23/24            </h2>
            
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023#gesamt"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023/plus/1#gesamt"><div class=""><span>Detailed</span></div></a></div>
            <div class="responsive-table">
                <div id="yw1" class="grid-view">
<div class="summary"></div>
<table class="items">
<thead>
<tr>
<th colspan="2" id="yw1_c0"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/wettbewerb">Competition</a></th><th class="hide" id="yw1_c1"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/wettbewerb">wettbewerb</a></th><th class="zentriert" id="yw1_c2"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/einsaetze.desc"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></a></th><th class="zentriert" id="yw1_c3"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/tore.desc"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></a></th><th class="zentriert" id="yw1_c4"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/vorlagen.desc"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></a></th><th class="zentriert" id="yw1_c5"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/gelbe.desc"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c6"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/gelbrote.desc"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c7"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/rote.desc"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></a></th><th class="rechts" id="yw1_c8"><a class="sort-link" href="/player-path/leistungsdaten/spieler/576024/saison/2023/plus/0/sort/einsatzzeit.desc"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></a></th></tr>
</thead>
<tfoot>
<tr>
<td colspan="2" class="rechts">Total  23/24:</td><td class="hide">&nbsp;</td><td class="zentriert">28</td><td class="zentriert">12</td><td class="zentriert">9</td><td class="zentriert">3</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">2.035'</td></tr>
</tfoot>
<tbody>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td><td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td><td class="zentriert player-profile-performance-data"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/wettbewerb/GB1/verein/281">19</a></td><td class="zentriert">6</td><td class="zentriert">7</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">1.597'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cl.png?lm=1626810555" title="UEFA Champions League" alt="UEFA Champions League" class="" /></td><td class="hauptlink no-border-links"><a title="Champions League" href="/uefa-champions-league/startseite/pokalwettbewerb/CL">Champions League</a></td><td class="zentriert player-profile-performance-data"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/wettbewerb/CL/verein/281">4</a></td><td class="zentriert">4</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">155'</td></tr>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/klub.png?lm=1702377936" title="FIFA Club World Cup" alt="FIFA Club World Cup" class="" /></td><td class="hauptlink no-border-links"><a title="Club World Cup" href="/fifa-klub-wm/startseite/pokalwettbewerb/KLUB">Club World Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/wettbewerb/KLUB/verein/281">2</a></td><td class="zentriert">2</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">115'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/usc.png?lm=1520607013" title="UEFA Super Cup" alt="UEFA Super Cup" class="" /></td><td class="hauptlink no-border-links"><a title="UEFA Super Cup" href="/uefa-super-cup/startseite/pokalwettbewerb/USC">UEFA Super Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/wettbewerb/USC/verein/281">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">5'</td></tr>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gbcs.png?lm=1659265562" title="Community Shield" alt="Community Shield" class="" /></td><td class="hauptlink no-border-links"><a title="Community Shield" href="/community-shield/startseite/pokalwettbewerb/GBCS">Community Shield</a></td><td class="zentriert player-profile-performance-data"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/wettbewerb/GBCS/verein/281">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">90'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cgb.png?lm=1566937342" title="EFL Cup" alt="EFL Cup" class="" /></td><td class="hauptlink no-border-links"><a title="EFL Cup" href="/efl-cup/startseite/pokalwettbewerb/CGB">EFL Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/wettbewerb/CGB/verein/281">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">73'</td></tr>
</tbody>
</table>
<div class="keys" style="display:none" title="/player-path/leistungsdaten/spieler/576024/plus/0?saison=2023"><span>Premier League</span><span>Champions League</span><span>Club World Cup</span><span>UEFA Super Cup</span><span>Community Shield</span><span>EFL Cup</span></div>
</div>            </div>
        </div>

        <div class="box">
    <div class="table-header img-vat">
        <a name="CL" href="/uefa-champions-league/startseite/wettbewerb/CL/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cl.png?lm=1626810555" title="UEFA Champions League" alt="UEFA Champions League" class="" />UEFA Champions League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">9/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/159.png?lm=1567102522" title="Red Star Belgrade" alt="Red Star Belgrade" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023">Red Star</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171305" href="/manchester-city_red-star-belgrade/index/spielbericht/4171305"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert">2</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">10/4/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/23826.png?lm=1619431624" title="RB Leipzig" alt="RB Leipzig" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023">RB Leipzig</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171307" href="/rb-leipzig_manchester-city/index/spielbericht/4171307"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">11'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">10/25/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/452.png?lm=1689916664" title="BSC Young Boys" alt="BSC Young Boys" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023">BSC Young Boys</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171324" href="/bsc-young-boys_manchester-city/index/spielbericht/4171324"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">18'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">11/7/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/452.png?lm=1689916664" title="BSC Young Boys" alt="BSC Young Boys" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023">BSC Young Boys</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171317" href="/manchester-city_bsc-young-boys/index/spielbericht/4171317"><span class="greentext">3:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">11/28/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/23826.png?lm=1619431624" title="RB Leipzig" alt="RB Leipzig" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023">RB Leipzig</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171304" href="/manchester-city_rb-leipzig/index/spielbericht/4171304"><span class="greentext">3:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">36'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">12/13/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/159.png?lm=1567102522" title="Red Star Belgrade" alt="Red Star Belgrade" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023">Red Star</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171321" href="/red-star-belgrade_manchester-city/index/spielbericht/4171321"><span class="greentext">2:3 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 6,
                        Starting eleven: 1,
                        Substituted in: 3,
                        On the bench: 2,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="USC" href="/uefa-super-cup/startseite/wettbewerb/USC/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/usc.png?lm=1520607013" title="UEFA Super Cup" alt="UEFA Super Cup" class="" />UEFA Super Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/uefa-super-cup/spieltag/pokalwettbewerb/USC/saison_id/2023/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">8/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/368.png?lm=1408655455" title="Sevilla FC" alt="Sevilla FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2023">Sevilla FC</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087203" href="/manchester-city_sevilla-fc/index/spielbericht/4087203"><span class="greentext">6:5 <span class="ergebnis_zusatz"> on pens</span></span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">5'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 0,
                        Substituted in: 1,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="KLUB" href="/fifa-club-world-cup/startseite/wettbewerb/KLUB/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/klub.png?lm=1702377936" title="FIFA Club World Cup" alt="FIFA Club World Cup" class="" />FIFA Club World Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/fifa-club-world-cup/spieltag/pokalwettbewerb/KLUB/saison_id/2023/gruppe/HF">Semi-Finals</a>
                </td>
                                    <td class="zentriert">12/19/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Urawa Red Diamonds" href="/urawa-red-diamonds/spielplan/verein/828/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/828.png?lm=1703509823" title="Urawa Red Diamonds" alt="Urawa Red Diamonds" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Urawa Red Diamonds" href="/urawa-red-diamonds/spielplan/verein/828/saison_id/2023">Urawa Reds</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4243187" href="/urawa-red-diamonds_manchester-city/index/spielbericht/4243187"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">25'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/fifa-club-world-cup/spieltag/pokalwettbewerb/KLUB/saison_id/2023/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">12/22/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Fluminense Football Club" href="/fluminense-rio-de-janeiro/spielplan/verein/2462/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2462.png?lm=1648225934" title="Fluminense Football Club" alt="Fluminense Football Club" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fluminense Football Club" href="/fluminense-rio-de-janeiro/spielplan/verein/2462/saison_id/2023">Fluminense</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4244600" href="/manchester-city_fluminense-football-club/index/spielbericht/4244600"><span class="greentext">4:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert">2</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 2,
                        Starting eleven: 1,
                        Substituted in: 1,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="GB1" href="/premier-league/startseite/wettbewerb/GB1/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/1">1</a>
                </td>
                                    <td class="zentriert">8/11/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1132.png?lm=1686818840" title="Burnley FC" alt="Burnley FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023">Burnley</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087924" href="/burnley-fc_manchester-city/index/spielbericht/4087924"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/2">2</a>
                </td>
                                    <td class="zentriert">8/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/762.png?lm=1472921161" title="Newcastle United" alt="Newcastle United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023">Newcastle</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087939" href="/manchester-city_newcastle-united/index/spielbericht/4087939"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">46'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/3">3</a>
                </td>
                                    <td class="zentriert">8/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/350.png?lm=1409254138" title="Sheffield United" alt="Sheffield United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023">Sheff Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087953" href="/sheffield-united_manchester-city/index/spielbericht/4087953"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">9/2/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/931.png?lm=1556831687" title="Fulham FC" alt="Fulham FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2023">Fulham</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087962" href="/manchester-city_fulham-fc/index/spielbericht/4087962"><span class="greentext">5:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">9/16/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/379.png?lm=1464675260" title="West Ham United" alt="West Ham United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2023">West Ham</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087971" href="/west-ham-united_manchester-city/index/spielbericht/4087971"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/6">6</a>
                </td>
                                    <td class="zentriert">9/23/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/703.png?lm=1598890289" title="Nottingham Forest" alt="Nottingham Forest" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2023">Nottm Forest</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095070" href="/manchester-city_nottingham-forest/index/spielbericht/4095070"><span class="greentext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">57'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/7">7</a>
                </td>
                                    <td class="zentriert">9/30/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/543.png?lm=1467496784" title="Wolverhampton Wanderers" alt="Wolverhampton Wanderers" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2023">Wolves</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095145" href="/wolverhampton-wanderers_manchester-city/index/spielbericht/4095145"><span class="redtext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">63'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/8">8</a>
                </td>
                                    <td class="zentriert">10/8/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023">Arsenal</a>&nbsp;&nbsp;<span class="tabellenplatz">(2.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095146" href="/arsenal-fc_manchester-city/index/spielbericht/4095146"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">68'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/9">9</a>
                </td>
                                    <td class="zentriert">10/21/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1237.png?lm=1492718902" title="Brighton & Hove Albion" alt="Brighton & Hove Albion" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2023">Brighton</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095161" href="/manchester-city_brighton-amp-hove-albion/index/spielbericht/4095161"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/10">10</a>
                </td>
                                    <td class="zentriert">10/29/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/985.png?lm=1457975903" title="Manchester United" alt="Manchester United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2023">Man Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095173" href="/manchester-united_manchester-city/index/spielbericht/4095173"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">87'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/11">11</a>
                </td>
                                    <td class="zentriert">11/4/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/989.png?lm=1457991811" title="AFC Bournemouth" alt="AFC Bournemouth" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2023">Bournemouth</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095181" href="/manchester-city_afc-bournemouth/index/spielbericht/4095181"><span class="greentext">6:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">71'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/12">12</a>
                </td>
                                    <td class="zentriert">11/12/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2023">Chelsea</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095190" href="/chelsea-fc_manchester-city/index/spielbericht/4095190"><span class="">4:4 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">79'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/13">13</a>
                </td>
                                    <td class="zentriert">11/25/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31.png?lm=1456567819" title="Liverpool FC" alt="Liverpool FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2023">Liverpool</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095201" href="/manchester-city_liverpool-fc/index/spielbericht/4095201"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/14">14</a>
                </td>
                                    <td class="zentriert">12/3/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/148.png?lm=1544345801" title="Tottenham Hotspur" alt="Tottenham Hotspur" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2023">Tottenham</a>&nbsp;&nbsp;<span class="tabellenplatz">(5.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095212" href="/manchester-city_tottenham-hotspur/index/spielbericht/4095212"><span class="">3:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">87'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/15">15</a>
                </td>
                                    <td class="zentriert">12/6/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023">Aston Villa</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095216" href="/aston-villa_manchester-city/index/spielbericht/4095216"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">68'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/16">16</a>
                </td>
                                    <td class="zentriert">12/10/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Luton Town" href="/luton-town/spielplan/verein/1031/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1031.png?lm=1457723228" title="Luton Town" alt="Luton Town" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Luton Town" href="/luton-town/spielplan/verein/1031/saison_id/2023">Luton</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095231" href="/luton-town_manchester-city/index/spielbericht/4095231"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/17">17</a>
                </td>
                                    <td class="zentriert">12/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/873.png?lm=1457723287" title="Crystal Palace" alt="Crystal Palace" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2023">Crystal Palace</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095242" href="/manchester-city_crystal-palace/index/spielbericht/4095242"><span class="">2:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/19">19</a>
                </td>
                                    <td class="zentriert">12/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/29.png?lm=1445949846" title="Everton FC" alt="Everton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023">Everton</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095262" href="/everton-fc_manchester-city/index/spielbericht/4095262"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/20">20</a>
                </td>
                                    <td class="zentriert">12/30/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/350.png?lm=1409254138" title="Sheffield United" alt="Sheffield United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023">Sheff Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095271" href="/manchester-city_sheffield-united/index/spielbericht/4095271"><span class="greentext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 19,
                        Starting eleven: 19,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="GBCS" href="/community-shield/startseite/wettbewerb/GBCS/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/gbcs.png?lm=1659265562" title="Community Shield" alt="Community Shield" class="" />Community Shield        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/community-shield/spieltag/pokalwettbewerb/GBCS/saison_id/2023/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">8/6/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023">Arsenal</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4149666" href="/arsenal-fc_manchester-city/index/spielbericht/4149666"><span class="redtext">5:2 <span class="ergebnis_zusatz"> on pens</span></span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">31'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="CGB" href="/efl-cup/startseite/wettbewerb/CGB/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cgb.png?lm=1566937342" title="EFL Cup" alt="EFL Cup" class="" />EFL Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/julian-alvarez/leistungsdaten/spieler/576024/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/efl-cup/spieltag/pokalwettbewerb/CGB/saison_id/2023/gruppe/3R">Third Round</a>
                </td>
                                    <td class="zentriert">9/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/762.png?lm=1472921161" title="Newcastle United" alt="Newcastle United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023">Newcastle</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4188454" href="/newcastle-united_manchester-city/index/spielbericht/4188454"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">73'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
</div>
    <div class="large-4 columns">
        <div class="werbung werbung-rectangle1">
  <div id="div-gpt-ad-1621526463511-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621526463511-0"); });</script>
  </div>
</div>
        <div class="box hide">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                                    <span class="position_12" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);background-color: rgba(143, 13, 16, 0.98);font-size:11px !important" title="6.6666666666667">1</span>
                                        <span class="position_10" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);background-color: rgba(167, 27, 30, 0.98);font-size:16px !important" title="26.666666666667">4</span>
                                        <span class="position_14" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:20px !important" title="53.333333333333">8</span>
                                        <span class="position_13" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:22px !important" title="100">15</span>
                                </div>
        </div>
    </div>
</div>
<div class="box">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                
                    <div class="zahl-anzeige pos-box positionsbox_12" title="Right Winger">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/12">
                            <div class="text-box p-12" style="font-size:11px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                1                                <div class="zusatz-kreis">RW</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_12" title="Right Winger">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/12">
                            <div class="text-box p-12" style="font-size:11px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                RW                                <div class="zusatz-kreis">1</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/10">
                            <div class="text-box p-10" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                4                                <div class="zusatz-kreis">AM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/10">
                            <div class="text-box p-10" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                AM                                <div class="zusatz-kreis">4</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_14" title="Centre-Forward">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/14">
                            <div class="text-box p-14" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                8                                <div class="zusatz-kreis">CF</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_14" title="Centre-Forward">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/14">
                            <div class="text-box p-14" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                CF                                <div class="zusatz-kreis">8</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/13">
                            <div class="text-box p-13" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                15                                <div class="zusatz-kreis">SS</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/13">
                            <div class="text-box p-13" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                SS                                <div class="zusatz-kreis">15</div>
                            </div>
                            </a>
                        </div>
                    </div>

                                </div>
        </div>
    </div>
        <table>
        <thead>
            <tr>
                <th>Played as...</th>
                <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                        </tr>
        </thead>
        <tbody>
                        <tr>
                <td class="hauptlink"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/13">Second Striker</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/13">15</a></td>
                                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/13">5</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/13">5</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/14">Centre-Forward</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/14">8</a></td>
                                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/14">5</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/14">2</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/10">Attacking Midfield</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/10">4</a></td>
                                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/10">2</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/10">2</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/12">Right Winger</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/12">1</a></td>
                                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/12">-</a></td>
                <td class="zentriert"><a href="/julian-alvarez/leistungsdatendetails/spieler/576024/saison/2023/pos/12">-</a></td>
                            </tr>
                        </tbody>
    </table>
</div>
        <div class="box">
    <h2 class="content-box-headline">
        Stats by club    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Club</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><a title="CA River Plate" href="/club-atletico-river-plate/spielplan/verein/209/saison_id/2019"><img src="https://tmssl.akamaized.net/images/wappen/tiny/15108_1672923846.png?lm=1672923847" title="&nbsp;" alt="CA River Plate" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="CA River Plate" href="/club-atletico-river-plate/spielplan/verein/209/saison_id/2019">River Plate</a></td>
            <td class="zentriert"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/verein/209">122</a></td>
                            <td class="zentriert">54</td>
                <td class="zentriert">31</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023">Man City</a></td>
            <td class="zentriert"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/verein/281">77</a></td>
                            <td class="zentriert">29</td>
                <td class="zentriert">14</td>
                    </tr>
            </tbody>
    </table>
    <a title="Julián Álvarez" class="content-link" href="/julian-alvarez/leistungsdatenverein/spieler/576024">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        Performance by competition    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Competition</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td>
            <td class="zentriert"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/wettbewerb/GB1/verein/281">50</a></td>
                            <td class="zentriert">15</td>
                <td class="zentriert">8</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/ar1n.png?lm=1612869286" title="Professional Football League" alt="Professional Football League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Liga Profesional" href="/superliga/startseite/wettbewerb/AR1N">Liga Profesional</a></td>
            <td class="zentriert"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/wettbewerb/AR1N/verein/209">38</a></td>
                            <td class="zentriert">22</td>
                <td class="zentriert">10</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cdca.png?lm=1647533050" title="Copa de la Liga Profesional - Playoffs" alt="Copa de la Liga Profesional - Playoffs" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Copa de la Liga - Playoffs" href="/copa-diego-armando-maradona-fase-campeon/startseite/wettbewerb/CDCA">Copa de la Liga - Playoffs</a></td>
            <td class="zentriert"><a title="Julián Álvarez" href="/julian-alvarez/leistungsdatendetails/spieler/576024/wettbewerb/CDCA/verein/209">6</a></td>
                            <td class="zentriert">2</td>
                <td class="zentriert">1</td>
                    </tr>
            </tbody>
    </table>
    <a title="Julián Álvarez" class="content-link" href="/julian-alvarez/detaillierteleistungsdaten/spieler/576024">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        National team career    </h2>
    <table>
        <thead>
        <tr>
            <th class="zentriert">#</th>
            <th colspan="2" class="hide-for-small">National team</th>
            <th class="zentriert">Debut</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Matches">&nbsp;</span></th>
            <th class="zentriert"><span class="icons_sprite icon-tor-table-header"></span></th>
                    </tr>
        </thead>
        <tbody>
            <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Argentina" href="/argentinien/startseite/verein/3437">Argentina</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_gruen_20">
            
                9
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Argentina" href="/argentinien/startseite/verein/3437">Argentina</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/3557026" title="World Cup qualification South America: Argentina - Chile 1:1">Jun 4, 2021</a>
                                </td>
            <td class="zentriert"><a href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/3437">28</a></td>
            <td class="zentriert"><a href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/3437/nurEinsatz/2">7</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Argentina U23" href="/argentinien-u23/startseite/verein/52540">Argentina U23</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                20
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Argentina U23" href="/argentinien-u23/startseite/verein/52540">Argentina U23</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/3254020" title="International Friendlies: Argentina U23 - Bolivia U21 5:0">Sep 4, 2019</a>
                                </td>
            <td class="zentriert"><a href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/52540">9</a></td>
            <td class="zentriert"><a href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/52540/nurEinsatz/2">2</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Argentina U20" href="/argentinien-u20/startseite/verein/11940">Argentina U20</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                7
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/9.png?lm=1520611569" title="Argentina" alt="Argentina" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Argentina U20" href="/argentinien-u20/startseite/verein/11940">Argentina U20</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/3141410" title="U-20 South American Championship 2019: Paraguay U20 - Argentina U20 1:1">Jan 20, 2019</a>
                                </td>
            <td class="zentriert"><a href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/11940">16</a></td>
            <td class="zentriert"><a href="/julian-alvarez/nationalmannschaft/spieler/576024/verein_id/11940/nurEinsatz/2">3</a></td>
                    </tr>
                </tbody>
    </table>
            <a title="Julián Álvarez" class="content-link" href="/julian-alvarez/nationalmannschaft/spieler/576024">Go to national player profile</a>    </div>
        <div class="werbung werbung-rectangle2">
  <div id="div-gpt-ad-1621528018930-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528018930-0"); });</script>
  </div>
</div>
    </div>
</div>

<script async src="/js/custom/tm-track-links.min.js" type="module"></script>
<div class="werbung werbung-fullsize_contentad">
  <div id="div-gpt-ad-1621528173524-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528173524-0"); });</script>
  </div>
</div>
        </main>

        <footer>
            <div class="tm-footer">
            <a href="/"
           class="tm-footer__logo">
          <img src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" alt="Transfermarkt" height="33" width="80"/>
        </a>
          <ul class="tm-footer__links">
    <li class="tm-footer__links-item">
      <a href="/intern/impressum">
          Legal notice      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/web/datenschutz">
          Data protection      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="javascript:void(0)" class="cmp-link">
          Privacy      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/anb">
          General conditions of use      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/tmteam">
          TM-Team      </a>
    </li>
                        <li class="tm-footer__links-item">
      <a href="/intern/faq">
          FAQ      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/fehlermelden">
          Found a mistake?      </a>
    </li>
  </ul>
</div>
        </footer>
                <div id="menue_overlay"></div>
    </div>
        <script type="text/javascript">
        var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r",
"co":""
}
    </script>
        <script type="module">
        var defaultOptions = {
            tracking: !0,
            refreshAds: !0
        };
        export var refreshAd = function() {
            var e, n;
            [ASCDP.hasOwnProperty("adS"), null === (e = ASCDP.adS) || void 0 === e ? void 0 : e.hasOwnProperty("reloadAds"), "function" == typeof(null === (n = ASCDP.adS) || void 0 === n ? void 0 : n.reloadAds)].every(function(e) {
                return e
            }) && ASCDP.adS.reloadAds()
        };
        export var TmTrackingAndAds = function(e, n) {
            void 0 === n && (n = defaultOptions);
            var r = ["tabelle", "reiter", "forum"].includes(e) ? e : "";
            n.tracking && (gtag("event", "page_view", {
                page_path: "/jsContent" + window.location.pathname
            }), sendIvwData(r)), n.refreshAds && "undefined" != typeof ASCDP && refreshAd()
        };
        window.tmTrackingAndAds = function(e, n) {
            return TmTrackingAndAds(e, n)
        };
    </script>
            <script type="text/javascript">
            const iommInterval = setInterval(() => {
                if (typeof IOMm === 'function') {
                    IOMm('configure', {
                        st: iam_data.st,
                        dn: 'data-84a0f3455d.transfermarkt.com',
                        mh: 5
                    });
                    IOMm('pageview', {
                        cp: iam_data.cp,
                        co: iam_data.co
                    });
                    clearInterval(iommInterval);
                }
            }, 250);
        </script>
    <script type="text/javascript">
	if(typeof(adet) == "boolean" && adet == false){
		img_src="/static/singlepictures/jk99hhfsdh209nbnkjldgh90sghfsdlk";
	} else {
		img_src="/static/singlepictures/jku90whjlkjbwbta1g4b8h89fh8sgh8d";
	}
	var elem = document.createElement("img");
	document.body.appendChild(elem);
	elem.src = img_src;
</script>

            <script>
            $(function() {
                var cnt = $('div.large-4.columns').length;
                if (cnt == 1) {
                    var sidebarDiv = document.querySelector('div.large-4.columns');
                    if (sidebarDiv !== null) {
                        $('#werbung_recommender_sidebar_wrapper').appendTo(sidebarDiv);
                        $('#werbung_recommender_sidebar_wrapper').show();
                    }
                }
            });
        </script>
        <div id="werbung_recommender_sidebar_wrapper" style="display: none;">
            <div 
    id="recommender_sidebar" 
    class="box"
    >
    <div class="OUTBRAIN" data-widget-id="SL_DT_SB"></div>
<tm-consent 
    no-checkbox 
    type="outbrain" 
    embed="PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jPSJhc3luYyIgc3JjPSIvL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzIj48L3NjcmlwdD4=">
</tm-consent>
</div>
        </div>
    <script type="module" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.esm.js" defer></script><script nomodule="" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.js" defer></script><tm-consent type="adition" no-checkbox embed="PHNjcmlwdCBzcmM9Imh0dHBzOi8vY3JlYXRpdmUtY2RuLm9kZHNzZXJ2ZS5jb20vbG9hZGVyLmpzP3B1Ymxpc2hlcj10bSIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4="></tm-consent><tm-consent type="googleanalytics" no-checkbox embed="PHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMzgxNjIwNC0xMyI+PC9zY3JpcHQ+"></tm-consent>
<tm-consent type="pubmatic" no-checkbox embed="PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBXVD17fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncHRSYW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBXVC5qc0xvYWRlZCA9ICgpID0+IHsgLy9QdWJNYXRpYyBwd3QuanMgb24gbG9hZCBjYWxsYmFjayBpcyB1c2VkIHRvIGxvYWQgR1BUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEdQVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkR1BUID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGdwdFJhbiBmbGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncHRSYW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B0UmFuID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWRzLnNyYyA9ICh1c2VTU0wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0L3RhZy9qcy9ncHQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbHNhZmUgdG8gY2FsbCBncHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEdQVCwgNTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9wd3QvMTYzMjI5LzEwMTAzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZlcnNpb25JZCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1cmwuaW5kZXhPZigncHd0dj0nKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IC9wd3R2PSguKj8pKCZ8JCkvZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHJlZ2V4cC5leGVjKHB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoID49IDIgJiYgbWF0Y2hlc1sxXS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVZlcnNpb25JZCA9ICcvJyttYXRjaGVzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3RhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dGFkcy5hc3luYyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3RhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd0YWRzLnNyYyA9IHVybCtwcm9maWxlVmVyc2lvbklkKycvcHd0LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHd0YWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICA="></tm-consent><tm-consent type="amazonadvertising" no-checkbox embed="PHNjcmlwdD4hZnVuY3Rpb24odCwkLGUscyxpLGEsbyl7JFt0XXx8KCRbdF09e2luaXQ6ZnVuY3Rpb24oKXtfKCJpIixhcmd1bWVudHMpfSxmZXRjaEJpZHM6ZnVuY3Rpb24oKXtfKCJmIixhcmd1bWVudHMpfSxzZXREaXNwbGF5QmlkczpmdW5jdGlvbigpe30sdGFyZ2V0aW5nS2V5czpmdW5jdGlvbigpe3JldHVybltdfSxfUTpbXX0sKGE9ZS5jcmVhdGVFbGVtZW50KHMpKS5hc3luYz0hMCxhLnNyYz1pLChvPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbykpO2Z1bmN0aW9uIF8oZSxzKXskW3RdLl9RLnB1c2goW2Usc10pfX0oImFwc3RhZyIsd2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCIvL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIpLGFwc3RhZy5pbml0KHtwdWJJRDoiNTEzNCIsYWRTZXJ2ZXI6Imdvb2dsZXRhZyJ9KTtjb25zdCBpbml0QW1hem9uQWRCaWRzPSh0LCQpPT57KCQmJiJ0Y2xvYWRlZCI9PT10LmV2ZW50U3RhdHVzfHwidXNlcmFjdGlvbmNvbXBsZXRlIj09PXQuZXZlbnRTdGF0dXMpJiZhcHN0YWcuZmV0Y2hCaWRzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90czpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIixzbG90TmFtZToiNTg3NzgxNjQvRGVza3RvcC1CaWxsYm9hcmQtMSIsc2l6ZXM6W1s5NjAsOTBdLFs5NzAsMjUwXSxbOTUwLDkwXSxbNzI4LDkwXSxbOTcwLDkwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLU1lZGl1bVJlY3RhbmdsZS0xIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLVNreXNjcmFwZXItMSIsc2l6ZXM6W1sxNjAsNjAwXSxbMzM2LDI4MF0sWzMwMCwyNTBdLFszMDAsNjAwXSxbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLHNpemVzOltbMzM2LDI4MF0sWzMwMCwyNTBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0yIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxbMTYwLDYwMF0sWzMwMCw2MDBdLCBbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtQmlsbGJvYXJkLTIiLHNpemVzOltbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQyODkyOTYtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1NZWRpdW1SZWN0YW5nbGUtMSIsc2l6ZXM6W1szMDAsMTAwXSxbMzAwLDI1MF0sXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTY3OTM0MTQ2ODE5My0wIixzbG90TmFtZToiNTg3NzgxNjQvTW9iaWxlLU1lZGl1bVJlY3RhbmdsZS0yIixzaXplczpbWzMwMCwgMjUwXSwgWzMyMCwgNTBdLCBbMjUwLCAyNTBdLCBbMzAwLCAxMDBdLCBbMzM2LCAyODBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQzNjkyOTQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1IYWxmcGFnZS0xIixzaXplczpbWzMwMCw2MDBdLFszMDAsMjUwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTM0NDMyODI5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9Nb2JpbGUtU3RpY2t5IixzaXplczpbWzMwMCw1MF0sWzMyMCw1MF0sXX0sXSx0aW1lb3V0OjJlM30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpe2dvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpe2Fwc3RhZy5zZXREaXNwbGF5QmlkcygpLGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCl9KX0pfTsiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7PC9zY3JpcHQ+"></tm-consent><tm-consent type="googleadvertising" no-checkbox embed="PHNjcmlwdCAgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg=="></tm-consent>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/aa69c6e9c51f1e811847082c63633956/gridview/jquery.yiigridview.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-menu.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/vendors.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmsi.akamaized.net/js/svelte-components/consent/bundle.js"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-skyscraper.min.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
	var loginUrl='/profil/login';
	var onlyDE = '';
	var onlyMobile = '';
	var onlyTablet = '';
	var getUserID = '';

    function sendIvwData(typ) {
        if(typ == 'tabelle') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_t",
"co":""
}

        }else if(typ == 'reiter') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_r",
"co":""
}

        }else if(typ == 'forum') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_forum",
"co":""
}

        }else {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_s",
"co":""
}

        }
        if(typeof IOMm === 'function') {
            IOMm('pageview', { cp: iam_data.cp, co: iam_data.co });
        }
    }
jQuery(function($) {
jQuery('#yw1').yiiGridView({'ajaxUpdate':['yw1'],'ajaxVar':'ajax','pagerClass':'pager','loadingClass':'grid\x2Dview\x2Dloading','filterClass':'filters','tableClass':'items','selectableRows':1,'enableHistory':false,'updateSelector':'\x7Bpage\x7D,\x20\x7Bsort\x7D','filterSelector':'\x7Bfilter\x7D','afterAjaxUpdate':function() {window.LazyLoadInstance.update(); tmTrackingAndAds(); trackLinks(); document.dispatchEvent(new CustomEvent("tmInitTooltip"));}});
});
/*]]>*/
</script>
</body>

</html>
  recorded_at: Sun, 31 Dec 2023 14:44:12 GMT
recorded_with: VCR 6.2.0
