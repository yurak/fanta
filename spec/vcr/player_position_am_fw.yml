---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/144028/plus/0?saison=2023
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 15:08:47 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web06
      Set-Cookie:
      - TMSESSID=6562886fa0787e5d2a48fc06de4bdf8b; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 ca4bc82573be586920ccabe8e2946522.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - mq1ePB4XmrSBStt5HfwD7oQaJ_IxmLa-qwpPgizpaj15o5QvH3Im9g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBkYXRhLWRlc2NyaXB0aW9uPSJzb3VyY2Vwb2ludCBzdHViIGNvZGUiPgogICAgIWZ1bmN0aW9uICgpIHsgdmFyIGUgPSBmdW5jdGlvbiAoKSB7IHZhciBlLCB0ID0gIl9fdGNmYXBpTG9jYXRvciIsIGEgPSBbXSwgbiA9IHdpbmRvdzsgZm9yICg7IG47KSB7IHRyeSB7IGlmIChuLmZyYW1lc1t0XSkgeyBlID0gbjsgYnJlYWsgfSB9IGNhdGNoIChlKSB7IH0gaWYgKG4gPT09IHdpbmRvdy50b3ApIGJyZWFrOyBuID0gbi5wYXJlbnQgfSBlIHx8ICghZnVuY3Rpb24gZSgpIHsgdmFyIGEgPSBuLmRvY3VtZW50LCByID0gISFuLmZyYW1lc1t0XTsgaWYgKCFyKSBpZiAoYS5ib2R5KSB7IHZhciBpID0gYS5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsgaS5zdHlsZS5jc3NUZXh0ID0gImRpc3BsYXk6bm9uZSIsIGkubmFtZSA9IHQsIGEuYm9keS5hcHBlbmRDaGlsZChpKSB9IGVsc2Ugc2V0VGltZW91dChlLCA1KTsgcmV0dXJuICFyIH0oKSwgbi5fX3RjZmFwaSA9IGZ1bmN0aW9uICgpIHsgZm9yICh2YXIgZSwgdCA9IGFyZ3VtZW50cy5sZW5ndGgsIG4gPSBuZXcgQXJyYXkodCksIHIgPSAwOyByIDwgdDsgcisrKW5bcl0gPSBhcmd1bWVudHNbcl07IGlmICghbi5sZW5ndGgpIHJldHVybiBhOyBpZiAoInNldEdkcHJBcHBsaWVzIiA9PT0gblswXSkgbi5sZW5ndGggPiAzICYmIDIgPT09IHBhcnNlSW50KG5bMV0sIDEwKSAmJiAiYm9vbGVhbiIgPT0gdHlwZW9mIG5bM10gJiYgKGUgPSBuWzNdLCAiZnVuY3Rpb24iID09IHR5cGVvZiBuWzJdICYmIG5bMl0oInNldCIsICEwKSk7IGVsc2UgaWYgKCJwaW5nIiA9PT0gblswXSkgeyB2YXIgaSA9IHsgZ2RwckFwcGxpZXM6IGUsIGNtcExvYWRlZDogITEsIGNtcFN0YXR1czogInN0dWIiIH07ICJmdW5jdGlvbiIgPT0gdHlwZW9mIG5bMl0gJiYgblsyXShpKSB9IGVsc2UgYS5wdXNoKG4pIH0sIG4uYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChmdW5jdGlvbiAoZSkgeyB2YXIgdCA9ICJzdHJpbmciID09IHR5cGVvZiBlLmRhdGEsIGEgPSB7fTsgdHJ5IHsgYSA9IHQgPyBKU09OLnBhcnNlKGUuZGF0YSkgOiBlLmRhdGEgfSBjYXRjaCAoZSkgeyB9IHZhciBuID0gYS5fX3RjZmFwaUNhbGw7IG4gJiYgd2luZG93Ll9fdGNmYXBpKG4uY29tbWFuZCwgbi52ZXJzaW9uLCAoZnVuY3Rpb24gKGEsIHIpIHsgdmFyIGkgPSB7IF9fdGNmYXBpUmV0dXJuOiB7IHJldHVyblZhbHVlOiBhLCBzdWNjZXNzOiByLCBjYWxsSWQ6IG4uY2FsbElkIH0gfTsgdCAmJiAoaSA9IEpTT04uc3RyaW5naWZ5KGkpKSwgZS5zb3VyY2UucG9zdE1lc3NhZ2UoaSwgIioiKSB9KSwgbi5wYXJhbWV0ZXIpIH0pLCAhMSkpIH07ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBtb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA9IGUgOiBlKCkgfSgpOwo8L3NjcmlwdD4KPHNjcmlwdCBkYXRhLWRlc2NyaXB0aW9uPSJzb3VyY2Vwb2ludCBjb25maWd1cmF0aW9uIj4Kd2luZG93Ll9zcF8gPSB7CiAgICBjb25maWc6IHsiYWNjb3VudElkIjoxMjU0LCJwcm9wZXJ0eUlkIjo3NDI3LCJnZHByIjp7ImNvbnNlbnRMYW5ndWFnZSI6ImVuIiwidGFyZ2V0aW5nUGFyYW1zIjp7ImFjcHMiOiJmYWxzZSJ9fSwiYmFzZUVuZHBvaW50IjoiaHR0cHM6Ly9jZG4ucHJpdmFjeS1tZ210LmNvbSIsImlzU1BBIjp0cnVlLCJjcFByb3BlcnR5SWQiOiI3YTg0YjM0MCJ9fQo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLnByaXZhY3ktbWdtdC5jb20vd3JhcHBlck1lc3NhZ2luZ1dpdGhvdXREZXRlY3Rpb24uanMiIGFzeW5jPjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGRhdGEtZGVzY3JpcHRpb249ImNvbnRlbnRwYXNzIGludGVncmF0aW9uIj4KICAgIChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgY3BCYXNlVXJsID0gJ2h0dHBzOi8vY3AudHJhbnNmZXJtYXJrdC5jb20nOwogICAgICAgIHZhciBjcENvbnRyb2xsZXIgPSBjcEJhc2VVcmwgKyAnL25vdy5qcyc7CiAgICAgICAgdmFyIGNwUHJvcGVydHlJZCA9ICc3YTg0YjM0MCc7CgogICAgICAgICFmdW5jdGlvbihDLG8sbix0LFAsYSxzKXtDWydDUE9iamVjdCddPW47Q1tuXXx8KENbbl09ZnVuY3Rpb24oKXsKICAgICAgICAoQ1tuXS5xPUNbbl0ucXx8W10pLnB1c2goYXJndW1lbnRzKX0pO0Nbbl0ubD0rbmV3IERhdGU7YT1vLmNyZWF0ZUVsZW1lbnQodCk7CiAgICAgICAgcz1vLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpWzBdO2Euc3JjPVA7cy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHMpfQogICAgICAgICh3aW5kb3csZG9jdW1lbnQsJ2NwJywnc2NyaXB0JyxjcENvbnRyb2xsZXIpOwoKICAgICAgICAhZnVuY3Rpb24oQyxvLG4sdCxQKXtpZighQ1tuXS5wYXRjaGVkKXtjcCgnZXh0ZW5zaW9uJywnYXV0aGVudGljYXRlJyk7UD1DW25dLnEucHVzaDsKICAgICAgICBDW25dLnEucHVzaD1mdW5jdGlvbihhKXtpZihhWzBdPT09J2F1dGhlbnRpY2F0ZScpe2lmKChvWydjb29raWUnXXx8JycpLmluZGV4T2YoJ19jcGF1dGhoaW50PScpPT09LTEmJgogICAgICAgICEoQ1snbG9jYWxTdG9yYWdlJ118fHt9KVsnX2NwdXNlciddJiZDLmxvY2F0aW9uLmhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdjcGF1dGhlbnRpY2F0ZWQnKT09PS0xKXsKICAgICAgICB0PXtpc0xvZ2dlZEluOmZ1bmN0aW9uKCl7cmV0dXJuIGZhbHNlO30saGFzVmFsaWRTdWJzY3JpcHRpb246ZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2U7fX07CiAgICAgICAgKHR5cGVvZiBhWzFdPT09J2Z1bmN0aW9uJyYmYVsxXShudWxsLHQpKTtDW25dLmFmcD10cnVlO1AuYXBwbHkoQ1tuXS5xLFtbJ2F1dGhlbnRpY2F0ZScsbnVsbF1dKTsKICAgICAgICByZXR1cm4gdDt9fVAuYXBwbHkoQ1tuXS5xLFthXSk7fX19CiAgICAgICAgKHdpbmRvdyxkb2N1bWVudCwnY3AnLGZhbHNlKTsKCiAgICAgICAgY3AoJ2NyZWF0ZScsIGNwUHJvcGVydHlJZCwgewogICAgICAgIGJhc2VVcmw6IGNwQmFzZVVybAogICAgICAgIH0pOwoKICAgICAgICBjcCgncmVuZGVyJywgewogICAgICAgIG9uRnVsbENvbnNlbnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnW0RFTU9dIG9uRnVsbENvbnNlbnQnKTsKICAgICAgICB9CiAgICAgICAgfSkKICAgIH0pKCkKPC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgZGF0YS1kZXNjcmlwdGlvbj0iY29udGVudHBhc3Mgc291cmNlcG9pbnQgZmFzdCBwYXRoIj4KKGZ1bmN0aW9uICgpIHsKICAgIGNwKCdhdXRoZW50aWNhdGUnLCBmdW5jdGlvbihlcnIsIHVzZXIpIHsKICAgICAgICBpZiAoZXJyIHx8ICghdXNlci5pc0xvZ2dlZEluKCkgJiYgIXVzZXIuaGFzVmFsaWRTdWJzY3JpcHRpb24oKSkpIHsKICAgICAgICBjb25zb2xlLmxvZygnW1NQQ1BdIFRha2luZyBmYXN0IHBhdGgnKTsKICAgICAgICAoZnVuY3Rpb24gc3BFeGVjTXNnKCkgewogICAgICAgICAgICBpZiAod2luZG93Ll9zcF8gJiYgd2luZG93Ll9zcF8uZXhlY3V0ZU1lc3NhZ2luZykgewogICAgICAgICAgICBpZiAoIXdpbmRvdy5fc3BfLmNvbmZpZy5pc1NQQSkgewogICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdbU1BDUF0gU291cmNlcG9pbnQgbm90IGluIFNQQSBtb2RlIScpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5fc3BfLnZlcnNpb24pIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdbU1BDUF0gU291cmNlcG9pbnQgYWxyZWFkeSBydW5uaW5nJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnW1NQQ1BdIFN0YXJ0aW5nIFNvdXJjZXBvaW50Jyk7CiAgICAgICAgICAgICAgICB3aW5kb3cuX3NwXy5leGVjdXRlTWVzc2FnaW5nKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ1tTUENQXSBTb3VyY2Vwb2ludCBub3QgbG9hZGVkIHlldC4gUmV0cnlpbmcuJyk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoc3BFeGVjTXNnLCAxMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KSgpOwogICAgICAgIH0KICAgIH0pOwogICAgfSkoKTsKPC9zY3JpcHQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgICAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9mYXZpY29uLmljbyIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBzaXplcz0iMTZ4MTYiIGhyZWY9Ii9mYXZpY29uLTE2eDE2LnBuZyI+CiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIHNpemVzPSIxOTJ4MTkyIiBocmVmPSIvYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmciPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9Mi4wLCB1c2VyLXNjYWxhYmxlPW5vIiAvPgo8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9Im5vaW5kZXgsIG5vZm9sbG93IiAvPgo8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iTGVhbmRybyBUcm9zc2FyZCxGQyBBcnNlbmFsLFByZW1pZXIgTGVhZ3VlLEJlbGdpdW0iIC8+CjxtZXRhIG5hbWU9ImRlc2NyaXB0aW9uIiBjb250ZW50PSJQbGF5ZXIgc3RhdHMgb2YgTGVhbmRybyBUcm9zc2FyZCAoRkMgQXJzZW5hbCkg4p6kIEdvYWxzIOKepCBBc3Npc3RzIOKepCBNYXRjaGVzIHBsYXllZCDinqQgQWxsIHBlcmZvcm1hbmNlIGRhdGEiIC8+CjxtZXRhIHByb3BlcnR5PSJvZzp0eXBlIiBjb250ZW50PSJhcnRpY2xlIiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6aW1hZ2UiIGNvbnRlbnQ9Imh0dHBzOi8vaW1nLmEudHJhbnNmZXJtYXJrdC50ZWNobm9sb2d5L3BvcnRyYWl0L2JpZy8xNDQwMjgtMTcwMjQxMjkzOS5qcGc/bG09MSIgLz4KPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIiBjb250ZW50PSIiIC8+CjxtZXRhIHByb3BlcnR5PSJvZzp0aXRsZSIgY29udGVudD0iTGVhbmRybyBUcm9zc2FyZCAtIFN0YXRzIDIzLzI0IiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvbS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9wbHVzLzA/c2Fpc29uPTIwMjMiIC8+CjxsaW5rIGhyZWZsYW5nPSJkZSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZGUvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZGUtTFUiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmRlL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImRlLUFUIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5hdC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJkZS1DSCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY2gvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0idHIiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvbS50ci9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJpdC1DSCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuaXQvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iaXQiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0Lml0L3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9InBsIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5wbC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlbi1HQiIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY28udWsvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZW4tSUUiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvLnVrL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVzIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5lcy9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1FUyIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZXMtQ0wiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmVzL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVzLVZFIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5lcy9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1FQyIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZXMtQ1UiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmVzL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9Im5sIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5ubC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJwdCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QucHQvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0icnUiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LndvcmxkL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9IndvcmxkIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC53b3JsZC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmci1DSCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZnIiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmZyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImZyLUNBIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5mci9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmci1DSSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZnItTFUiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmZyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImZyLUJFIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5mci9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJwdC1CUiIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY29tLmJyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVuLVVTIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC51cy9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlbi1DQSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QudXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZW4tSU4iIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvLmluL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVuLVpBIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jby56YS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJ4LWRlZmF1bHQiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvbS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlbiIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY29tL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9Im5sLUJFIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5iZS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJybyIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3Qucm8vcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZWwtR1IiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmdyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImtvLUtSIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jby5rci9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1BUiIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY29tLmFyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVzLU1YIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5teC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1DTyIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY28vcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZXMtUEUiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LnBlL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9Im1zIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5teS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJqYSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuanAvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iaWQiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvLmlkL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMCIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9zdHlsZXNoZWV0cy9tZW51ZS5jc3M/bG09MTcwMzE2NDAyNyIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L3N0eWxlcy90bS1tYWluLm1pbi5jc3M/bG09MTcwMzE2Mzk4MiIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9zdHlsZXNoZWV0cy9tYWluX2Rlc2t0b3AuY3NzP2xtPTE3MDMxNjQwMjciIC8+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9jc3MvcHJpbnQuY3NzP19zbj0xP2xtPTE3MDMxNjQwMjciIG1lZGlhPSJwcmludCIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9jaG9zZW4uY3NzP2xtPTE3MDMxNjQwMjciIC8+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9jc3Mvc3R5bGVzaGVldHMvbWFpbi5jc3M/bG09MTcwMzE2NDAyNyIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L3N0eWxlcy90bS1wbGF5ZXItcHJvZmlsZS5taW4uY3NzP2xtPTE3MDMxNjM5ODIiIC8+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9jc3MvZ2VzcGllbHRlUG9zaXRpb25lbi5jc3M/bG09MTcwMzE2NDAyNyIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9zdGF0aXN0aWtlbi5jc3M/bG09MTcwMzE2NDAyNyIgLz4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL3ZlbmRvci9qcXVlcnkubWluLmpzP2xtPTE3MDMxNjQwMDkiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvYXNzZXRzL2I3YzU1NzFjZjg5NTc1NTNmOTVmNmQ5MDY5ZWFlZDY3L2pxdWVyeS5iYS1iYnEubWluLmpzP2xtPTE3MDMxNjQwMDkiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvanMvbWFpbi5qcz9sbT0xNzAzMTY0MDA5Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL2Nob3Nlbi5hamF4YWRkaXRpb24uanF1ZXJ5LmpzP2xtPTE3MDMxNjQwMDkiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvanMvZnVuY3Rpb25zLmpzP2xtPTE3MDMxNjQwMDkiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvanMvbWFpbl9kZXNrdG9wLmpzP2xtPTE3MDMxNjQwMDkiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvanMvY2hvc2VuLmpxdWVyeS5qcz9sbT0xNzAzMTY0MDA5Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovKjwhW0NEQVRBWyovCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gSW5pdGlhbGl6ZSBBZHMgb24gZG9tYWluIGNvbSAod2V0dGJld2VyYmVfcHJvZmlsZV9zcGllbGVyIHwgc3BpZWxlci9sZWlzdHVuZ3NkYXRlbikiLCAiYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIFJlbmRlciByZWN0YW5nbGUxIChkaXYtZ3B0LWFkLTE2MjE1MjY0NjM1MTEtMCkgZm9yIGdvb2dsZSIsICJiYWNrZ3JvdW5kOiAjMjIyOyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gUmVuZGVyIHJlY3RhbmdsZTIgKGRpdi1ncHQtYWQtMTYyMTUyODAxODkzMC0wKSBmb3IgZ29vZ2xlIiwgImJhY2tncm91bmQ6ICMyMjI7IGNvbG9yOiAjYmFkYTU1IikKY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBSZW5kZXIgc2t5c2NyYXBlciAoZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTApIGZvciBnb29nbGUiLCAiYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIFJlbmRlciBza3lzY3JhcGVyYnRmIChkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCkgZm9yIGdvb2dsZSIsICJiYWNrZ3JvdW5kOiAjMjIyOyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gUmVuZGVyIGJpbGxib2FyZCAoZGl2LWdwdC1hZC0xNjIxNTI0OTAzOTU2LTApIGZvciBnb29nbGUiLCAiYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIFJlbmRlciBmdWxsc2l6ZV9jb250ZW50YWQgKGRpdi1ncHQtYWQtMTYyMTUyODE3MzUyNC0wKSBmb3IgZ29vZ2xlIiwgImJhY2tncm91bmQ6ICMyMjI7IGNvbG9yOiAjYmFkYTU1IikKY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBObyBhZCBjb25maWd1cmF0aW9uIGZvdW5kIGZvciByaWNobWVkaWEiLCAiYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUiKQogICAgdmFyIG9kZHNTZXJ2ZSA9IGZ1bmN0aW9uKHBsYWNlbWVudCxjb21wZXRpdGlvbixtYXRjaCxub2RlKSB7CiAgICAgICAgaWYgKCFub2RlKXsKICAgICAgICAgICAgdmFyIHM9ZG9jdW1lbnQucmVhZHlTdGF0ZT09PSdsb2FkaW5nJz9kb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk6W107CiAgICAgICAgICAgIG5vZGU9cy5sZW5ndGg/c1tzLmxlbmd0aC0xXS5wYXJlbnROb2RlOm51bGw7CiAgICAgICAgfQogICAgICAgIG9kZHNTZXJ2ZS5xdWV1ZS5wdXNoKHtjb250ZW50VW5pdElkOnBsYWNlbWVudCxjb21wZXRpdGlvbjpjb21wZXRpdGlvbixtYXRjaDptYXRjaCxub2RlOm5vZGV9KTsKICAgIH0KICAgIAogICAgb2Rkc1NlcnZlLm9uSW5pdD1mdW5jdGlvbihjYWxsYmFja3MpewogICAgICAgIGlmICh0eXBlb2Ygd2luZG93Ll9fdGNmYXBpID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgIF9fdGNmYXBpKCdhZGRFdmVudExpc3RlbmVyJywgMiwgZnVuY3Rpb24odGNkYXRhLCBzdWNjZXNzKSB7CiAgICAgICAgICAgICAgICBsZXQgdGNmMjBjb21wYXRpYmxlU3RyaW5nOwogICAgICAgICAgICAgICAgaWYoc3VjY2VzcykgewogICAgICAgICAgICAgICAgICAgIGlmICh0Y2RhdGEuZXZlbnRTdGF0dXMgPT09ICd1c2VyYWN0aW9uY29tcGxldGUnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHRjZjIwY29tcGF0aWJsZVN0cmluZyA9IHRjZGF0YS50Y1N0cmluZzsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRjZGF0YS5ldmVudFN0YXR1cyA9PT0gJ3RjbG9hZGVkJykgewogICAgICAgICAgICAgICAgICAgICAgICB0Y2YyMGNvbXBhdGlibGVTdHJpbmcgPSB0Y2RhdGEudGNTdHJpbmc7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zZXRHZHByT3B0aW9ucyh7CiAgICAgICAgICAgICAgICAgICAgICAgIGdkcHI6MSwKICAgICAgICAgICAgICAgICAgICAgICAgZ2Rwcl9wZDoxLAogICAgICAgICAgICAgICAgICAgICAgICBnZHByX2NvbnNlbnQ6dGNmMjBjb21wYXRpYmxlU3RyaW5nLAogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjb25zb2xlLndhcm4oJ0UyOiBfX3RjZmFwaSBub3QgZm91bmQnKTsKICAgICAgICB9CiAgICB9OwogICAgb2Rkc1NlcnZlLm9wdGlvbnM9e2dkcHJfd2FpdDp0cnVlfTsKICAgIG9kZHNTZXJ2ZS5xdWV1ZT1bXTsKY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBBZGQgaW5pdFNjcmlwdCBmb3Igc2xvdHM6IHJlY3RhbmdsZTEgfCByZWN0YW5nbGUyIHwgc2t5c2NyYXBlciB8IHNreXNjcmFwZXJidGYgfCBiaWxsYm9hcmQgfCBmdWxsc2l6ZV9jb250ZW50YWQiLCAiYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIFJlZ2lzdGVyIHNsb3RzIHdpdGggSlMgdmVuZG9yIGxpYiIsICJiYWNrZ3JvdW5kOiAjMjIyOyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gUmVuZGVyIGFkIHNsb3RzIGpzIGZvciBnb29nbGUiLCAiYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUiKQpQV1QgPSB7fTsKd2luZG93Lmdvb2dsZXRhZyA9IHdpbmRvdy5nb29nbGV0YWcgfHwge2NtZDogW119Owpnb29nbGV0YWcuY21kLnB1c2goKCkgPT4gewogIGdvb2dsZXRhZy5kZWZpbmVTbG90KAogICAgIi81ODc3ODE2NC9EZXNrdG9wLUJpbGxib2FyZC0xIiwKICAgIFtbOTYwLDkwXSxbOTcwLDI1MF0sWzk1MCw5MF0sWzcyOCw5MF0sWzk3MCw5MF1dLAogICAgImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIgogICkgCi5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7CiAgZ29vZ2xldGFnLmRlZmluZVNsb3QoCiAgICAiLzU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTEiLAogICAgW1szMDAsMjUwXSxbMzM2LDI4MF1dLAogICAgImRpdi1ncHQtYWQtMTYyMTUyNjQ2MzUxMS0wIgogICkgCi5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7CiAgZ29vZ2xldGFnLmRlZmluZVNsb3QoCiAgICAiLzU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLAogICAgW1szMDAsMjUwXSxbMzM2LDI4MF1dLAogICAgImRpdi1ncHQtYWQtMTYyMTUyODAxODkzMC0wIgogICkgCi5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7CiAgZ29vZ2xldGFnLmRlZmluZVNsb3QoCiAgICAiLzU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0xIiwKICAgIFtbMTYwLDYwMF0sWzMzNiwyODBdLFszMDAsMjUwXSxbMzAwLDYwMF0sWzEyMCwgNjAwXV0sCiAgICAiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiCiAgKSAKLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsKICBnb29nbGV0YWcuZGVmaW5lU2xvdCgKICAgICIvNTg3NzgxNjQvRGVza3RvcC1Ta3lzY3JhcGVyLTIiLAogICAgW1szMDAsMjUwXSxbMzM2LDI4MF0sWzE2MCw2MDBdLFszMDAsNjAwXSxbMTIwLCA2MDBdXSwKICAgICJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIKICApIAouYWRkU2VydmljZShnb29nbGV0YWcucHViYWRzKCkpOwogIGdvb2dsZXRhZy5kZWZpbmVTbG90KAogICAgIi81ODc3ODE2NC9EZXNrdG9wLUJpbGxib2FyZC0yIiwKICAgIFtbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV0sCiAgICAiZGl2LWdwdC1hZC0xNjIxNTI4MTczNTI0LTAiCiAgKSAKLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsKICBnb29nbGV0YWcucHViYWRzKCkuZW5hYmxlTGF6eUxvYWQoewogICAgZmV0Y2hNYXJnaW5QZXJjZW50OiA1MDAsCiAgICByZW5kZXJNYXJnaW5QZXJjZW50OiAyMDAsCiAgICBtb2JpbGVTY2FsaW5nOiAyLjAKICB9KTsKICBnb29nbGV0YWcucHViYWRzKCkuc2V0Q2VudGVyaW5nKHRydWUpOwogIGdvb2dsZXRhZy5wdWJhZHMoKS5kaXNhYmxlSW5pdGlhbExvYWQoKTsKICBnb29nbGV0YWcucHViYWRzKCkuZW5hYmxlU2luZ2xlUmVxdWVzdCgpOwogIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoImNnMSIsIFsic3BpZWxlciJdKTsKICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCJVUkwiLCAid3d3LnRyYW5zZmVybWFya3QuY29tIik7CiAgZ29vZ2xldGFnLmVuYWJsZVNlcnZpY2VzKCk7Cn0pOwoKY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBBZGRlZCBleHRlcm5hbCBhZCBzY3JpcHQocykgZm9yIHZlbmRvciBnb29nbGUiLCAiYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUiKQovKl1dPiovCjwvc2NyaXB0Pgo8dGl0bGU+TGVhbmRybyBUcm9zc2FyZCAtIFN0YXRzIDIzLzI0IHwgVHJhbnNmZXJtYXJrdDwvdGl0bGU+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIGhyZWY9Ii9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nIj4KICAgICAgICAgICAgPGxpbmsgcmVsPSJwcmVsb2FkIiBocmVmPSIvL2RhdGEtODRhMGYzNDU1ZC50cmFuc2Zlcm1hcmt0LmNvbS9pb21tL2xhdGVzdC9tYW5hZ2VyL2Jhc2UvZXM2L2J1bmRsZS5qcyIgYXM9InNjcmlwdCIgaWQ9IklPTW1CdW5kbGUiPgogICAgICAgIDxsaW5rIHJlbD0icHJlbG9hZCIgaHJlZj0iLy9kYXRhLTg0YTBmMzQ1NWQudHJhbnNmZXJtYXJrdC5jb20vaW9tbS9sYXRlc3QvYm9vdHN0cmFwL2xvYWRlci5qcyIgYXM9InNjcmlwdCI+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iLy9kYXRhLTg0YTBmMzQ1NWQudHJhbnNmZXJtYXJrdC5jb20vaW9tbS9sYXRlc3QvYm9vdHN0cmFwL2xvYWRlci5qcyI+PC9zY3JpcHQ+CiAgICAKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICB0bURhdGEgPSB7CiAgICAgICBsb2dnZWRJbiA6ICIwIiwKICAgICAgIHRtVHJhZmZpYzogIjAiLAogICB9Owo8L3NjcmlwdD4KPHNjcmlwdD4vLyBTZXQgdG8gdGhlIHNhbWUgdmFsdWUgYXMgdGhlIHdlYiBwcm9wZXJ0eSB1c2VkIG9uIHRoZSBzaXRlCgkJdmFyIGdhUHJvcGVydHkgPSAnVUEtMzgxNjIwNC0xMyc7CgoJCS8vIERpc2FibGUgdHJhY2tpbmcgaWYgdGhlIG9wdC1vdXQgY29va2llIGV4aXN0cy4KCQl2YXIgZGlzYWJsZVN0ciA9ICdnYS1kaXNhYmxlLScgKyBnYVByb3BlcnR5OwoJCWlmIChkb2N1bWVudC5jb29raWUuaW5kZXhPZihkaXNhYmxlU3RyICsgJz10cnVlJykgPiAtMSkgewoJCQl3aW5kb3dbZGlzYWJsZVN0cl0gPSB0cnVlOwoJCX0KCgkJLy8gT3B0LW91dCBmdW5jdGlvbgoJCWZ1bmN0aW9uIGdhT3B0b3V0KCkgewoJCQlkb2N1bWVudC5jb29raWUgPSBkaXNhYmxlU3RyICsgJz10cnVlOyBleHBpcmVzPVRodSwgMzEgRGVjIDIwOTkgMjM6NTk6NTkgVVRDOyBwYXRoPS8nOwoJCQl3aW5kb3dbZGlzYWJsZVN0cl0gPSB0cnVlOwoJCX08L3NjcmlwdD4KCTxzY3JpcHQ+Cgl3aW5kb3cuZGF0YUxheWVyID0gd2luZG93LmRhdGFMYXllciB8fCBbXTsKCWZ1bmN0aW9uIGd0YWcoKSB7IGRhdGFMYXllci5wdXNoKGFyZ3VtZW50cyk7IH0gCiAgIGd0YWcoJ3NldCcsICdsaW5rZXInLCB7ICdkb21haW5zJzogWy9edHJhbnNmZXJtYXJrdFwuKGNvbXxkZXxubHxpdHxhdHxjaHxlc3xmcnxjb21cLnRyfHB0fHR2fHBsfGNvXC51aykkL119KTsKICAgZ3RhZygnanMnLCBuZXcgRGF0ZSgpKTsgCiAgIGd0YWcoJ3NldCcsCiAgewogICAgJ2N1c3RvbV9tYXAnOiB7CiAgICAgICAgICAgICAgICAgICAgJ2RpbWVuc2lvbjEnOiAnbG9nZ2VkSW4nLAogICAgICAgICAgICAgICAgICAgICdkaW1lbnNpb24yJzogJ3RtVHJhZmZpYycKICAgICAgICAgICAgICAgIH0KICB9KTsKICAgICAgICBndGFnKCdjb25maWcnLCAnVUEtMzgxNjIwNC0xMycsIHsKICAgICAgICAgICAgICAgICdhbm9ueW1pemVfaXAnOiB0cnVlLAogICAgICAgICAgICAgICAgJ3RyYW5zcG9ydF90eXBlJzogJ2JlYWNvbicsCiAgICAgICAgICAgICAgICAnY29udGVudF9ncm91cDEnOiAnc3RhdGlzdGlrJywKICAgICAgICAgICAgICAgICdjb250ZW50X2dyb3VwMic6ICdzcGllbGVyJywKICAgICAgICAgICAgICAgICdjb250ZW50X2dyb3VwMyc6ICdsZWlzdHVuZ3NkYXRlbicsCiAgICAgICAgICAgICAgICAnY29udGVudF9ncm91cDQnOiAnMTQ0MDI4JywKICAgICAgICAgICAgICAgICdsb2dnZWRJbic6IHRtRGF0YS5sb2dnZWRJbiwKICAgICAgICAgICAgICAgICd0bVRyYWZmaWMnOiB0bURhdGEudG1UcmFmZmljCiAgICAgICAgICAgIH0pOyAKICAgZnVuY3Rpb24gdG1FdmVudChjYXRlZ29yeSwgYWN0aW9uLCBsYWJlbCkgewogICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBndGFnICE9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZ3RhZygnZXZlbnQnLAogICAgICAgICAgICAgICAgICAgIGFjdGlvbiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICdldmVudF9jYXRlZ29yeSc6IGNhdGVnb3J5LAogICAgICAgICAgICAgICAgICAgICAgICAnZXZlbnRfbGFiZWwnOiBsYWJlbAogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIHRtVGltaW5nKHZhbHVlLCBuYW1lLCBldmVudF9jYXRlZ29yeSwgZXZlbnRfbGFiZWwpIHsKICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZ3RhZyAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGd0YWcoJ2V2ZW50JywgJ3RpbWluZ19jb21wbGV0ZScsIHsKICAgICAgICAgICAgICAgICAgICBuYW1lLAogICAgICAgICAgICAgICAgICAgIHZhbHVlLAogICAgICAgICAgICAgICAgICAgIGV2ZW50X2NhdGVnb3J5LAogICAgICAgICAgICAgICAgICAgIGV2ZW50X2xhYmVsCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKCTwvc2NyaXB0PiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvL2Fkcy9hZHMuanMiPjwvc2NyaXB0PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgIHdpbmRvdy50bUdhSWQgPSAiVUEtMzgxNjIwNC0xMyI7CiAgICA8L3NjcmlwdD4KCiAgICAgICAgICAgIDxsaW5rIHJlbD0iY2Fub25pY2FsIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvbS9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4Ij4KICAgIDwhLS0gbm8gVGlzb29taSAtLT4KICAgIDwvaGVhZD4KCjxib2R5IGNsYXNzPSIiIGl0ZW1zY29wZSBpdGVtdHlwZT0iaHR0cDovL3NjaGVtYS5vcmcvV2ViUGFnZSIgZGF0YS10bS10bGQ9ImNvbSIgZGF0YS1jbXAtbGF5ZXItaWQ9IjkxMDE2NCI+CiAgICAKICAgICAgICAgICAgICAgIDx0bS1sYW5ndWFnZS1oaW50PjwvdG0tbGFuZ3VhZ2UtaGludD4KICAgICAgICA8ZGl2IGlkPSJtYWluIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IndlcmJ1bmctc2t5c2NyYXBlci1jb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3ZXJidW5nIHdlcmJ1bmctc2t5c2NyYXBlciI+CiAgPGRpdiBpZD0iZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiIHN0eWxlPSJtaW4td2lkdGg6IDE2MHB4OyBtaW4taGVpZ2h0OiAyNTBweDsiPgo8c2NyaXB0Pmdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7IGdvb2dsZXRhZy5kaXNwbGF5KCJkaXYtZ3B0LWFkLTE2MjE1Mjc1MjE5MzktMCIpOyB9KTs8L3NjcmlwdD4KICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9IndlcmJ1bmctc2t5c2NyYXBlcmJ0Zi1jb250YWluZXIiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3ZXJidW5nIHdlcmJ1bmctc2t5c2NyYXBlcmJ0ZiI+CiAgPGRpdiBpZD0iZGl2LWdwdC1hZC0xNjIxNTI4MTIzMzk4LTAiIHN0eWxlPSJtaW4td2lkdGg6IDE2MHB4OyBtaW4taGVpZ2h0OiAyNTBweDsiPgo8c2NyaXB0Pmdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7IGdvb2dsZXRhZy5kaXNwbGF5KCJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIpOyB9KTs8L3NjcmlwdD4KICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgPGhlYWRlciBjbGFzcz0idG0taGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRtLWhlYWRlcl9fYm94ICI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iLyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpY29uLWxvZ28iIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaGVhZC90cmFuc2Zlcm1hcmt0X2xvZ28uc3ZnIiBoZWlnaHQ9IjYyIiB3aWR0aD0iMTU2IiB0aXRsZT0iVHJhbnNmZXJtYXJrdCIgYWx0PSJUcmFuc2Zlcm1hcmt0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRtLWRvbWFpbnN3aXRjaGVyIG9wZW4tbGlzdD0iZmFsc2UiIHRsZD0iY29tIj48L3RtLWRvbWFpbnN3aXRjaGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRtLWhlYWRlcl9fc29jaWFsLWJveCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9UcmFuc2Zlcm1hcmt0Lmdsb2JhbCIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJoZWFkZXJfX3NvY2lhbC1saW5rIiBvbmNsaWNrPSJ0bUV2ZW50KCdTTS1JY29uc19IZWFkZXInLCdjbGljaycsJ0ZhY2Vib29rJyk7CiI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3NvY2lhbE1lZGlhL2ZiX2ljb25faG92ZXIuc3ZnIiB3aWR0aD0iMjAiIGhlaWdodD0iMjAiIGNsYXNzPSJoZWFkZXJfX2ljb24iPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly90d2l0dGVyLmNvbS9UTXVrX25ld3MiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iaGVhZGVyX19zb2NpYWwtbGluayBoZWFkZXJfX3NvY2lhbC1saW5rLS10d2l0dGVyIiBvbmNsaWNrPSJ0bUV2ZW50KCdTTS1JY29uc19IZWFkZXInLCdjbGljaycsJ1R3aXR0ZXInKTsKIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvc29jaWFsTWVkaWEvdHdpdHRlci5zdmciIHdpZHRoPSIyMCIgaGVpZ2h0PSIyMCIgY2xhc3M9ImhlYWRlcl9faWNvbiBoZWFkZXJfX2ljb24tLXR3aXR0ZXIiPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cDovL2luc3RhZ3JhbS5jb20vdHJhbnNmZXJtYXJrdF9vZmZpY2lhbCIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJoZWFkZXJfX3NvY2lhbC1saW5rIiBvbmNsaWNrPSJ0bUV2ZW50KCdTTS1JY29uc19IZWFkZXInLCdjbGljaycsJ0luc3RhZ3JhbScpOwoiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy9zb2NpYWxNZWRpYS9pbnN0YWdyYW1faWNvbl9ob3Zlci5zdmciIHdpZHRoPSIyMCIgaGVpZ2h0PSIyMCIgY2xhc3M9ImhlYWRlcl9faWNvbiI+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvaW50ZXJuL3Jzc2d1aWRlIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImhlYWRlcl9fc29jaWFsLWxpbmsiIG9uY2xpY2s9InRtRXZlbnQoJ1NNLUljb25zX0hlYWRlcicsJ2NsaWNrJywnUlNTJyk7CiI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3NvY2lhbE1lZGlhL3Jzc19pY29uX2hvdmVyLnN2ZyIgd2lkdGg9IjIwIiBoZWlnaHQ9IjIwIiBjbGFzcz0iaGVhZGVyX19pY29uIj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnRpa3Rvay5jb20vQHRyYW5zZmVybWFya3QiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iaGVhZGVyX19zb2NpYWwtbGluayIgb25jbGljaz0idG1FdmVudCgnU00tSWNvbnNfSGVhZGVyJywnY2xpY2snLCdUaWt0b2snKTsKIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvdGlrdG9rUmVicnVzaC5zdmciIHdpZHRoPSIyMCIgaGVpZ2h0PSIyMCIgY2xhc3M9ImhlYWRlcl9faWNvbiI+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0bS1oZWFkZXJfX2lucHV0LXdyYXBwZXIgIiBpZD0ic2NobmVsbHN1Y2hlLXBsYXR6Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmb3JtIG5hbWU9InNjaG5lbGxzdWNoZSIgaWQ9InNjaG5lbGxzdWNoZSIgY2xhc3M9InRtLWhlYWRlcl9fZm9ybSIgYWN0aW9uPSIvc2NobmVsbHN1Y2hlL2VyZ2VibmlzL3NjaG5lbGxzdWNoZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InF1ZXJ5IiBjbGFzcz0idG0taGVhZGVyX19pbnB1dC0tc2VhcmNoLWZpZWxkIiBvbkNsaWNrPSIiIHBsYWNlaG9sZGVyPSJFbnRlciB5b3VyIHNlYXJjaCB0ZXJtIiBhdXRvY29ycmVjdD0ib2ZmIiBzcGVsbGNoZWNrPSJmYWxzZSIgdmFsdWU9IiIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiB2YWx1ZT0iIiBjbGFzcz0idG0taGVhZGVyX19pbnB1dC0tc2VhcmNoLXNlbmQiIGFsdD0ic2VhcmNoIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2RldGFpbHN1Y2hlL3NwaWVsZXJkZXRhaWwvc3VjaGUiIHRpdGxlPSJ0byBkZXRhaWxlZCBwbGF5ZXIgc2VhcmNoIiBpZD0iZGV0YWlsc3VjaGUtaGVhZCIgY2xhc3M9InRtLWhlYWRlcl9fc2VhcmNoLWRldGFpbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3NlYXJjaF9pY29uX3BsdXNfYmx1ZV93aGl0ZS5zdmciIGFsdD0ic2VhcmNoIiBjbGFzcz0idG0taGVhZGVyX19pY29uLWRldGFpbC1zZWFyY2giIGhlaWdodD0iMjYiIHdpZHRoPSIyNiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgCiAgICAgICAgICAgIDxuYXYgY2xhc3M9Im1haW4tbmF2YmFyIG5hdmloYWx0ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im1haW4tbmF2YmFyX19jb250YWluZXIgbWVnYW1lbnVfZGFya19iYXIgbWVnYW1lbnVfZGFyayIgaXRlbXNjb3BlPSJpdGVtc2NvcGUiIGl0ZW10eXBlPSJodHRwOi8vd3d3LnNjaGVtYS5vcmcvU2l0ZU5hdmlnYXRpb25FbGVtZW50Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvIiBjbGFzcz0ic3RpY2t5LWxvZ28gaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IlRyYW5zZmVybWFya3QiIGNsYXNzPSJ0bV9zdmciPjwvc3Bhbj4KICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAKICAgIDxsaSBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QiIGRhdGEtbmF2LWdyb3VwPSJuZXdzIj4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgIGNsYXNzPSJtYWluLW5hdmJhcl9fbGlzdC10aXRsZSB0bS1tYWluLW5hdi1lbCIKICAgICAgICAgICAgb25DbGljaz0idG1FdmVudCgnTmV3cycsJ2NsaWNrJywnbWVudScpOwoiCiAgICAgICAgICAgID4KICAgICAgICAgICAgTmV3cyAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4tbmF2YmFyX19kcm9wLWRvd24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvdG1fc3Bpbm5lcl9pbnZlcnRlZC5taW4uc3ZnIiB3aWR0aD0iNDAiIGhlaWdodD0iNDAiIGNsYXNzPSJuYXZpZ2F0aW9uLWxvYWRpbmctc3Bpbm5lciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPGxpIGNsYXNzPSJtYWluLW5hdmJhcl9fbGlzdCIgZGF0YS1uYXYtZ3JvdXA9InRyYW5zZmVycyI+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QtdGl0bGUgdG0tbWFpbi1uYXYtZWwiCiAgICAgICAgICAgIG9uQ2xpY2s9InRtRXZlbnQoJ1RyYW5zZmVycyAmIEdlcsO8Y2h0ZScsJ2NsaWNrJywnbWVudScpOwoiCiAgICAgICAgICAgID4KICAgICAgICAgICAgVHJhbnNmZXJzICYgcnVtb3VycyAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4tbmF2YmFyX19kcm9wLWRvd24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvdG1fc3Bpbm5lcl9pbnZlcnRlZC5taW4uc3ZnIiB3aWR0aD0iNDAiIGhlaWdodD0iNDAiIGNsYXNzPSJuYXZpZ2F0aW9uLWxvYWRpbmctc3Bpbm5lciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPGxpIGNsYXNzPSJtYWluLW5hdmJhcl9fbGlzdCIgZGF0YS1uYXYtZ3JvdXA9Im1hcmt0d2VydGUiPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0LXRpdGxlIHRtLW1haW4tbmF2LWVsIgogICAgICAgICAgICBvbkNsaWNrPSJ0bUV2ZW50KCdNYXJrdHdlcnRlJywnY2xpY2snLCdtZW51Jyk7CiIKICAgICAgICAgICAgPgogICAgICAgICAgICBNYXJrZXQgdmFsdWVzICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbi1uYXZiYXJfX2Ryb3AtZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy90bV9zcGlubmVyX2ludmVydGVkLm1pbi5zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgY2xhc3M9Im5hdmlnYXRpb24tbG9hZGluZy1zcGlubmVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8bGkgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0IGFrdGl2IiBkYXRhLW5hdi1ncm91cD0id2V0dGJld2VyYmUiPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0LXRpdGxlIHRtLW1haW4tbmF2LWVsIgogICAgICAgICAgICBvbkNsaWNrPSJ0bUV2ZW50KCdXZXR0YmV3ZXJiZScsJ2NsaWNrJywnbWVudScpOwoiCiAgICAgICAgICAgID4KICAgICAgICAgICAgQ29tcGV0aXRpb25zICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbi1uYXZiYXJfX2Ryb3AtZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy90bV9zcGlubmVyX2ludmVydGVkLm1pbi5zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgY2xhc3M9Im5hdmlnYXRpb24tbG9hZGluZy1zcGlubmVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8bGkgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0IiBkYXRhLW5hdi1ncm91cD0iZm9yZW4iPgogICAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0LXRpdGxlIHRtLW1haW4tbmF2LWVsIgogICAgICAgICAgICBocmVmPSIvdWViZXJzaWNodC9pbmRleC9mb3J1bS9jb20iCiAgICAgICAgICAgIG9uQ2xpY2s9InRtRXZlbnQoJ0ZvcmVuJywnY2xpY2snLCdtZW51Jyk7CiIKICAgICAgICAgICAgPgogICAgICAgICAgICBGb3J1bXMgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLW5hdmJhcl9fZHJvcC1kb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3RtX3NwaW5uZXJfaW52ZXJ0ZWQubWluLnN2ZyIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBjbGFzcz0ibmF2aWdhdGlvbi1sb2FkaW5nLXNwaW5uZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDxsaSBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QiIGRhdGEtbmF2LWdyb3VwPSJtZWludG0iPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0LXRpdGxlIHRtLW1haW4tbmF2LWVsIgogICAgICAgICAgICBvbkNsaWNrPSJ0bUV2ZW50KCdNZWluVE0nLCdjbGljaycsJ21lbnUnKTsKIgogICAgICAgICAgICA+CiAgICAgICAgICAgIE15IFRNICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbi1uYXZiYXJfX2Ryb3AtZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy90bV9zcGlubmVyX2ludmVydGVkLm1pbi5zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgY2xhc3M9Im5hdmlnYXRpb24tbG9hZGluZy1zcGlubmVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8bGkgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0IiA+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QtdGl0bGUgdG0tbWFpbi1uYXYtZWwgbGl2ZS1uYXZpbGluayIKICAgICAgICAgICAgaHJlZj0iL3RpY2tlci9pbmRleC9saXZlIgogICAgICAgICAgICBvbkNsaWNrPSJ0bUV2ZW50KCdMaXZlJywnY2xpY2snLCdtZW51Jyk7CiIKICAgICAgICAgICAgPgogICAgICAgICAgICBMaXZlICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0bS1saXZlLW1hdGNoLWNvdW50ZXIgYXV0by1yZXF1ZXN0PSJ0cnVlIiBjb250ZW50PSdbIkxpdmUgbWFjaGVzIiwgIkxpdmUgbWF0Y2hlcyJdJz48L3RtLWxpdmUtbWF0Y2gtY291bnRlcj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CjwvdWw+CgogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA8Zm9ybSBuYW1lPSJzY2huZWxsc3VjaGUiIGlkPSJzY2huZWxsc3VjaGUtc3RpY2t5IiBjbGFzcz0ibm9jbG9zZSBzdGlja3ktc3VjaGUiIGFjdGlvbj0iL3NjaG5lbGxzdWNoZS9lcmdlYm5pcy9zY2huZWxsc3VjaGUiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBuYW1lPSJxdWVyeSIgY2xhc3M9ImhlYWRlci1zdWNoZSIgb25DbGljaz0iIiBwbGFjZWhvbGRlcj0iRW50ZXIgeW91ciBzZWFyY2ggdGVybSIgLz4KICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaW1hZ2UiIGNsYXNzPSJoZWFkZXItc3VjaGUtYWJzY2hpY2tlbiIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvL2ltYWdlcy9zdWNoaWNvbi5wbmciIGFsdD0ic2VhcmNoIiAvPgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL2RldGFpbHN1Y2hlL3NwaWVsZXJkZXRhaWwvc3VjaGUiIHRpdGxlPSJ0byBkZXRhaWxlZCBwbGF5ZXIgc2VhcmNoIiBpZD0iZGV0YWlsc3VjaGUtaGVhZCIgY2xhc3M9ImhlYWRlci1zdWNoZS1kZXRhaWxzdWNoZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24tZGV0YWlsc3VjaGUiPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImFycm93LXVwLXh5IiBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHN2ZyBzdHlsZT0iZmlsbDogd2hpdGU7IHdpZHRoOiAyMHB4OyBoZWlnaHQ6IDIwcHg7IiB2ZXJzaW9uPSIxLjEiIGlkPSJMYXllcl8xIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4PSIwcHgiIHk9IjBweCIgd2lkdGg9IjEwMHB4IiBoZWlnaHQ9IjEwMHB4IiB2aWV3Qm94PSIwIDAgMTAwIDEwMCIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMTAwIDEwMCIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Zz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBkPSJNNzguMDE2LDQ5LjEzMkw1MS45NjEsMTIuNzE0Yy0wLjQ3MS0wLjY2LTEuMjMzLTEuMDQ5LTIuMDQzLTEuMDUxYy0wLjAwNiwwLTAuMDA2LDAtMC4wMDYsMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMtMC44MTUsMC4wMDItMS41NzUsMC4zOTYtMi4wNDgsMS4wNTlMMjEuOTc3LDQ5LjE0Yy0wLjU0NiwwLjc2Ny0wLjYxNiwxLjc3Ni0wLjE4MywyLjYxMmMwLjQyNiwwLjgzNSwxLjI5MiwxLjM2MSwyLjIzNiwxLjM2MQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGgxMi4xODNsLTAuMDAxLDMyLjcwOWMwLDEuMzksMS4xMjUsMi41MTUsMi41MTYsMi41MTVsMjIuNTQxLTAuMDAxYzEuMzg5LDAuMDAxLDIuNTE1LTEuMTI0LDIuNTE2LTIuNTE3bDAtMzIuNzA1aDEyLjE4NwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMwLjk0LDAsMS44MDMtMC41MywyLjIzNy0xLjM2N0M3OC42NDEsNTAuOTExLDc4LjU2Niw0OS45LDc4LjAxNiw0OS4xMzJ6IiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9nPgogICAgICAgICAgICAgICAgICAgICAgICA8L3N2Zz4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0bS1sb2dpbiAiIGlkPSJsb2dpbiIgb25DbGljaz0idG1FdmVudCgnbG9naW4nLCdjbGljaycsJ3NpZ25faW5fYnV0dG9uJyk7CiI+CiAgICA8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgogICAgIGZpbGw9IiNGRkYiIHdpZHRoPSIxMDBweCIgaGVpZ2h0PSIxMDBweCIgdmlld0JveD0iMCAwIDEwMCAxMDAiIGVuYWJsZS1iYWNrZ3JvdW5kPSJuZXcgMCAwIDEwMCAxMDAiIHhtbDpzcGFjZT0icHJlc2VydmUiIGNsYXNzPSJ0bS1sb2dpbl9faW1hZ2UiPgogICAgICAgIDxnPgogICAgICAgICAgICA8cGF0aCBkPSJNODAuMTYxLDYwLjQ0MWwtMTUuNjYtNy40N2wtNi42MjItMy4xNTljMi44OTItMS44MjIsNS4yNDEtNC42MzQsNi43NzgtOC4wMjJjMS4yMi0yLjY5LDEuOTQ2LTUuNzM0LDEuOTQ2LTguOTkKICAgICAgICAgICAgICAgIGMwLTEuODI3LTAuMjktMy41NjItMC42OTQtNS4yMzZDNjMuOTQsMTkuNDUzLDU3LjYwNSwxMy40NzcsNTAsMTMuNDc3Yy03LjQ2MSwwLTEzLjcwMSw1Ljc2My0xNS43OTIsMTMuNjQ1CiAgICAgICAgICAgICAgICBjLTAuNDgyLDEuODA4LTAuODE1LDMuNjg4LTAuODE1LDUuNjhjMCwzLjQ1OSwwLjgwOCw2LjY4NCwyLjE4MSw5LjQ4OWMxLjU4NywzLjI1NCwzLjk0LDUuOTM3LDYuODA0LDcuNjYybC02LjM0MiwyLjk1MwogICAgICAgICAgICAgICAgbC0xNi4xNjgsNy41M2MtMS40MDQsMC42NTgtMi4zMjcsMi4yNDItMi4zMjcsNC4wMTF2MTUuMDYydjIuNzAzYzAsMi4zODEsMS42NTksNC4zMTIsMy43MDgsNC4zMTJoNTcuNTA1CiAgICAgICAgICAgICAgICBjMi4wNDgsMCwzLjcwOC0xLjkzLDMuNzA4LTQuMzEydi0yLjcwM1Y2NC40NDZDODIuNDYsNjIuNjgzLDgxLjU1Miw2MS4xMTQsODAuMTYxLDYwLjQ0MXoiLz4KICAgICAgICA8L2c+CiAgICA8L3N2Zz4KICAgIDxzcGFuIGNsYXNzPSJ0bS1sb2dpbl9fY3RhIj4KICAgICAgICBMb2cgaW4gICAgPC9zcGFuPgo8L2Rpdj4KICAgICAgICAgICAgPC9uYXY+CgogICAgICAgICAgICAKICAgICAgICAgICAgPGRpdiBjbGFzcz0icXVpY2stc2VsZWN0LXdyYXBwZXIiPgogICAgPGRpdiBpZD0icXVpY2tzZWxlY3Qtc2tlbGV0b24iIGNsYXNzPSJzc2MiIHN0eWxlPSJoZWlnaHQ6IDQwcHg7Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJzc2Mtd3JhcHBlciBmbGV4IiBzdHlsZT0iaGVpZ2h0OiAxMDAlOyBwYWRkaW5nOiAwIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3NjLXNxdWFyZSBxdWlja3NlbGVjdC1lbGVtZW50IiBzdHlsZT0id2lkdGg6IDQwcHg7Ij48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3NjLXNxdWFyZSBxdWlja3NlbGVjdC1lbGVtZW50IHF1aWNrc2VsZWN0LXNlbGVjdG9yIiBzdHlsZT0id2lkdGg6IDE3MS4wNnB4OyI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNzYy1zcXVhcmUgcXVpY2tzZWxlY3QtZWxlbWVudCBxdWlja3NlbGVjdC1zZWxlY3RvciIgc3R5bGU9IndpZHRoOiAxNzAuODRweDsiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzc2Mtc3F1YXJlIHF1aWNrc2VsZWN0LWVsZW1lbnQgcXVpY2tzZWxlY3Qtc2VsZWN0b3IiIHN0eWxlPSJ3aWR0aDogMTM4LjAzcHg7Ij48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3NjLXNxdWFyZSBxdWlja3NlbGVjdC1lbGVtZW50IHF1aWNrc2VsZWN0LXNlbGVjdG9yIiBzdHlsZT0id2lkdGg6IDE0MS41cHg7Ij48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDx0bS1xdWljay1zZWxlY3QtYmFyCiAgICAgICAgZGVmYXVsdC1jb3VudHJ5PSIxODkiCiAgICAgICAgZGVmYXVsdC1jb21wZXRpdGlvbj0iR0IxIgogICAgICAgIGRlZmF1bHQtY2x1Yj0iMTEiCiAgICAgICAgZGVmYXVsdC1wbGF5ZXI9IjE0NDAyOCIKICAgICAgICBkcm9wZG93bi12aXNpYmxlPSIiCiAgICAgICAgdHJhbnNsYXRpb25zPSd7JnF1b3Q7aG9tZSZxdW90OzomcXVvdDtIb21lJnF1b3Q7LCZxdW90O2NvdW50cnkmcXVvdDs6JnF1b3Q7Q291bnRyeSZxdW90OywmcXVvdDtjb21wZXRpdGlvbiZxdW90OzomcXVvdDtDb21wZXRpdGlvbiZxdW90OywmcXVvdDtjbHViJnF1b3Q7OiZxdW90O0NsdWImcXVvdDssJnF1b3Q7cGxheWVyJnF1b3Q7OiZxdW90O1BsYXllciZxdW90OywmcXVvdDthdHRhY2smcXVvdDs6JnF1b3Q7U3RyaWtlciZxdW90OywmcXVvdDttaWRmaWVsZCZxdW90OzomcXVvdDtNaXR0ZWxmZWxkJnF1b3Q7LCZxdW90O2RlZmVuc2UmcXVvdDs6JnF1b3Q7RGVmZW5kZXImcXVvdDssJnF1b3Q7Z29hbGtlZXBlciZxdW90OzomcXVvdDtHb2Fsa2VlcGVyJnF1b3Q7fScKICAgICAgICA+CiAgICA8L3RtLXF1aWNrLXNlbGVjdC1iYXI+CjwvZGl2PgoKCiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndlcmJ1bmcgd2VyYnVuZy1iaWxsYm9hcmQiPgogIDxkaXYgaWQ9ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIiBzdHlsZT0ibWluLXdpZHRoOiA3MjhweDsgbWluLWhlaWdodDogOTBweDsiPgo8c2NyaXB0Pmdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7IGdvb2dsZXRhZy5kaXNwbGF5KCJkaXYtZ3B0LWFkLTE2MjE1MjQ5MDM5NTYtMCIpOyB9KTs8L3NjcmlwdD4KICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgPC9oZWFkZXI+CiAgICAgICAgPG1haW4+CgogICAgICAgICAgICAKICAgICAgICAgICAgCiAgICA8ZGl2IGlkPSJtb2RhbC0xIiBjbGFzcz0ibW9kYWwgbWljcm9tb2RhbC1zbGlkZSIgYXJpYS1oaWRkZW49InRydWUiIHRhYmluZGV4PSIxIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtb2RhbF9fb3ZlcmxheSIgdGFiaW5kZXg9Ii0xIiBkYXRhLWN1c3RvbS1jbG9zZT4KICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgY2xhc3M9Im1vZGFsX19jb250YWluZXIiCiAgICAgICAgICAgICAgICByb2xlPSJkaWFsb2ciCiAgICAgICAgICAgICAgICBhcmlhLW1vZGFsPSJ0cnVlIgogICAgICAgICAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PSJtb2RhbC0xLXRpdGxlIgogICAgICAgICAgICAgICAgZGF0YS1jdXN0b20tY2xvc2UKICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxoZWFkZXIgY2xhc3M9Im1vZGFsX19oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgIDxidXR0b24KICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9Im1vZGFsX19jbG9zZSBtb2RhbF9fY2xvc2UtLXByb2ZpbGUtaW1nIgogICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPSJDbG9zZSBtb2RhbCIKICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1jdXN0b20tY2xvc2UKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgPC9oZWFkZXI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtb2RhbC0xLWNvbnRlbnQiIGNsYXNzPSJtb2RhbF9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0naHR0cHM6Ly9pbWcuYS50cmFuc2Zlcm1hcmt0LnRlY2hub2xvZ3kvcG9ydHJhaXQvYmlnLzE0NDAyOC0xNzAyNDEyOTM5LmpwZz9sbT0xJyBhbHQ9J0xlYW5kcm8gVHJvc3NhcmQnIHRpdGxlPSdMZWFuZHJvIFRyb3NzYXJkJyBkYXRhLWN1c3RvbS1jbG9zZSBsb2FkaW5nPSJsYXp5Ij4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKCjxoZWFkZXIgY2xhc3M9ImRhdGEtaGVhZGVyIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHBzOi8vc2NoZW1hLm9yZy9QZXJzb24iPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19oZWFkbGluZS1jb250YWluZXIiPgogICAgICAgICAgICA8aDEgY2xhc3M9ImRhdGEtaGVhZGVyX19oZWFkbGluZS13cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19zaGlydC1udW1iZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAjMTkgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWFuZHJvIDxzdHJvbmc+VHJvc3NhcmQ8L3N0cm9uZz4gICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19iYWRnZS1jb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvZXJmb2xnZS9zcGllbGVyLzE0NDAyOCIgdGl0bGU9IkVuZ2xpc2ggU3VwZXIgQ3VwIHdpbm5lciIgY2xhc3M9ImRhdGEtaGVhZGVyX19zdWNjZXNzLWRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZXJmb2xnZS9oZWFkZXIvMzE2LnBuZz9sbT0xNTIwNjA2OTk5IiB0aXRsZT0iRW5nbGlzaCBTdXBlciBDdXAgd2lubmVyIiBhbHQ9IkVuZ2xpc2ggU3VwZXIgQ3VwIHdpbm5lciIgY2xhc3M9IiIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX3N1Y2Nlc3MtbnVtYmVyIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvZXJmb2xnZS9zcGllbGVyLzE0NDAyOCIgdGl0bGU9IkJlbGdpYW4gY2hhbXBpb24iIGNsYXNzPSJkYXRhLWhlYWRlcl9fc3VjY2Vzcy1kYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2VyZm9sZ2UvaGVhZGVyLzE4LnBuZz9sbT0xNDYxODQ3NDk5IiB0aXRsZT0iQmVsZ2lhbiBjaGFtcGlvbiIgYWx0PSJCZWxnaWFuIGNoYW1waW9uIiBjbGFzcz0iIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fc3VjY2Vzcy1udW1iZXIiPjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9lcmZvbGdlL3NwaWVsZXIvMTQ0MDI4IiB0aXRsZT0iQmVsZ2lhbiBjdXAgd2lubmVyIiBjbGFzcz0iZGF0YS1oZWFkZXJfX3N1Y2Nlc3MtZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9lcmZvbGdlL2hlYWRlci8xNTAucG5nP2xtPTE1MjA2MDY5OTkiIHRpdGxlPSJCZWxnaWFuIGN1cCB3aW5uZXIiIGFsdD0iQmVsZ2lhbiBjdXAgd2lubmVyIiBjbGFzcz0iIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fc3VjY2Vzcy1udW1iZXIiPjE8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19ib3gtLWJpZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9hcnNlbmFsLWZjL3N0YXJ0c2VpdGUvdmVyZWluLzExIiBjbGFzcz0iZGF0YS1oZWFkZXJfX2JveF9fY2x1Yi1saW5rIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyY3NldD0iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi9ub3JtcXVhZC8xMS5wbmc/bG09MTQ4OTc4Nzg1MCAxeCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL2hvbWVwYWdlV2FwcGVuMTUweDE1MC8xMS5wbmc/bG09MTQ4OTc4Nzg1MCAyeAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBhbHQ9IkFyc2VuYWwgRkMiIGhlaWdodD0iMTAwIiB3aWR0aD0iMTAwIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19jbHViLWluZm8iPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fY2x1YiIgaXRlbXByb3A9ImFmZmlsaWF0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgdGl0bGU9IkFyc2VuYWwgRkMiIGhyZWY9Ii9mYy1hcnNlbmFsL3N0YXJ0c2VpdGUvdmVyZWluLzExIj5BcnNlbmFsPC9hPiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPjxiciAvPiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2xlYWd1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGVhZ3VlLWxpbmsiIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zdGFydHNlaXRlL3dldHRiZXdlcmIvR0IxIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdmVyeXRpbnkvZ2IxLnBuZz9sbT0xNTIxMTA0NjU2IiB0aXRsZT0iUHJlbWllciBMZWFndWUiIGFsdD0iUHJlbWllciBMZWFndWUiIGNsYXNzPSIiIC8+UHJlbWllciBMZWFndWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+TGVhZ3VlIGxldmVsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS90aW55LzE4OS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkVuZ2xhbmQiIGFsdD0iRW5nbGFuZCIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+Rmlyc3QgVGllciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGFiZWwiPkpvaW5lZDogPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19jb250ZW50Ij5KYW4gMjAsIDIwMjM8L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+Q29udHJhY3QgZXhwaXJlczogPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19jb250ZW50Ij5KdW4gMzAsIDIwMjY8L3NwYW4+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICAgICAgPGRpdiBjbGFzcz0iZGF0YS1oZWFkZXJfX3Byb2ZpbGUtY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1vZGFsLXRyaWdnZXIiIGRhdGEtY3VzdG9tLW9wZW49Im1vZGFsLTEiIGlkPSJmb3RvYXVzd2FobE9lZmZuZW4iIHN0eWxlPSJjdXJzb3I6cG9pbnRlciIgb25jbGljaz0idG1FdmVudCgnc3BpZWxlcnByb2ZpbCcsJ2NsaWNrJywncHJvZmlsYmlsZCcpOyI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL2ltZy5hLnRyYW5zZmVybWFya3QudGVjaG5vbG9neS9wb3J0cmFpdC9oZWFkZXIvMTQ0MDI4LTE3MDI0MTI5MzkuanBnP2xtPTEiIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBhbHQ9IkxlYW5kcm8gVHJvc3NhcmQiIGNsYXNzPSJkYXRhLWhlYWRlcl9fcHJvZmlsZS1pbWFnZSIgaGVpZ2h0PSIxODEiIHdpZHRoPSIxMzkiIC8+PGRpdiBjbGFzcz0iYmlsZHF1ZWxsZSI+PHNwYW4gdGl0bGU9IklNQUdPIj5JTUFHTzwvc3Bhbj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im1vZGFsLXRyaWdnZXItaWNvbiI+Kzwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhLWhlYWRlcl9faW5mby1ib3ggIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0YS1oZWFkZXJfX2RldGFpbHMiPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhLWhlYWRlcl9faXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YS1oZWFkZXJfX2xhYmVsIj5EYXRlIG9mIGJpcnRoL0FnZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJiaXJ0aERhdGUiIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVjIDQsIDE5OTQgKDI5KSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGFiZWwiPlBsYWNlIG9mIGJpcnRoOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS90aW55LzE5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iQmVsZ2l1bSIgYWx0PSJCZWxnaXVtIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCIgaXRlbXByb3A9ImJpcnRoUGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXYXRlcnNjaGVpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+Q2l0aXplbnNoaXA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmF0aW9uYWxpdHkiIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3RpbnkvMTkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJCZWxnaXVtIiBhbHQ9IkJlbGdpdW0iIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVsZ2l1bSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRhdGEtaGVhZGVyX19pdGVtcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGFiZWwiPkhlaWdodDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGl0ZW1wcm9wPSJoZWlnaHQiIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSw3MiBtICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+UG9zaXRpb246CiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMZWZ0IFdpbmdlciAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhLWhlYWRlcl9faXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBmb3I9IiIgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEN1cnJlbnQgaW50ZXJuYXRpb25hbDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS90aW55LzE5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iQmVsZ2l1bSIgYWx0PSJCZWxnaXVtIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiBmbGFnZ2UiIC8+PGEgdGl0bGU9IkJlbGdpdW0iIGhyZWY9Ii9iZWxnaWVuL3N0YXJ0c2VpdGUvdmVyZWluLzMzODIiPkJlbGdpdW08L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YS1oZWFkZXJfX2xhYmVsIj5DYXBzL0dvYWxzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCBkYXRhLWhlYWRlcl9fY29udGVudC0taGlnaGxpZ2h0IiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDQwMjgvdmVyZWluX2lkLzMzODIiPjMwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+LwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCBkYXRhLWhlYWRlcl9fY29udGVudC0taGlnaGxpZ2h0IiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDQwMjgvdmVyZWluX2lkLzMzODIiPjcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19ib3gtLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL21hcmt0d2VydHZlcmxhdWYvc3BpZWxlci8xNDQwMjgiIGNsYXNzPSJkYXRhLWhlYWRlcl9fbWFya2V0LXZhbHVlLXdyYXBwZXIiPjxzcGFuIGNsYXNzPSJ3YWVocnVuZyI+4oKsPC9zcGFuPjM4LjAwPHNwYW4gY2xhc3M9IndhZWhydW5nIj5tPC9zcGFuPiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iZGF0YS1oZWFkZXJfX2xhc3QtdXBkYXRlIj5MYXN0IHVwZGF0ZTogRGVjIDE5LCAyMDIzPC9wPjwvYT4KICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAKICAgIDwvaGVhZGVyPgogICAgPGRpdiBjbGFzcz0icm93IGhpZGUtb24tcHJpbnQiIGlkPSJzdWJuYXZpIiBkYXRhLXNlYXNvbj0iIiBkYXRhLWNvbnRyb2xsZXI9InNwaWVsZXIiIGRhdGEtYWN0aW9uPSJsZWlzdHVuZ3NkYXRlbiIgZGF0YS1wYXRoPSJwbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9wbHVzLzAiIGRhdGEtaWQ9IjE0NDAyOCI+CiAgICAgICAgPGRpdiBjbGFzcz0icGFnZV93cmFwcGVyIHN1Ym5hdmkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYXJnZS0xMiBjb2x1bW5zIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InN1Ym5hdmlfYm94IiBpZD0ic3VibmF2aWdhdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3VibWVudS10ZXh0IHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iU3ViTmF2aSIgdGl0bGU9Ik5hdmlnYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+4omhIFN1YiBuYXZpZ2F0aW9uPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPG5hdj4KICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGlkPSJzdWJtZW51Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJjbG9zZV9zdWJtZW51IiBjbGFzcz0ic2hvdy1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic3VibWVudS1pY29uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iY2xpY2tlZCI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJjbGlja2VkIj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhPkNsb3NlIHN1Ym5hdmlnYXRpb248L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9InByb2ZpbGUiIGNsYXNzPSJmaXJzdC1idXR0b24gICIgZGF0YS1uYXYtZ3JvdXA9InByb2ZpbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9IlN1Yk5hdmkiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL3Byb2ZpbC9zcGllbGVyLzE0NDAyOCIgY2xhc3M9InRtLXN1Ym5hdi1pdGVtIG1lZ2FtZW51IiBvbkNsaWNrPSJ0bUV2ZW50KCdzdWJuYXZpZ2F0aW9uX3NwaWVsZXInLCdjbGljaycsJ3Byb2ZpbCcpOwoiPlByb2ZpbGU8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJzdGF0cyIgY2xhc3M9IiAgIiBkYXRhLW5hdi1ncm91cD0ic3RhdHMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9IlN1Yk5hdmkiIGhyZWY9IiNzdWJuYXZpIiBjbGFzcz0idG0tc3VibmF2LWl0ZW0gbWVnYW1lbnVfZHJvcCIgb25DbGljaz0idG1FdmVudCgnc3VibmF2aWdhdGlvbl9zcGllbGVyJywnY2xpY2snLCdsZWlzdHVuZ3NkYXRlbicpOwoiPlN0YXRzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duX2Z1bGx3aWR0aCAiIHRpdGxlPSIiPjxkaXY+PGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3RtX3NwaW5uZXJfaW52ZXJ0ZWQubWluLnN2ZyIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBjbGFzcz0ibmF2aWdhdGlvbi1sb2FkaW5nLXNwaW5uZXIiLz48L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im1hcmtldC12YWx1ZXMiIGNsYXNzPSIgICIgZGF0YS1uYXYtZ3JvdXA9Im1hcmtldC12YWx1ZXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9IlN1Yk5hdmkiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL21hcmt0d2VydHZlcmxhdWYvc3BpZWxlci8xNDQwMjgiIGNsYXNzPSJ0bS1zdWJuYXYtaXRlbSBtZWdhbWVudSIgb25DbGljaz0idG1FdmVudCgnc3VibmF2aWdhdGlvbl9zcGllbGVyJywnY2xpY2snLCdtYXJrdHdlcnQnKTsKIj5NYXJrZXQgdmFsdWVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBpZD0idHJhbnNmZXJzIiBjbGFzcz0iICAiIGRhdGEtbmF2LWdyb3VwPSJ0cmFuc2ZlcnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9IlN1Yk5hdmkiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL3RyYW5zZmVycy9zcGllbGVyLzE0NDAyOCIgY2xhc3M9InRtLXN1Ym5hdi1pdGVtIG1lZ2FtZW51IiBvbkNsaWNrPSJ0bUV2ZW50KCdzdWJuYXZpZ2F0aW9uX3NwaWVsZXInLCdjbGljaycsJ3RyYW5zZmVycycpOwoiPlRyYW5zZmVyczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9InJ1bW9ycyIgY2xhc3M9IiAgIiBkYXRhLW5hdi1ncm91cD0icnVtb3JzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJTdWJOYXZpIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9nZXJ1ZWNodGUvc3BpZWxlci8xNDQwMjgiIGNsYXNzPSJ0bS1zdWJuYXYtaXRlbSBtZWdhbWVudSIgb25DbGljaz0idG1FdmVudCgnc3VibmF2aWdhdGlvbl9zcGllbGVyJywnY2xpY2snLCdnZXJ1Y2h0ZScpOwoiPlJ1bW9yczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9Im5hdGlvbmFsLXRlYW0iIGNsYXNzPSIgICIgZGF0YS1uYXYtZ3JvdXA9Im5hdGlvbmFsLXRlYW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIG5hbWU9IlN1Yk5hdmkiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NDAyOCIgY2xhc3M9InRtLXN1Ym5hdi1pdGVtIG1lZ2FtZW51IiBvbkNsaWNrPSJ0bUV2ZW50KCdzdWJuYXZpZ2F0aW9uX3NwaWVsZXInLCdjbGljaycsJ25hdGlvbmFsbWFubnNjaGFmdCcpOwoiPk5hdGlvbmFsIHRlYW08L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJuZXdzIiBjbGFzcz0iICAiIGRhdGEtbmF2LWdyb3VwPSJuZXdzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJTdWJOYXZpIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uZXdzL3NwaWVsZXIvMTQ0MDI4IiBjbGFzcz0idG0tc3VibmF2LWl0ZW0gbWVnYW1lbnUiIG9uQ2xpY2s9InRtRXZlbnQoJ3N1Ym5hdmlnYXRpb25fc3BpZWxlcicsJ2NsaWNrJywnbmV3cycpOwoiPk5ld3M8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJhY2hpZXZlbWVudHMiIGNsYXNzPSIgICIgZGF0YS1uYXYtZ3JvdXA9ImFjaGlldmVtZW50cyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iU3ViTmF2aSIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvZXJmb2xnZS9zcGllbGVyLzE0NDAyOCIgY2xhc3M9InRtLXN1Ym5hdi1pdGVtIG1lZ2FtZW51IiBvbkNsaWNrPSJ0bUV2ZW50KCdzdWJuYXZpZ2F0aW9uX3NwaWVsZXInLCdjbGljaycsJ2VyZm9sZ2UnKTsKIj5BY2hpZXZlbWVudHM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGlkPSJjYXJlZXIiIGNsYXNzPSIgICIgZGF0YS1uYXYtZ3JvdXA9ImNhcmVlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgbmFtZT0iU3ViTmF2aSIgaHJlZj0iI3N1Ym5hdmkiIGNsYXNzPSJ0bS1zdWJuYXYtaXRlbSBtZWdhbWVudV9kcm9wIiBvbkNsaWNrPSJ0bUV2ZW50KCdzdWJuYXZpZ2F0aW9uX3NwaWVsZXInLCdjbGljaycsJ2thcnJpZXJlJyk7CiI+Q2FyZWVyPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRyb3Bkb3duX2Z1bGx3aWR0aCAiIHRpdGxlPSIiPjxkaXY+PGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3RtX3NwaW5uZXJfaW52ZXJ0ZWQubWluLnN2ZyIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBjbGFzcz0ibmF2aWdhdGlvbi1sb2FkaW5nLXNwaW5uZXIiLz48L2Rpdj48L2Rpdj4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgaWQ9InN1Ym5hdmktZWRpdCIgY2xhc3M9IiAgc3VibmF2aS1lZGl0IiBkYXRhLW5hdi1ncm91cD0ic3VibmF2aS1lZGl0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBuYW1lPSJTdWJOYXZpIiBocmVmPSIjc3VibmF2aSIgY2xhc3M9InRtLXN1Ym5hdi1pdGVtIG1lZ2FtZW51X2Ryb3AiIG9uQ2xpY2s9InRtRXZlbnQoJ3N1Ym5hdmlnYXRpb25fc3BpZWxlcicsJ2NsaWNrJywnZWRpdCcpOwoiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkcm9wZG93bl9mdWxsd2lkdGggZ2FzdGhpbndlaXMiIHRpdGxlPSJMb2cgaW4gb3IgcmVnaXN0ZXIgbm93Ij48ZGl2PjxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy90bV9zcGlubmVyX2ludmVydGVkLm1pbi5zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgY2xhc3M9Im5hdmlnYXRpb24tbG9hZGluZy1zcGlubmVyIi8+PC9kaXY+PC9kaXY+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgIDwvbmF2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8c2NyaXB0PgogICAgICAgIHZhciBzdGlja3lTdWJUb3AgPSAkKCcjc3VibmF2aWdhdGlvbicpLm9mZnNldCgpLnRvcDsKICAgICAgICBzdGlja3lTdWJUb3AgPSBzdGlja3lTdWJUb3AgLSA2MDsKICAgICAgICB2YXIgbWFpbiA9ICQoIiNtYWluIik7CiAgICAgICAgJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICQod2luZG93KS5vbignc2Nyb2xsIGxvYWQnLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIGlmICghbWFpbi5oYXNDbGFzcygic3RpY2t5U3VibmF2aWdhdGlvbiIpKSB7CiAgICAgICAgICAgICAgICAgICAgc3RpY2t5U3ViVG9wID0gJCgnI3N1Ym5hdmlnYXRpb24nKS5vZmZzZXQoKS50b3A7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoJCh3aW5kb3cpLnNjcm9sbFRvcCgpID4gc3RpY2t5U3ViVG9wKSB7CiAgICAgICAgICAgICAgICAgICAgbWFpbi5hZGRDbGFzcygic3RpY2t5U3VibmF2aWdhdGlvbiIpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBtYWluLnJlbW92ZUNsYXNzKCJzdGlja3lTdWJuYXZpZ2F0aW9uIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgICA8c3R5bGU+CiAgICAgICAgLmZvcnVtLWFuY2hvciB7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IC04MHB4OwogICAgICAgIH0KICAgIDwvc3R5bGU+CgogICAgICAgICAgICAgICAgICAgICAgICAKPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImxhcmdlLTggY29sdW1ucyI+CgogICAgICAgIDxkaXYgY2xhc3M9ImJveCI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iY29udGVudC1ib3gtaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgU3RhdHMgb2YgTGVhbmRybyBUcm9zc2FyZCAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJpbmZvLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgVGhpcyBwYWdlIGNvbnRhaW5zIGluZm9ybWF0aW9uIGFib3V0IGEgcGxheWVyJ3MgZGV0YWlsZWQgc3RhdHMuIEluIHRoZSBpbmZvIGJveCwgeW91IGNhbiBmaWx0ZXIgYnkgcGVyaW9kLCBjbHViLCB0eXBlIG9mIGxlYWd1ZSBhbmQgY29tcGV0aXRpb24uIFRoZSAiRGV0YWlsZWQgc3RhdHMiIHRhYiBzaG93cyBhIHBsYXllcidzIHRvdGFsIGFwcGVhcmFuY2VzLCBnb2FscywgY2FyZHMgYW5kIGN1bXVsYXRpdmUgbWludXRlcyBvZiBwbGF5IGZvciBlYWNoIGNvbXBldGl0aW9uLCBhbmQgaW5kaWNhdGVzIHRoZSBzZWFzb24gaW4gd2hpY2ggaXQgb2NjdXJyZWQuICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvcGx1cy8wIiBtZXRob2Q9ImdldCI+ICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGFyZ2UtMTIgY29sdW1ucyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iYXVmbGlzdHVuZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+RmlsdGVyIGJ5IHNlYXNvbjo8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbmxpbmUtc2VsZWN0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c2VsZWN0IG5hbWU9InNhaXNvbiIgZGF0YS1wbGFjZWhvbGRlcj0iRmlsdGVyIGJ5IHNlYXNvbiIgY2xhc3M9ImNoem4tc2VsZWN0IiB0YWJpbmRleD0iMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9ImdlcyI+T3ZlcmFsbCBiYWxhbmNlPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICBzZWxlY3RlZD0ic2VsZWN0ZWQidmFsdWU9IjIwMjMiPjIzLzI0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDIyIj4yMi8yMzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAyMSI+MjEvMjI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMjAiPjIwLzIxPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDE5Ij4xOS8yMDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAxOCI+MTgvMTk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMTciPjE3LzE4PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDE2Ij4xNi8xNzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAxNSI+MTUvMTY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMTQiPjE0LzE1PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDEzIj4xMy8xNDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAxMiI+MTIvMTM8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMTEiPjExLzEyPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDEwIj4xMC8xMTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAwOSI+MDkvMTA8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NlbGVjdD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0ic3VibWl0IiBjbGFzcz0ic21hbGwgYnV0dG9uIiB2YWx1ZT0iU2hvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZm9ybT4gICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJib3giPgogICAgICAgICAgICA8aDIgY2xhc3M9ImNvbnRlbnQtYm94LWhlYWRsaW5lIj4KICAgICAgICAgICAgICAgIFN0YXRzIDIzLzI0ICAgICAgICAgICAgPC9oMj4KICAgICAgICAgICAgCjxkaXYgY2xhc3M9InRtLXRhYnMiPgogICAgPGEgY2xhc3M9InRtLXRhYiB0bS10YWJfX2FjdGl2ZS0tcGFyZW50IiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMyNnZXNhbXQiPjxkaXYgY2xhc3M9IiB0bS10YWJfX2FjdGl2ZSI+PHNwYW4+Q29tcGFjdDwvc3Bhbj48L2Rpdj48L2E+PGEgY2xhc3M9InRtLXRhYiIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8xI2dlc2FtdCI+PGRpdiBjbGFzcz0iIj48c3Bhbj5EZXRhaWxlZDwvc3Bhbj48L2Rpdj48L2E+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtdGFibGUiPgogICAgICAgICAgICAgICAgPGRpdiBpZD0ieXcxIiBjbGFzcz0iZ3JpZC12aWV3Ij4KPGRpdiBjbGFzcz0ic3VtbWFyeSI+PC9kaXY+Cjx0YWJsZSBjbGFzcz0iaXRlbXMiPgo8dGhlYWQ+Cjx0cj4KPHRoIGNvbHNwYW49IjIiIGlkPSJ5dzFfYzAiPjxhIGNsYXNzPSJzb3J0LWxpbmsiIGhyZWY9Ii9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAvc29ydC93ZXR0YmV3ZXJiIj5Db21wZXRpdGlvbjwvYT48L3RoPjx0aCBjbGFzcz0iaGlkZSIgaWQ9Inl3MV9jMSI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMC9zb3J0L3dldHRiZXdlcmIiPndldHRiZXdlcmI8L2E+PC90aD48dGggY2xhc3M9InplbnRyaWVydCIgaWQ9Inl3MV9jMiI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMC9zb3J0L2VpbnNhZXR6ZS5kZXNjIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZWluc2FldHplLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFwcGVhcmFuY2VzIj4mbmJzcDs8L3NwYW4+PC9hPjwvdGg+PHRoIGNsYXNzPSJ6ZW50cmllcnQiIGlkPSJ5dzFfYzMiPjxhIGNsYXNzPSJzb3J0LWxpbmsiIGhyZWY9Ii9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzAvc29ydC90b3JlLmRlc2MiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi10b3ItdGFibGUtaGVhZGVyIiB0aXRsZT0iR29hbHMiPiZuYnNwOzwvc3Bhbj48L2E+PC90aD48dGggY2xhc3M9InplbnRyaWVydCIgaWQ9Inl3MV9jNCI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMC9zb3J0L3ZvcmxhZ2VuLmRlc2MiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi12b3JsYWdlLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFzc2lzdHMiPiZuYnNwOzwvc3Bhbj48L2E+PC90aD48dGggY2xhc3M9InplbnRyaWVydCIgaWQ9Inl3MV9jNSI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMC9zb3J0L2dlbGJlLmRlc2MiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxiZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvYT48L3RoPjx0aCBjbGFzcz0iemVudHJpZXJ0IiBpZD0ieXcxX2M2Ij48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wL3NvcnQvZ2VsYnJvdGUuZGVzYyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJyb3Rla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iU2Vjb25kIHllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvYT48L3RoPjx0aCBjbGFzcz0iemVudHJpZXJ0IiBpZD0ieXcxX2M3Ij48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wL3NvcnQvcm90ZS5kZXNjIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tcm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlJlZCBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvYT48L3RoPjx0aCBjbGFzcz0icmVjaHRzIiBpZD0ieXcxX2M4Ij48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8wL3NvcnQvZWluc2F0enplaXQuZGVzYyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLW1pbnV0ZW4tdGFibGUtaGVhZGVyIiB0aXRsZT0iTWludXRlcyBwbGF5ZWQiPiZuYnNwOzwvc3Bhbj48L2E+PC90aD48L3RyPgo8L3RoZWFkPgo8dGZvb3Q+Cjx0cj4KPHRkIGNvbHNwYW49IjIiIGNsYXNzPSJyZWNodHMiPlRvdGFsICAyMy8yNDo8L3RkPjx0ZCBjbGFzcz0iaGlkZSI+Jm5ic3A7PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+MjI8L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij42PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+MjwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJyZWNodHMiPjEuMDI1JzwvdGQ+PC90cj4KPC90Zm9vdD4KPHRib2R5Pgo8dHIgY2xhc3M9Im9kZCI+Cjx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1yZWNodHMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9nYjEucG5nP2xtPTE1MjExMDQ2NTYiIHRpdGxlPSJQcmVtaWVyIExlYWd1ZSIgYWx0PSJQcmVtaWVyIExlYWd1ZSIgY2xhc3M9IiIgLz48L3RkPjx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9IlByZW1pZXIgTGVhZ3VlIiBocmVmPSIvcHJlbWllci1sZWFndWUvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL0dCMSI+UHJlbWllciBMZWFndWU8L2E+PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCBwbGF5ZXItcHJvZmlsZS1wZXJmb3JtYW5jZS1kYXRhIj48YSB0aXRsZT0iTGVhbmRybyBUcm9zc2FyZCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3dldHRiZXdlcmIvR0IxL3ZlcmVpbi8xMSI+MTU8L2E+PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+MzwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPjE8L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0icmVjaHRzIj42MzYnPC90ZD48L3RyPgo8dHIgY2xhc3M9ImV2ZW4iPgo8dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItcmVjaHRzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9sb2dvL3RpbnkvY2wucG5nP2xtPTE2MjY4MTA1NTUiIHRpdGxlPSJVRUZBIENoYW1waW9ucyBMZWFndWUiIGFsdD0iVUVGQSBDaGFtcGlvbnMgTGVhZ3VlIiBjbGFzcz0iIiAvPjwvdGQ+PHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIj48YSB0aXRsZT0iQ2hhbXBpb25zIExlYWd1ZSIgaHJlZj0iL3VlZmEtY2hhbXBpb25zLWxlYWd1ZS9zdGFydHNlaXRlL3Bva2Fsd2V0dGJld2VyYi9DTCI+Q2hhbXBpb25zIExlYWd1ZTwvYT48L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0IHBsYXllci1wcm9maWxlLXBlcmZvcm1hbmNlLWRhdGEiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvd2V0dGJld2VyYi9DTC92ZXJlaW4vMTEiPjU8L2E+PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+MjwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPjE8L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0icmVjaHRzIj4zMDgnPC90ZD48L3RyPgo8dHIgY2xhc3M9Im9kZCI+Cjx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1yZWNodHMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9nYmNzLnBuZz9sbT0xNjU5MjY1NTYyIiB0aXRsZT0iQ29tbXVuaXR5IFNoaWVsZCIgYWx0PSJDb21tdW5pdHkgU2hpZWxkIiBjbGFzcz0iIiAvPjwvdGQ+PHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIj48YSB0aXRsZT0iQ29tbXVuaXR5IFNoaWVsZCIgaHJlZj0iL2NvbW11bml0eS1zaGllbGQvc3RhcnRzZWl0ZS9wb2thbHdldHRiZXdlcmIvR0JDUyI+Q29tbXVuaXR5IFNoaWVsZDwvYT48L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0IHBsYXllci1wcm9maWxlLXBlcmZvcm1hbmNlLWRhdGEiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvd2V0dGJld2VyYi9HQkNTL3ZlcmVpbi8xMSI+MTwvYT48L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJyZWNodHMiPjE1JzwvdGQ+PC90cj4KPHRyIGNsYXNzPSJldmVuIj4KPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLXJlY2h0cyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby90aW55L2NnYi5wbmc/bG09MTU2NjkzNzM0MiIgdGl0bGU9IkVGTCBDdXAiIGFsdD0iRUZMIEN1cCIgY2xhc3M9IiIgLz48L3RkPjx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9IkVGTCBDdXAiIGhyZWY9Ii9lZmwtY3VwL3N0YXJ0c2VpdGUvcG9rYWx3ZXR0YmV3ZXJiL0NHQiI+RUZMIEN1cDwvYT48L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0IHBsYXllci1wcm9maWxlLXBlcmZvcm1hbmNlLWRhdGEiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvd2V0dGJld2VyYi9DR0IvdmVyZWluLzExIj4xPC9hPjwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InJlY2h0cyI+NjYnPC90ZD48L3RyPgo8L3Rib2R5Pgo8L3RhYmxlPgo8ZGl2IGNsYXNzPSJrZXlzIiBzdHlsZT0iZGlzcGxheTpub25lIiB0aXRsZT0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3BsdXMvMD9zYWlzb249MjAyMyI+PHNwYW4+UHJlbWllciBMZWFndWU8L3NwYW4+PHNwYW4+Q2hhbXBpb25zIExlYWd1ZTwvc3Bhbj48c3Bhbj5Db21tdW5pdHkgU2hpZWxkPC9zcGFuPjxzcGFuPkVGTCBDdXA8L3NwYW4+PC9kaXY+CjwvZGl2PiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJib3giPgogICAgPGRpdiBjbGFzcz0idGFibGUtaGVhZGVyIGltZy12YXQiPgogICAgICAgIDxhIG5hbWU9IkNMIiBocmVmPSIvdWVmYS1jaGFtcGlvbnMtbGVhZ3VlL3N0YXJ0c2VpdGUvd2V0dGJld2VyYi9DTC9zYWlzb25faWQvMjAyMyI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9jbC5wbmc/bG09MTYyNjgxMDU1NSIgdGl0bGU9IlVFRkEgQ2hhbXBpb25zIExlYWd1ZSIgYWx0PSJVRUZBIENoYW1waW9ucyBMZWFndWUiIGNsYXNzPSIiIC8+VUVGQSBDaGFtcGlvbnMgTGVhZ3VlICAgICAgICA8L2E+CiAgICA8L2Rpdj4KICAgIAo8ZGl2IGNsYXNzPSJ0bS10YWJzIj4KICAgIDxhIGNsYXNzPSJ0bS10YWIgdG0tdGFiX19hY3RpdmUtLXBhcmVudCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMiPjxkaXYgY2xhc3M9IiB0bS10YWJfX2FjdGl2ZSI+PHNwYW4+Q29tcGFjdDwvc3Bhbj48L2Rpdj48L2E+PGEgY2xhc3M9InRtLXRhYiIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8xIj48ZGl2IGNsYXNzPSIiPjxzcGFuPkRldGFpbGVkPC9zcGFuPjwvZGl2PjwvYT48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtdGFibGUiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5NYXRjaGRheTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPkRhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+VmVudWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+Rm9yPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbHNwYW49IjIiPk9wcG9uZW50PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5SZXN1bHQ8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5Qb3MuPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXRvci10YWJsZS1oZWFkZXIiIHRpdGxlPSJHb2FscyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi12b3JsYWdlLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFzc2lzdHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxiZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxicm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlNlY29uZCB5ZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tcm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlJlZCBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InJlY2h0cyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLW1pbnV0ZW4tdGFibGUtaGVhZGVyIiB0aXRsZT0iTWludXRlcyBwbGF5ZWQiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3VlZmEtY2hhbXBpb25zLWxlYWd1ZS9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvQ0wvc2Fpc29uX2lkLzIwMjMvZ3J1cHBlL0IiPkdyb3VwIEI8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OS8yMC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9IkFyc2VuYWwgRkMiIGhyZWY9Ii9mYy1hcnNlbmFsL3NwaWVscGxhbi92ZXJlaW4vMTEvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzExLnBuZz9sbT0xNDg5Nzg3ODUwIiB0aXRsZT0iQXJzZW5hbCBGQyIgYWx0PSJBcnNlbmFsIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iUFNWIEVpbmRob3ZlbiIgaHJlZj0iL3Bzdi1laW5kaG92ZW4vc3BpZWxwbGFuL3ZlcmVpbi8zODMvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzM4My5wbmc/bG09MTY4MjkyNTk0OSIgdGl0bGU9IlBTViBFaW5kaG92ZW4iIGFsdD0iUFNWIEVpbmRob3ZlbiIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IlBTViBFaW5kaG92ZW4iIGhyZWY9Ii9wc3YtZWluZGhvdmVuL3NwaWVscGxhbi92ZXJlaW4vMzgzL3NhaXNvbl9pZC8yMDIzIj5QU1YgRWluZGhvdmVuPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDE3MTIzMiIgaHJlZj0iL2Fyc2VuYWwtZmNfcHN2LWVpbmRob3Zlbi9pbmRleC9zcGllbGJlcmljaHQvNDE3MTIzMiI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+NDowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9IiIgdGl0bGU9IkxlZnQgV2luZ2VyIj5MVzwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj41OCc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdWVmYS1jaGFtcGlvbnMtbGVhZ3VlL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DTC9zYWlzb25faWQvMjAyMy9ncnVwcGUvQiI+R3JvdXAgQjwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMC8zLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJSQyBMZW5zIiBocmVmPSIvcmMtbGVucy9zcGllbHBsYW4vdmVyZWluLzgyNi9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvODI2LnBuZz9sbT0xNTk1NDU3MDU5IiB0aXRsZT0iUkMgTGVucyIgYWx0PSJSQyBMZW5zIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iUkMgTGVucyIgaHJlZj0iL3JjLWxlbnMvc3BpZWxwbGFuL3ZlcmVpbi84MjYvc2Fpc29uX2lkLzIwMjMiPkxlbnM8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MTcxMjM4IiBocmVmPSIvcmMtbGVuc19hcnNlbmFsLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MTcxMjM4Ij48c3BhbiBjbGFzcz0icmVkdGV4dCI+MjoxIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9IiIgdGl0bGU9IkxlZnQgV2luZ2VyIj5MVzwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+NzAnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3VlZmEtY2hhbXBpb25zLWxlYWd1ZS9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvQ0wvc2Fpc29uX2lkLzIwMjMvZ3J1cHBlL0IiPkdyb3VwIEI8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTAvMjQvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiIGNvbHNwYW49IjIiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IlNldmlsbGEgRkMiIGhyZWY9Ii9mYy1zZXZpbGxhL3NwaWVscGxhbi92ZXJlaW4vMzY4L3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zNjgucG5nP2xtPTE0MDg2NTU0NTUiIHRpdGxlPSJTZXZpbGxhIEZDIiBhbHQ9IlNldmlsbGEgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJTZXZpbGxhIEZDIiBocmVmPSIvZmMtc2V2aWxsYS9zcGllbHBsYW4vdmVyZWluLzM2OC9zYWlzb25faWQvMjAyMyI+U2V2aWxsYSBGQzwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQxNzEyMjgiIGhyZWY9Ii9zZXZpbGxhLWZjX2Fyc2VuYWwtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzQxNzEyMjgiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjE6MiA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSIiPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+OSc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdWVmYS1jaGFtcGlvbnMtbGVhZ3VlL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DTC9zYWlzb25faWQvMjAyMy9ncnVwcGUvQiI+R3JvdXAgQjwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMS84LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJTZXZpbGxhIEZDIiBocmVmPSIvZmMtc2V2aWxsYS9zcGllbHBsYW4vdmVyZWluLzM2OC9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMzY4LnBuZz9sbT0xNDA4NjU1NDU1IiB0aXRsZT0iU2V2aWxsYSBGQyIgYWx0PSJTZXZpbGxhIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iU2V2aWxsYSBGQyIgaHJlZj0iL2ZjLXNldmlsbGEvc3BpZWxwbGFuL3ZlcmVpbi8zNjgvc2Fpc29uX2lkLzIwMjMiPlNldmlsbGEgRkM8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MTcxMjMxIiBocmVmPSIvYXJzZW5hbC1mY19zZXZpbGxhLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MTcxMjMxIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4yOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iIiB0aXRsZT0iQ2VudHJlLUZvcndhcmQiPkNGPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjE8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+ODEnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIzL2dydXBwZS9CIj5Hcm91cCBCPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjExLzI5LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJSQyBMZW5zIiBocmVmPSIvcmMtbGVucy9zcGllbHBsYW4vdmVyZWluLzgyNi9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvODI2LnBuZz9sbT0xNTk1NDU3MDU5IiB0aXRsZT0iUkMgTGVucyIgYWx0PSJSQyBMZW5zIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iUkMgTGVucyIgaHJlZj0iL3JjLWxlbnMvc3BpZWxwbGFuL3ZlcmVpbi84MjYvc2Fpc29uX2lkLzIwMjMiPkxlbnM8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MTcxMjMzIiBocmVmPSIvYXJzZW5hbC1mY19yYy1sZW5zL2luZGV4L3NwaWVsYmVyaWNodC80MTcxMjMzIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij42OjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3VlZmEtY2hhbXBpb25zLWxlYWd1ZS9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvQ0wvc2Fpc29uX2lkLzIwMjMvZ3J1cHBlL0IiPkdyb3VwIEI8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTIvMTIvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiIGNvbHNwYW49IjIiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IlBTViBFaW5kaG92ZW4iIGhyZWY9Ii9wc3YtZWluZGhvdmVuL3NwaWVscGxhbi92ZXJlaW4vMzgzL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zODMucG5nP2xtPTE2ODI5MjU5NDkiIHRpdGxlPSJQU1YgRWluZGhvdmVuIiBhbHQ9IlBTViBFaW5kaG92ZW4iIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJQU1YgRWluZGhvdmVuIiBocmVmPSIvcHN2LWVpbmRob3Zlbi9zcGllbHBsYW4vdmVyZWluLzM4My9zYWlzb25faWQvMjAyMyI+UFNWIEVpbmRob3ZlbjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQxNzEyMzUiIGhyZWY9Ii9wc3YtZWluZGhvdmVuX2Fyc2VuYWwtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzQxNzEyMzUiPjxzcGFuIGNsYXNzPSIiPjE6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSJMZWZ0IFdpbmdlciI+TFc8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJyZWNodHMiPjkwJzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPHRmb290PgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIxOCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNxdWFkOiA2LAogICAgICAgICAgICAgICAgICAgICAgICBTdGFydGluZyBlbGV2ZW46IDQsCiAgICAgICAgICAgICAgICAgICAgICAgIFN1YnN0aXR1dGVkIGluOiAxLAogICAgICAgICAgICAgICAgICAgICAgICBPbiB0aGUgYmVuY2g6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIFN1c3BlbmRlZDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgSW5qdXJlZDogMCAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3Rmb290PgogICAgICAgIDwvdGFibGU+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImJveCI+CiAgICA8ZGl2IGNsYXNzPSJ0YWJsZS1oZWFkZXIgaW1nLXZhdCI+CiAgICAgICAgPGEgbmFtZT0iRlMiIGhyZWY9Ii9pbnRlcm5hdGlvbmFsLWZyaWVuZGxpZXMvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL0ZTL3NhaXNvbl9pZC8yMDIzIj4KICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby90aW55L2ZzLnBuZz9sbT0xNDA1MDYzMDkxIiB0aXRsZT0iSW50ZXJuYXRpb25hbCBGcmllbmRsaWVzIiBhbHQ9IkludGVybmF0aW9uYWwgRnJpZW5kbGllcyIgY2xhc3M9IiIgLz5JbnRlcm5hdGlvbmFsIEZyaWVuZGxpZXMgICAgICAgIDwvYT4KICAgIDwvZGl2PgogICAgCjxkaXYgY2xhc3M9InRtLXRhYnMiPgogICAgPGEgY2xhc3M9InRtLXRhYiB0bS10YWJfX2FjdGl2ZS0tcGFyZW50IiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMyI+PGRpdiBjbGFzcz0iIHRtLXRhYl9fYWN0aXZlIj48c3Bhbj5Db21wYWN0PC9zcGFuPjwvZGl2PjwvYT48YSBjbGFzcz0idG0tdGFiIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wbHVzLzEiPjxkaXYgY2xhc3M9IiI+PHNwYW4+RGV0YWlsZWQ8L3NwYW4+PC9kaXY+PC9hPjwvZGl2PgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS10YWJsZSI+CiAgICAgICAgPHRhYmxlPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPk1hdGNoZGF5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+RGF0ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5WZW51ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj5Gb3I8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY29sc3Bhbj0iMiI+T3Bwb25lbnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlJlc3VsdDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlBvcy48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdG9yLXRhYmxlLWhlYWRlciIgdGl0bGU9IkdvYWxzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXZvcmxhZ2UtdGFibGUtaGVhZGVyIiB0aXRsZT0iQXNzaXN0cyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iWWVsbG93IGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJyb3Rla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iU2Vjb25kIHllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1yb3Rla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iUmVkIGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icmVjaHRzIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tbWludXRlbi10YWJsZS1oZWFkZXIiIHRpdGxlPSJNaW51dGVzIHBsYXllZCI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvaW50ZXJuYXRpb25hbC1mcmllbmRsaWVzL3NwaWVsdGFnL3dldHRiZXdlcmIvRlMvc2Fpc29uX2lkLzIwMjMvc3BpZWx0YWcvMTIiPjEyPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjExLzE1LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iQmVsZ2l1bSIgaHJlZj0iL2JlbGdpZW4vc3BpZWxwbGFuL3ZlcmVpbi8zMzgyL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9mbGFnZ2UvdGlueS8xOS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkJlbGdpdW0iIGFsdD0iQmVsZ2l1bSIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iU2VyYmlhIiBocmVmPSIvc2VyYmllbi9zcGllbHBsYW4vdmVyZWluLzM0Mzgvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS90aW55LzIxNS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IlNlcmJpYSIgYWx0PSJTZXJiaWEiIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IlNlcmJpYSIgaHJlZj0iL3NlcmJpZW4vc3BpZWxwbGFuL3ZlcmVpbi8zNDM4L3NhaXNvbl9pZC8yMDIzIj5TZXJiaWE8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDc0MTg5IiBocmVmPSIvYmVsZ2l1bV9zZXJiaWEvaW5kZXgvc3BpZWxiZXJpY2h0LzQwNzQxODkiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjE6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSIiPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+MjMnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICA8dGZvb3Q+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjE4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgU3F1YWQ6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0aW5nIGVsZXZlbjogMCwKICAgICAgICAgICAgICAgICAgICAgICAgU3Vic3RpdHV0ZWQgaW46IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIE9uIHRoZSBiZW5jaDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgU3VzcGVuZGVkOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBJbmp1cmVkOiAwICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGZvb3Q+CiAgICAgICAgPC90YWJsZT4KICAgIDwvZGl2Pgo8L2Rpdj4KPGRpdiBjbGFzcz0iYm94Ij4KICAgIDxkaXYgY2xhc3M9InRhYmxlLWhlYWRlciBpbWctdmF0Ij4KICAgICAgICA8YSBuYW1lPSJHQjEiIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zdGFydHNlaXRlL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzIj4KICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby90aW55L2diMS5wbmc/bG09MTUyMTEwNDY1NiIgdGl0bGU9IlByZW1pZXIgTGVhZ3VlIiBhbHQ9IlByZW1pZXIgTGVhZ3VlIiBjbGFzcz0iIiAvPlByZW1pZXIgTGVhZ3VlICAgICAgICA8L2E+CiAgICA8L2Rpdj4KICAgIAo8ZGl2IGNsYXNzPSJ0bS10YWJzIj4KICAgIDxhIGNsYXNzPSJ0bS10YWIgdG0tdGFiX19hY3RpdmUtLXBhcmVudCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMiPjxkaXYgY2xhc3M9IiB0bS10YWJfX2FjdGl2ZSI+PHNwYW4+Q29tcGFjdDwvc3Bhbj48L2Rpdj48L2E+PGEgY2xhc3M9InRtLXRhYiIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcGx1cy8xIj48ZGl2IGNsYXNzPSIiPjxzcGFuPkRldGFpbGVkPC9zcGFuPjwvZGl2PjwvYT48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtdGFibGUiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5NYXRjaGRheTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPkRhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+VmVudWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+Rm9yPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbHNwYW49IjIiPk9wcG9uZW50PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5SZXN1bHQ8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5Qb3MuPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXRvci10YWJsZS1oZWFkZXIiIHRpdGxlPSJHb2FscyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi12b3JsYWdlLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFzc2lzdHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxiZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxicm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlNlY29uZCB5ZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tcm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlJlZCBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InJlY2h0cyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLW1pbnV0ZW4tdGFibGUtaGVhZGVyIiB0aXRsZT0iTWludXRlcyBwbGF5ZWQiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzEiPjE8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OC8xMi8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDQuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik5vdHRpbmdoYW0gRm9yZXN0IiBocmVmPSIvbm90dGluZ2hhbS1mb3Jlc3Qvc3BpZWxwbGFuL3ZlcmVpbi83MDMvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzcwMy5wbmc/bG09MTU5ODg5MDI4OSIgdGl0bGU9Ik5vdHRpbmdoYW0gRm9yZXN0IiBhbHQ9Ik5vdHRpbmdoYW0gRm9yZXN0IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iTm90dGluZ2hhbSBGb3Jlc3QiIGhyZWY9Ii9ub3R0aW5naGFtLWZvcmVzdC9zcGllbHBsYW4vdmVyZWluLzcwMy9zYWlzb25faWQvMjAyMyI+Tm90dG0gRm9yZXN0PC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTQuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwODc5MjUiIGhyZWY9Ii9hcnNlbmFsLWZjX25vdHRpbmdoYW0tZm9yZXN0L2luZGV4L3NwaWVsYmVyaWNodC80MDg3OTI1Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4yOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iIiB0aXRsZT0iTGVmdCBXaW5nZXIiPkxXPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj4xNyc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzIiPjI8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OC8yMS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDMuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkNyeXN0YWwgUGFsYWNlIiBocmVmPSIvY3J5c3RhbC1wYWxhY2Uvc3BpZWxwbGFuL3ZlcmVpbi84NzMvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55Lzg3My5wbmc/bG09MTQ1NzcyMzI4NyIgdGl0bGU9IkNyeXN0YWwgUGFsYWNlIiBhbHQ9IkNyeXN0YWwgUGFsYWNlIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iQ3J5c3RhbCBQYWxhY2UiIGhyZWY9Ii9jcnlzdGFsLXBhbGFjZS9zcGllbHBsYW4vdmVyZWluLzg3My9zYWlzb25faWQvMjAyMyI+Q3J5c3RhbCBQYWxhY2U8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxMS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA4NzkzNSIgaHJlZj0iL2NyeXN0YWwtcGFsYWNlX2Fyc2VuYWwtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzQwODc5MzUiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjA6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5vbiB0aGUgYmVuY2g8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjMvc3BpZWx0YWcvMyI+MzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij44LzI2LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oNS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iRnVsaGFtIEZDIiBocmVmPSIvZmMtZnVsaGFtL3NwaWVscGxhbi92ZXJlaW4vOTMxL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS85MzEucG5nP2xtPTE1NTY4MzE2ODciIHRpdGxlPSJGdWxoYW0gRkMiIGFsdD0iRnVsaGFtIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iRnVsaGFtIEZDIiBocmVmPSIvZmMtZnVsaGFtL3NwaWVscGxhbi92ZXJlaW4vOTMxL3NhaXNvbl9pZC8yMDIzIj5GdWxoYW08L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA4Nzk0NSIgaHJlZj0iL2Fyc2VuYWwtZmNfZnVsaGFtLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDg3OTQ1Ij48c3BhbiBjbGFzcz0iIj4yOjIgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iIiB0aXRsZT0iQ2VudHJlLUZvcndhcmQiPkNGPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj40NSc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzQiPjQ8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OS8zLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oNS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBVbml0ZWQiIGhyZWY9Ii9tYW5jaGVzdGVyLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzk4NS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvOTg1LnBuZz9sbT0xNDU3OTc1OTAzIiB0aXRsZT0iTWFuY2hlc3RlciBVbml0ZWQiIGFsdD0iTWFuY2hlc3RlciBVbml0ZWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIFVuaXRlZCIgaHJlZj0iL21hbmNoZXN0ZXItdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vOTg1L3NhaXNvbl9pZC8yMDIzIj5NYW4gVXRkPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwODc5NTQiIGhyZWY9Ii9hcnNlbmFsLWZjX21hbmNoZXN0ZXItdW5pdGVkL2luZGV4L3NwaWVsYmVyaWNodC80MDg3OTU0Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4zOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzUiPjU8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OS8xNy8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDQuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkV2ZXJ0b24gRkMiIGhyZWY9Ii9mYy1ldmVydG9uL3NwaWVscGxhbi92ZXJlaW4vMjkvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI5LnBuZz9sbT0xNDQ1OTQ5ODQ2IiB0aXRsZT0iRXZlcnRvbiBGQyIgYWx0PSJFdmVydG9uIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iRXZlcnRvbiBGQyIgaHJlZj0iL2ZjLWV2ZXJ0b24vc3BpZWxwbGFuL3ZlcmVpbi8yOS9zYWlzb25faWQvMjAyMyI+RXZlcnRvbjwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIwLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDg3OTY2IiBocmVmPSIvZXZlcnRvbi1mY19hcnNlbmFsLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDg3OTY2Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4wOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iIiB0aXRsZT0iTGVmdCBXaW5nZXIiPkxXPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjE8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+NjYnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzYiPjY8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OS8yNC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDUuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IlRvdHRlbmhhbSBIb3RzcHVyIiBocmVmPSIvdG90dGVuaGFtLWhvdHNwdXIvc3BpZWxwbGFuL3ZlcmVpbi8xNDgvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzE0OC5wbmc/bG09MTU0NDM0NTgwMSIgdGl0bGU9IlRvdHRlbmhhbSBIb3RzcHVyIiBhbHQ9IlRvdHRlbmhhbSBIb3RzcHVyIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iVG90dGVuaGFtIEhvdHNwdXIiIGhyZWY9Ii90b3R0ZW5oYW0taG90c3B1ci9zcGllbHBsYW4vdmVyZWluLzE0OC9zYWlzb25faWQvMjAyMyI+VG90dGVuaGFtPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oNC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA5NTA2MiIgaHJlZj0iL2Fyc2VuYWwtZmNfdG90dGVuaGFtLWhvdHNwdXIvaW5kZXgvc3BpZWxiZXJpY2h0LzQwOTUwNjIiPjxzcGFuIGNsYXNzPSIiPjI6MiA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzciPjc8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OS8zMC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDMuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkFGQyBCb3VybmVtb3V0aCIgaHJlZj0iL2FmYy1ib3VybmVtb3V0aC9zcGllbHBsYW4vdmVyZWluLzk4OS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvOTg5LnBuZz9sbT0xNDU3OTkxODExIiB0aXRsZT0iQUZDIEJvdXJuZW1vdXRoIiBhbHQ9IkFGQyBCb3VybmVtb3V0aCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkFGQyBCb3VybmVtb3V0aCIgaHJlZj0iL2FmYy1ib3VybmVtb3V0aC9zcGllbHBsYW4vdmVyZWluLzk4OS9zYWlzb25faWQvMjAyMyI+Qm91cm5lbW91dGg8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxOC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA5NTEzNiIgaHJlZj0iL2FmYy1ib3VybmVtb3V0aF9hcnNlbmFsLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDk1MTM2Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4wOjQgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzgiPjg8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTAvOC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMyI+TWFuIENpdHk8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigzLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDk1MTQ2IiBocmVmPSIvYXJzZW5hbC1mY19tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzQwOTUxNDYiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjE6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSJMZWZ0IFdpbmdlciI+TFc8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJyZWNodHMiPjQ1JzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMy9zcGllbHRhZy85Ij45PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEwLzIxLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMy4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQ2hlbHNlYSBGQyIgaHJlZj0iL2ZjLWNoZWxzZWEvc3BpZWxwbGFuL3ZlcmVpbi82MzEvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzYzMS5wbmc/bG09MTY4MjQzNTkxMSIgdGl0bGU9IkNoZWxzZWEgRkMiIGFsdD0iQ2hlbHNlYSBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkNoZWxzZWEgRkMiIGhyZWY9Ii9mYy1jaGVsc2VhL3NwaWVscGxhbi92ZXJlaW4vNjMxL3NhaXNvbl9pZC8yMDIzIj5DaGVsc2VhPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTAuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwOTUxNTkiIGhyZWY9Ii9jaGVsc2VhLWZjX2Fyc2VuYWwtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzQwOTUxNTkiPjxzcGFuIGNsYXNzPSIiPjI6MiA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSJMZWZ0IFdpbmdlciI+TFc8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj4xMic8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjMvc3BpZWx0YWcvMTAiPjEwPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEwLzI4LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iU2hlZmZpZWxkIFVuaXRlZCIgaHJlZj0iL3NoZWZmaWVsZC11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi8zNTAvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzM1MC5wbmc/bG09MTQwOTI1NDEzOCIgdGl0bGU9IlNoZWZmaWVsZCBVbml0ZWQiIGFsdD0iU2hlZmZpZWxkIFVuaXRlZCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IlNoZWZmaWVsZCBVbml0ZWQiIGhyZWY9Ii9zaGVmZmllbGQtdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vMzUwL3NhaXNvbl9pZC8yMDIzIj5TaGVmZiBVdGQ8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxOS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA5NTE2NyIgaHJlZj0iL2Fyc2VuYWwtZmNfc2hlZmZpZWxkLXVuaXRlZC9pbmRleC9zcGllbGJlcmljaHQvNDA5NTE2NyI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+NTowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9IiIgdGl0bGU9IkxlZnQgV2luZ2VyIj5MVzwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+MjQnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzExIj4xMTwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMS80LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oNC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTmV3Y2FzdGxlIFVuaXRlZCIgaHJlZj0iL25ld2Nhc3RsZS11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi83NjIvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55Lzc2Mi5wbmc/bG09MTQ3MjkyMTE2MSIgdGl0bGU9Ik5ld2Nhc3RsZSBVbml0ZWQiIGFsdD0iTmV3Y2FzdGxlIFVuaXRlZCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9Ik5ld2Nhc3RsZSBVbml0ZWQiIGhyZWY9Ii9uZXdjYXN0bGUtdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vNzYyL3NhaXNvbl9pZC8yMDIzIj5OZXdjYXN0bGU8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPig2Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDk1MTgyIiBocmVmPSIvbmV3Y2FzdGxlLXVuaXRlZF9hcnNlbmFsLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDk1MTgyIj48c3BhbiBjbGFzcz0icmVkdGV4dCI+MTowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9IiIgdGl0bGU9IkNlbnRyZS1Gb3J3YXJkIj5DRjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+MTEnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzEyIj4xMjwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMS8xMS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDMuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkJ1cm5sZXkgRkMiIGhyZWY9Ii9mYy1idXJubGV5L3NwaWVscGxhbi92ZXJlaW4vMTEzMi9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEzMi5wbmc/bG09MTY4NjgxODg0MCIgdGl0bGU9IkJ1cm5sZXkgRkMiIGFsdD0iQnVybmxleSBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkJ1cm5sZXkgRkMiIGhyZWY9Ii9mYy1idXJubGV5L3NwaWVscGxhbi92ZXJlaW4vMTEzMi9zYWlzb25faWQvMjAyMyI+QnVybmxleTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIwLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDk1MTg3IiBocmVmPSIvYXJzZW5hbC1mY19idXJubGV5LWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDk1MTg3Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4zOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iIiB0aXRsZT0iQ2VudHJlLUZvcndhcmQiPkNGPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjE8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJyZWNodHMiPjgxJzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMy9zcGllbHRhZy8xMyI+MTM8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTEvMjUvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkFyc2VuYWwgRkMiIGhyZWY9Ii9mYy1hcnNlbmFsL3NwaWVscGxhbi92ZXJlaW4vMTEvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzExLnBuZz9sbT0xNDg5Nzg3ODUwIiB0aXRsZT0iQXJzZW5hbCBGQyIgYWx0PSJBcnNlbmFsIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJCcmVudGZvcmQgRkMiIGhyZWY9Ii9mYy1icmVudGZvcmQvc3BpZWxwbGFuL3ZlcmVpbi8xMTQ4L3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMTQ4LnBuZz9sbT0xNjI1MTUwNTQzIiB0aXRsZT0iQnJlbnRmb3JkIEZDIiBhbHQ9IkJyZW50Zm9yZCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkJyZW50Zm9yZCBGQyIgaHJlZj0iL2ZjLWJyZW50Zm9yZC9zcGllbHBsYW4vdmVyZWluLzExNDgvc2Fpc29uX2lkLzIwMjMiPkJyZW50Zm9yZDwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDExLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDk1MTk2IiBocmVmPSIvYnJlbnRmb3JkLWZjX2Fyc2VuYWwtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzQwOTUxOTYiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjA6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSJBdHRhY2tpbmcgTWlkZmllbGQiPkFNPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj45MCc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjMvc3BpZWx0YWcvMTQiPjE0PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEyLzIvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+SDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkFyc2VuYWwgRkMiIGhyZWY9Ii9mYy1hcnNlbmFsL3NwaWVscGxhbi92ZXJlaW4vMTEvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzExLnBuZz9sbT0xNDg5Nzg3ODUwIiB0aXRsZT0iQXJzZW5hbCBGQyIgYWx0PSJBcnNlbmFsIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJXb2x2ZXJoYW1wdG9uIFdhbmRlcmVycyIgaHJlZj0iL3dvbHZlcmhhbXB0b24td2FuZGVyZXJzL3NwaWVscGxhbi92ZXJlaW4vNTQzL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS81NDMucG5nP2xtPTE0Njc0OTY3ODQiIHRpdGxlPSJXb2x2ZXJoYW1wdG9uIFdhbmRlcmVycyIgYWx0PSJXb2x2ZXJoYW1wdG9uIFdhbmRlcmVycyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IldvbHZlcmhhbXB0b24gV2FuZGVyZXJzIiBocmVmPSIvd29sdmVyaGFtcHRvbi13YW5kZXJlcnMvc3BpZWxwbGFuL3ZlcmVpbi81NDMvc2Fpc29uX2lkLzIwMjMiPldvbHZlczwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEzLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDk1MjA3IiBocmVmPSIvYXJzZW5hbC1mY193b2x2ZXJoYW1wdG9uLXdhbmRlcmVycy9pbmRleC9zcGllbGJlcmljaHQvNDA5NTIwNyI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MjoxIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9IiIgdGl0bGU9IkF0dGFja2luZyBNaWRmaWVsZCI+QU08L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJyZWNodHMiPjkwJzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMy9zcGllbHRhZy8xNSI+MTU8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTIvNS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ikx1dG9uIFRvd24iIGhyZWY9Ii9sdXRvbi10b3duL3NwaWVscGxhbi92ZXJlaW4vMTAzMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTAzMS5wbmc/bG09MTQ1NzcyMzIyOCIgdGl0bGU9Ikx1dG9uIFRvd24iIGFsdD0iTHV0b24gVG93biIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9Ikx1dG9uIFRvd24iIGhyZWY9Ii9sdXRvbi10b3duL3NwaWVscGxhbi92ZXJlaW4vMTAzMS9zYWlzb25faWQvMjAyMyI+THV0b248L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxOC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA5NTIyMCIgaHJlZj0iL2x1dG9uLXRvd25fYXJzZW5hbC1mYy9pbmRleC9zcGllbGJlcmljaHQvNDA5NTIyMCI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+Mzo0IDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9IiIgdGl0bGU9IkxlZnQgV2luZ2VyIj5MVzwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+MjYnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzE2Ij4xNjwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMi85LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXN0b24gVmlsbGEiIGhyZWY9Ii9hc3Rvbi12aWxsYS9zcGllbHBsYW4vdmVyZWluLzQwNS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvNDA1LnBuZz9sbT0xNDY5NDQzNzY1IiB0aXRsZT0iQXN0b24gVmlsbGEiIGFsdD0iQXN0b24gVmlsbGEiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJBc3RvbiBWaWxsYSIgaHJlZj0iL2FzdG9uLXZpbGxhL3NwaWVscGxhbi92ZXJlaW4vNDA1L3NhaXNvbl9pZC8yMDIzIj5Bc3RvbiBWaWxsYTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDMuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwOTUyMjYiIGhyZWY9Ii9hc3Rvbi12aWxsYV9hcnNlbmFsLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDk1MjI2Ij48c3BhbiBjbGFzcz0icmVkdGV4dCI+MTowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9IiIgdGl0bGU9IkxlZnQgV2luZ2VyIj5MVzwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InJlY2h0cyI+MjAnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzE3Ij4xNzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMi8xNy8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkJyaWdodG9uICZhbXA7IEhvdmUgQWxiaW9uIiBocmVmPSIvYnJpZ2h0b24tYW1wLWhvdmUtYWxiaW9uL3NwaWVscGxhbi92ZXJlaW4vMTIzNy9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTIzNy5wbmc/bG09MTQ5MjcxODkwMiIgdGl0bGU9IkJyaWdodG9uICYgSG92ZSBBbGJpb24iIGFsdD0iQnJpZ2h0b24gJiBIb3ZlIEFsYmlvbiIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkJyaWdodG9uICZhbXA7IEhvdmUgQWxiaW9uIiBocmVmPSIvYnJpZ2h0b24tYW1wLWhvdmUtYWxiaW9uL3NwaWVscGxhbi92ZXJlaW4vMTIzNy9zYWlzb25faWQvMjAyMyI+QnJpZ2h0b248L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPig5Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDk1MjM3IiBocmVmPSIvYXJzZW5hbC1mY19icmlnaHRvbi1hbXAtaG92ZS1hbGJpb24vaW5kZXgvc3BpZWxiZXJpY2h0LzQwOTUyMzciPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjI6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSJMZWZ0IFdpbmdlciI+TFc8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJyZWNodHMiPjgnPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9IiI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIzL3NwaWVsdGFnLzE4Ij4xODwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMi8yMy8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkxpdmVycG9vbCBGQyIgaHJlZj0iL2ZjLWxpdmVycG9vbC9zcGllbHBsYW4vdmVyZWluLzMxL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zMS5wbmc/bG09MTQ1NjU2NzgxOSIgdGl0bGU9IkxpdmVycG9vbCBGQyIgYWx0PSJMaXZlcnBvb2wgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJMaXZlcnBvb2wgRkMiIGhyZWY9Ii9mYy1saXZlcnBvb2wvc3BpZWxwbGFuL3ZlcmVpbi8zMS9zYWlzb25faWQvMjAyMyI+TGl2ZXJwb29sPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA5NTI0OSIgaHJlZj0iL2xpdmVycG9vbC1mY19hcnNlbmFsLWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDk1MjQ5Ij48c3BhbiBjbGFzcz0iIj4xOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iIiB0aXRsZT0iTGVmdCBXaW5nZXIiPkxXPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj4yMic8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjMvc3BpZWx0YWcvMTkiPjE5PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEyLzI4LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iV2VzdCBIYW0gVW5pdGVkIiBocmVmPSIvd2VzdC1oYW0tdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vMzc5L3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zNzkucG5nP2xtPTE0NjQ2NzUyNjAiIHRpdGxlPSJXZXN0IEhhbSBVbml0ZWQiIGFsdD0iV2VzdCBIYW0gVW5pdGVkIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iV2VzdCBIYW0gVW5pdGVkIiBocmVmPSIvd2VzdC1oYW0tdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vMzc5L3NhaXNvbl9pZC8yMDIzIj5XZXN0IEhhbTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDYuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwOTUyNTciIGhyZWY9Ii9hcnNlbmFsLWZjX3dlc3QtaGFtLXVuaXRlZC9pbmRleC9zcGllbGJlcmljaHQvNDA5NTI1NyI+PHNwYW4gY2xhc3M9InJlZHRleHQiPjA6MiA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSJBdHRhY2tpbmcgTWlkZmllbGQiPkFNPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj43OSc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjMvc3BpZWx0YWcvMjAiPjIwPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEyLzMxLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMS5wbmc/bG09MTQ4OTc4Nzg1MCIgdGl0bGU9IkFyc2VuYWwgRkMiIGFsdD0iQXJzZW5hbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oNC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iRnVsaGFtIEZDIiBocmVmPSIvZmMtZnVsaGFtL3NwaWVscGxhbi92ZXJlaW4vOTMxL3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS85MzEucG5nP2xtPTE1NTY4MzE2ODciIHRpdGxlPSJGdWxoYW0gRkMiIGFsdD0iRnVsaGFtIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iRnVsaGFtIEZDIiBocmVmPSIvZmMtZnVsaGFtL3NwaWVscGxhbi92ZXJlaW4vOTMxL3NhaXNvbl9pZC8yMDIzIj5GdWxoYW08L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxNC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSJNYXRjaCBwcmV2aWV3IiBjbGFzcz0iIiBocmVmPSIvZnVsaGFtLWZjX2Fyc2VuYWwtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzQwOTUyNjgiPjxzcGFuIGNsYXNzPSIiPi06LSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5JbmZvcm1hdGlvbiBub3QgeWV0IGF2YWlsYWJsZTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPHRmb290PgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIxOCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNxdWFkOiAxOCwKICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRpbmcgZWxldmVuOiA2LAogICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGl0dXRlZCBpbjogOSwKICAgICAgICAgICAgICAgICAgICAgICAgT24gdGhlIGJlbmNoOiAzLAogICAgICAgICAgICAgICAgICAgICAgICBTdXNwZW5kZWQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIEluanVyZWQ6IDAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Zm9vdD4KICAgICAgICA8L3RhYmxlPgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJib3giPgogICAgPGRpdiBjbGFzcz0idGFibGUtaGVhZGVyIGltZy12YXQiPgogICAgICAgIDxhIG5hbWU9IkdCQ1MiIGhyZWY9Ii9jb21tdW5pdHktc2hpZWxkL3N0YXJ0c2VpdGUvd2V0dGJld2VyYi9HQkNTL3NhaXNvbl9pZC8yMDIzIj4KICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby90aW55L2diY3MucG5nP2xtPTE2NTkyNjU1NjIiIHRpdGxlPSJDb21tdW5pdHkgU2hpZWxkIiBhbHQ9IkNvbW11bml0eSBTaGllbGQiIGNsYXNzPSIiIC8+Q29tbXVuaXR5IFNoaWVsZCAgICAgICAgPC9hPgogICAgPC9kaXY+CiAgICAKPGRpdiBjbGFzcz0idG0tdGFicyI+CiAgICA8YSBjbGFzcz0idG0tdGFiIHRtLXRhYl9fYWN0aXZlLS1wYXJlbnQiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzIj48ZGl2IGNsYXNzPSIgdG0tdGFiX19hY3RpdmUiPjxzcGFuPkNvbXBhY3Q8L3NwYW4+PC9kaXY+PC9hPjxhIGNsYXNzPSJ0bS10YWIiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMSI+PGRpdiBjbGFzcz0iIj48c3Bhbj5EZXRhaWxlZDwvc3Bhbj48L2Rpdj48L2E+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLXRhYmxlIj4KICAgICAgICA8dGFibGU+CiAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+TWF0Y2hkYXk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlZlbnVlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiIGNvbHNwYW49IjIiPkZvcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xzcGFuPSIyIj5PcHBvbmVudDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+UmVzdWx0PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+UG9zLjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi10b3ItdGFibGUtaGVhZGVyIiB0aXRsZT0iR29hbHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdm9ybGFnZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJBc3Npc3RzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZ2VsYmVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJZZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZ2VsYnJvdGVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJTZWNvbmQgeWVsbG93IGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXJvdGVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJSZWQgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJyZWNodHMiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1taW51dGVuLXRhYmxlLWhlYWRlciIgdGl0bGU9Ik1pbnV0ZXMgcGxheWVkIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9jb21tdW5pdHktc2hpZWxkL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9HQkNTL3NhaXNvbl9pZC8yMDIzL2dydXBwZS9GRiI+RmluYWw8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OC82LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjMiPk1hbiBDaXR5PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDE0OTY2NiIgaHJlZj0iL2Fyc2VuYWwtZmNfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC80MTQ5NjY2Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij41OjIgPHNwYW4gY2xhc3M9ImVyZ2VibmlzX3p1c2F0eiI+IG9uIHBlbnM8L3NwYW4+PC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iIiB0aXRsZT0iIj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0icmVjaHRzIj4xNSc8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgIDx0Zm9vdD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMTgiPgogICAgICAgICAgICAgICAgICAgICAgICBTcXVhZDogMSwKICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRpbmcgZWxldmVuOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGl0dXRlZCBpbjogMSwKICAgICAgICAgICAgICAgICAgICAgICAgT24gdGhlIGJlbmNoOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBTdXNwZW5kZWQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIEluanVyZWQ6IDAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Zm9vdD4KICAgICAgICA8L3RhYmxlPgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJib3giPgogICAgPGRpdiBjbGFzcz0idGFibGUtaGVhZGVyIGltZy12YXQiPgogICAgICAgIDxhIG5hbWU9IkNHQiIgaHJlZj0iL2VmbC1jdXAvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL0NHQi9zYWlzb25faWQvMjAyMyI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9jZ2IucG5nP2xtPTE1NjY5MzczNDIiIHRpdGxlPSJFRkwgQ3VwIiBhbHQ9IkVGTCBDdXAiIGNsYXNzPSIiIC8+RUZMIEN1cCAgICAgICAgPC9hPgogICAgPC9kaXY+CiAgICAKPGRpdiBjbGFzcz0idG0tdGFicyI+CiAgICA8YSBjbGFzcz0idG0tdGFiIHRtLXRhYl9fYWN0aXZlLS1wYXJlbnQiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzIj48ZGl2IGNsYXNzPSIgdG0tdGFiX19hY3RpdmUiPjxzcGFuPkNvbXBhY3Q8L3NwYW4+PC9kaXY+PC9hPjxhIGNsYXNzPSJ0bS10YWIiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3BsdXMvMSI+PGRpdiBjbGFzcz0iIj48c3Bhbj5EZXRhaWxlZDwvc3Bhbj48L2Rpdj48L2E+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLXRhYmxlIj4KICAgICAgICA8dGFibGU+CiAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+TWF0Y2hkYXk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlZlbnVlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiIGNvbHNwYW49IjIiPkZvcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xzcGFuPSIyIj5PcHBvbmVudDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+UmVzdWx0PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+UG9zLjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi10b3ItdGFibGUtaGVhZGVyIiB0aXRsZT0iR29hbHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdm9ybGFnZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJBc3Npc3RzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZ2VsYmVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJZZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZ2VsYnJvdGVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJTZWNvbmQgeWVsbG93IGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXJvdGVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJSZWQgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJyZWNodHMiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1taW51dGVuLXRhYmxlLWhlYWRlciIgdGl0bGU9Ik1pbnV0ZXMgcGxheWVkIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lZmwtY3VwL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DR0Ivc2Fpc29uX2lkLzIwMjMvZ3J1cHBlLzNSIj5UaGlyZCBSb3VuZDwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij45LzI3LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJCcmVudGZvcmQgRkMiIGhyZWY9Ii9mYy1icmVudGZvcmQvc3BpZWxwbGFuL3ZlcmVpbi8xMTQ4L3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMTQ4LnBuZz9sbT0xNjI1MTUwNTQzIiB0aXRsZT0iQnJlbnRmb3JkIEZDIiBhbHQ9IkJyZW50Zm9yZCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkJyZW50Zm9yZCBGQyIgaHJlZj0iL2ZjLWJyZW50Zm9yZC9zcGllbHBsYW4vdmVyZWluLzExNDgvc2Fpc29uX2lkLzIwMjMiPkJyZW50Zm9yZDwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQxODg0NDkiIGhyZWY9Ii9icmVudGZvcmQtZmNfYXJzZW5hbC1mYy9pbmRleC9zcGllbGJlcmljaHQvNDE4ODQ0OSI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MDoxIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lZmwtY3VwL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DR0Ivc2Fpc29uX2lkLzIwMjMvZ3J1cHBlLzRSIj5Gb3VydGggUm91bmQ8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTEvMS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9IkFyc2VuYWwgRkMiIGhyZWY9Ii9mYy1hcnNlbmFsL3NwaWVscGxhbi92ZXJlaW4vMTEvc2Fpc29uX2lkLzIwMjMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzExLnBuZz9sbT0xNDg5Nzg3ODUwIiB0aXRsZT0iQXJzZW5hbCBGQyIgYWx0PSJBcnNlbmFsIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iV2VzdCBIYW0gVW5pdGVkIiBocmVmPSIvd2VzdC1oYW0tdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vMzc5L3NhaXNvbl9pZC8yMDIzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zNzkucG5nP2xtPTE0NjQ2NzUyNjAiIHRpdGxlPSJXZXN0IEhhbSBVbml0ZWQiIGFsdD0iV2VzdCBIYW0gVW5pdGVkIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iV2VzdCBIYW0gVW5pdGVkIiBocmVmPSIvd2VzdC1oYW0tdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vMzc5L3NhaXNvbl9pZC8yMDIzIj5XZXN0IEhhbTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQyMjA5MzgiIGhyZWY9Ii93ZXN0LWhhbS11bml0ZWRfYXJzZW5hbC1mYy9pbmRleC9zcGllbGJlcmljaHQvNDIyMDkzOCI+PHNwYW4gY2xhc3M9InJlZHRleHQiPjM6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIiIHRpdGxlPSJMZWZ0IFdpbmdlciI+TFc8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJyZWNodHMiPjY2JzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPHRmb290PgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIxOCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNxdWFkOiAxLAogICAgICAgICAgICAgICAgICAgICAgICBTdGFydGluZyBlbGV2ZW46IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIFN1YnN0aXR1dGVkIGluOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBPbiB0aGUgYmVuY2g6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIFN1c3BlbmRlZDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgSW5qdXJlZDogMCAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3Rmb290PgogICAgICAgIDwvdGFibGU+CiAgICA8L2Rpdj4KPC9kaXY+CjwvZGl2PgogICAgPGRpdiBjbGFzcz0ibGFyZ2UtNCBjb2x1bW5zIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3ZXJidW5nIHdlcmJ1bmctcmVjdGFuZ2xlMSI+CiAgPGRpdiBpZD0iZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiIHN0eWxlPSJtaW4td2lkdGg6IDMwMHB4OyBtaW4taGVpZ2h0OiAyNTBweDsiPgo8c2NyaXB0Pmdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7IGdvb2dsZXRhZy5kaXNwbGF5KCJkaXYtZ3B0LWFkLTE2MjE1MjY0NjM1MTEtMCIpOyB9KTs8L3NjcmlwdD4KICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iYm94IGhpZGUiPgogICAgPGgyIGNsYXNzPSJjb250ZW50LWJveC1oZWFkbGluZSI+CiAgICAgICAgUG9zaXRpb25zIHBsYXllZCAgICA8L2gyPgogICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0iZ2VzcGllbHRlUG9zaXRpb25lbiI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZlbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icG9zaXRpb25fMTAiIHN0eWxlPSItd2Via2l0LWJveC1zaGFkb3c6IDBweCAwcHggMTVweCA5cHggcmdiYSgxNjcsIDI3LCAzMCwgMC45OCk7LW1vei1ib3gtc2hhZG93OiAwcHggMHB4IDE1cHggOXB4IHJnYmEoMTY3LCAyNywgMzAsIDAuOTgpO2JveC1zaGFkb3c6IDBweCAwcHggMTVweCA5cHggcmdiYSgxNjcsIDI3LCAzMCwgMC45OCk7YmFja2dyb3VuZC1jb2xvcjogcmdiYSgxNjcsIDI3LCAzMCwgMC45OCk7Zm9udC1zaXplOjE2cHggIWltcG9ydGFudCIgdGl0bGU9IjIzLjA3NjkyMzA3NjkyMyI+Mzwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwb3NpdGlvbl8xNCIgc3R5bGU9Ii13ZWJraXQtYm94LXNoYWRvdzogMHB4IDBweCAxNXB4IDlweCByZ2JhKDE2NywgMjcsIDMwLCAwLjk4KTstbW96LWJveC1zaGFkb3c6IDBweCAwcHggMTVweCA5cHggcmdiYSgxNjcsIDI3LCAzMCwgMC45OCk7Ym94LXNoYWRvdzogMHB4IDBweCAxNXB4IDlweCByZ2JhKDE2NywgMjcsIDMwLCAwLjk4KTtiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDE2NywgMjcsIDMwLCAwLjk4KTtmb250LXNpemU6MTZweCAhaW1wb3J0YW50IiB0aXRsZT0iMzAuNzY5MjMwNzY5MjMxIj40PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBvc2l0aW9uXzExIiBzdHlsZT0iLXdlYmtpdC1ib3gtc2hhZG93OiAwcHggMHB4IDE1cHggOXB4IHJnYmEoMjI0LCA1MywgMCwgMC45OCk7LW1vei1ib3gtc2hhZG93OiAwcHggMHB4IDE1cHggOXB4IHJnYmEoMjI0LCA1MywgMCwgMC45OCk7Ym94LXNoYWRvdzogMHB4IDBweCAxNXB4IDlweCByZ2JhKDIyNCwgNTMsIDAsIDAuOTgpO2JhY2tncm91bmQtY29sb3I6IHJnYmEoMjI0LCA1MywgMCwgMC45OCk7Zm9udC1zaXplOjIycHggIWltcG9ydGFudCIgdGl0bGU9IjEwMCI+MTM8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImJveCI+CiAgICA8aDIgY2xhc3M9ImNvbnRlbnQtYm94LWhlYWRsaW5lIj4KICAgICAgICBQb3NpdGlvbnMgcGxheWVkICAgIDwvaDI+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJnZXNwaWVsdGVQb3NpdGlvbmVuIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVsZCI+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ6YWhsLWFuemVpZ2UgcG9zLWJveCBwb3NpdGlvbnNib3hfMTAiIHRpdGxlPSJBdHRhY2tpbmcgTWlkZmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdXNzZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3Bvcy8xMCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJveCBwLTEwIiBzdHlsZT0iZm9udC1zaXplOjE2cHggIWltcG9ydGFudDt3aWR0aDozMHB4O2hlaWdodDozMHB4O2JvcmRlci1yYWRpdXM6MTVweDtsaW5lLWhlaWdodDozMHB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ienVzYXR6LWtyZWlzIj5BTTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3MtYW56ZWlnZSBwb3MtYm94IHBvc2l0aW9uc2JveF8xMCIgdGl0bGU9IkF0dGFja2luZyBNaWRmaWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF1c3NlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcG9zLzEwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtYm94IHAtMTAiIHN0eWxlPSJmb250LXNpemU6MTZweCAhaW1wb3J0YW50O3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7Ym9yZGVyLXJhZGl1czoxNXB4O2xpbmUtaGVpZ2h0OjMwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ienVzYXR6LWtyZWlzIj4zPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InphaGwtYW56ZWlnZSBwb3MtYm94IHBvc2l0aW9uc2JveF8xNCIgdGl0bGU9IkNlbnRyZS1Gb3J3YXJkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXVzc2VuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1ib3ggcC0xNCIgc3R5bGU9ImZvbnQtc2l6ZToxNnB4ICFpbXBvcnRhbnQ7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtib3JkZXItcmFkaXVzOjE1cHg7bGluZS1oZWlnaHQ6MzBweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Inp1c2F0ei1rcmVpcyI+Q0Y8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zLWFuemVpZ2UgcG9zLWJveCBwb3NpdGlvbnNib3hfMTQiIHRpdGxlPSJDZW50cmUtRm9yd2FyZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF1c3NlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcG9zLzE0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtYm94IHAtMTQiIHN0eWxlPSJmb250LXNpemU6MTZweCAhaW1wb3J0YW50O3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7Ym9yZGVyLXJhZGl1czoxNXB4O2xpbmUtaGVpZ2h0OjMwcHg7Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDRiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ienVzYXR6LWtyZWlzIj40PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InphaGwtYW56ZWlnZSBwb3MtYm94IHBvc2l0aW9uc2JveF8xMSIgdGl0bGU9IkxlZnQgV2luZ2VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYXVzc2VuIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1ib3ggcC0xMSIgc3R5bGU9ImZvbnQtc2l6ZToyMnB4ICFpbXBvcnRhbnQ7d2lkdGg6NTBweDtoZWlnaHQ6NTBweDtib3JkZXItcmFkaXVzOjI1cHg7bGluZS1oZWlnaHQ6NDlweDsiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ6dXNhdHota3JlaXMiPkxXPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcy1hbnplaWdlIHBvcy1ib3ggcG9zaXRpb25zYm94XzExIiB0aXRsZT0iTGVmdCBXaW5nZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdXNzZW4iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3Bvcy8xMSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWJveCBwLTExIiBzdHlsZT0iZm9udC1zaXplOjIycHggIWltcG9ydGFudDt3aWR0aDo1MHB4O2hlaWdodDo1MHB4O2JvcmRlci1yYWRpdXM6MjVweDtsaW5lLWhlaWdodDo0OXB4OyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTFcgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Inp1c2F0ei1rcmVpcyI+MTM8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgICAgICA8dGFibGU+CiAgICAgICAgPHRoZWFkPgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGg+UGxheWVkIGFzLi4uPC90aD4KICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZWluc2FldHplLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFwcGVhcmFuY2VzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdG9yLXRhYmxlLWhlYWRlciIgdGl0bGU9IkdvYWxzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdm9ybGFnZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJBc3Npc3RzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICA8L3RoZWFkPgogICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTEiPkxlZnQgV2luZ2VyPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3Bvcy8xMSI+MTM8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3Bvcy8xMSI+MzwvYT48L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTEiPjE8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImhhdXB0bGluayI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3Bvcy8xNCI+Q2VudHJlLUZvcndhcmQ8L2E+PC90ZD4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcG9zLzE0Ij40PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTQiPjI8L2E+PC90ZD4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMjMvcG9zLzE0Ij4xPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTAiPkF0dGFja2luZyBNaWRmaWVsZDwvYT48L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTAiPjM8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDIzL3Bvcy8xMCI+LTwvYT48L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAyMy9wb3MvMTAiPi08L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICA8L3RhYmxlPgo8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJib3giPgogICAgPGgyIGNsYXNzPSJjb250ZW50LWJveC1oZWFkbGluZSI+CiAgICAgICAgU3RhdHMgYnkgY2x1YiAgICA8L2gyPgogICAgPHRhYmxlPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aCBjb2xzcGFuPSIyIj5DbHViPC90aD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1laW5zYWV0emUtdGFibGUtaGVhZGVyIiB0aXRsZT0iQXBwZWFyYW5jZXMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi10b3ItdGFibGUtaGVhZGVyIiB0aXRsZT0iR29hbHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi12b3JsYWdlLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFzc2lzdHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQnJpZ2h0b24gJmFtcDsgSG92ZSBBbGJpb24iIGhyZWY9Ii9icmlnaHRvbi1hbXAtaG92ZS1hbGJpb24vc3BpZWxwbGFuL3ZlcmVpbi8xMjM3L3NhaXNvbl9pZC8yMDIwIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMjM3LnBuZz9sbT0xNDkyNzE4OTAyIiB0aXRsZT0iQnJpZ2h0b24gJiBIb3ZlIEFsYmlvbiIgYWx0PSJCcmlnaHRvbiAmIEhvdmUgQWxiaW9uIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9IkJyaWdodG9uICZhbXA7IEhvdmUgQWxiaW9uIiBocmVmPSIvYnJpZ2h0b24tYW1wLWhvdmUtYWxiaW9uL3NwaWVscGxhbi92ZXJlaW4vMTIzNy9zYWlzb25faWQvMjAyMCI+QnJpZ2h0b248L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvdmVyZWluLzEyMzciPjEyMTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjI1PC90ZD4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xNDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJLUkMgR2VuayIgaHJlZj0iL2tyYy1nZW5rL3NwaWVscGxhbi92ZXJlaW4vMTE4NC9zYWlzb25faWQvMjAxOCI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTE4NC5wbmc/bG09MTQ2NDg5OTQxMCIgdGl0bGU9IktSQyBHZW5rIiBhbHQ9IktSQyBHZW5rIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9IktSQyBHZW5rIiBocmVmPSIva3JjLWdlbmsvc3BpZWxwbGFuL3ZlcmVpbi8xMTg0L3NhaXNvbl9pZC8yMDE4Ij5LUkMgR2VuazwvYT48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IkxlYW5kcm8gVHJvc3NhcmQiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC92ZXJlaW4vMTE4NCI+MTIwPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+Mzk8L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjIxPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkxvbW1lbCBVbml0ZWQiIGhyZWY9Ii9sb21tZWwtc2svc3BpZWxwbGFuL3ZlcmVpbi81MDI2L3NhaXNvbl9pZC8yMDE0Ij48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS81MDI2XzE0OTk0NjQyODUucG5nP2xtPTE0OTk0NjQyODUiIHRpdGxlPSImbmJzcDsiIGFsdD0iTG9tbWVsIFVuaXRlZCIgY2xhc3M9IiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIj48YSB0aXRsZT0iTG9tbWVsIFVuaXRlZCIgaHJlZj0iL2xvbW1lbC1zay9zcGllbHBsYW4vdmVyZWluLzUwMjYvc2Fpc29uX2lkLzIwMTQiPkxvbW1lbCBVbml0ZWQ8L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvdmVyZWluLzUwMjYiPjUzPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MjQ8L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjE8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMyI+QXJzZW5hbDwvYT48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IkxlYW5kcm8gVHJvc3NhcmQiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC92ZXJlaW4vMTEiPjQ0PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NzwvdGQ+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTI8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iT3VkLUhldmVybGVlIExldXZlbiIgaHJlZj0iL291ZC1oZXZlcmxlZS1sZXV2ZW4vc3BpZWxwbGFuL3ZlcmVpbi8yNzI3L3NhaXNvbl9pZC8yMDE1Ij48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yNzI3LnBuZz9sbT0xNjkzMjU4ODQ0IiB0aXRsZT0iT3VkLUhldmVybGVlIExldXZlbiIgYWx0PSJPdWQtSGV2ZXJsZWUgTGV1dmVuIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9Ik91ZC1IZXZlcmxlZSBMZXV2ZW4iIGhyZWY9Ii9vdWQtaGV2ZXJsZWUtbGV1dmVuL3NwaWVscGxhbi92ZXJlaW4vMjcyNy9zYWlzb25faWQvMjAxNSI+T0ggTGV1dmVuPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iTGVhbmRybyBUcm9zc2FyZCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3ZlcmVpbi8yNzI3Ij4zMTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjk8L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjc8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iS1ZDIFdlc3RlcmxvIiBocmVmPSIva3ZjLXdlc3RlcmxvL3NwaWVscGxhbi92ZXJlaW4vOTY4L3NhaXNvbl9pZC8yMDEzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS85NjgucG5nP2xtPTE1MjIwNzgyNTQiIHRpdGxlPSJLVkMgV2VzdGVybG8iIGFsdD0iS1ZDIFdlc3RlcmxvIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9IktWQyBXZXN0ZXJsbyIgaHJlZj0iL2t2Yy13ZXN0ZXJsby9zcGllbHBsYW4vdmVyZWluLzk2OC9zYWlzb25faWQvMjAxMyI+S1ZDIFdlc3RlcmxvPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iTGVhbmRybyBUcm9zc2FyZCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3ZlcmVpbi85NjgiPjIwPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NDwvdGQ+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CiAgICA8YSB0aXRsZT0iTGVhbmRybyBUcm9zc2FyZCIgY2xhc3M9ImNvbnRlbnQtbGluayIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW52ZXJlaW4vc3BpZWxlci8xNDQwMjgiPk1vcmUgZGV0YWlsczwvYT48L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJib3giPgogICAgPGgyIGNsYXNzPSJjb250ZW50LWJveC1oZWFkbGluZSI+CiAgICAgICAgUGVyZm9ybWFuY2UgYnkgY29tcGV0aXRpb24gICAgPC9oMj4KICAgIDx0YWJsZT4KICAgICAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGggY29sc3Bhbj0iMiI+Q29tcGV0aXRpb248L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWVpbnNhZXR6ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJBcHBlYXJhbmNlcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXRvci10YWJsZS1oZWFkZXIiIHRpdGxlPSJHb2FscyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXZvcmxhZ2UtdGFibGUtaGVhZGVyIiB0aXRsZT0iQXNzaXN0cyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICA8L3RoZWFkPgogICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9nYjEucG5nP2xtPTE1MjExMDQ2NTYiIHRpdGxlPSJQcmVtaWVyIExlYWd1ZSIgYWx0PSJQcmVtaWVyIExlYWd1ZSIgY2xhc3M9IiIgLz48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MiPjxhIHRpdGxlPSJQcmVtaWVyIExlYWd1ZSIgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3N0YXJ0c2VpdGUvd2V0dGJld2VyYi9HQjEiPlByZW1pZXIgTGVhZ3VlPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iTGVhbmRybyBUcm9zc2FyZCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3dldHRiZXdlcmIvR0IxIj4xNTE8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4yOTwvdGQ+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MjU8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9sb2dvL3RpbnkvYmUxLnBuZz9sbT0xNjAxNDc4MTI0IiB0aXRsZT0iSnVwaWxlciBQcm8gTGVhZ3VlIiBhbHQ9Ikp1cGlsZXIgUHJvIExlYWd1ZSIgY2xhc3M9IiIgLz48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MiPjxhIHRpdGxlPSJKdXBpbGVyIFBybyBMZWFndWUiIGhyZWY9Ii9qdXBpbGVyLXByby1sZWFndWUvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL0JFMSI+SnVwaWxlciBQcm8gTGVhZ3VlPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iTGVhbmRybyBUcm9zc2FyZCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3dldHRiZXdlcmIvQkUxIj44NTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjI0PC90ZD4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xNDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9iZTIucG5nP2xtPTE2NTY5MzAwNjIiIHRpdGxlPSJDaGFsbGVuZ2VyIFBybyBMZWFndWUiIGFsdD0iQ2hhbGxlbmdlciBQcm8gTGVhZ3VlIiBjbGFzcz0iIiAvPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9IkNoYWxsZW5nZXIgUHJvIExlYWd1ZSIgaHJlZj0iL3Byb3hpbXVzLWxlYWd1ZS9zdGFydHNlaXRlL3dldHRiZXdlcmIvQkUyIj5DaGFsbGVuZ2VyIFBybyBMZWFndWU8L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvd2V0dGJld2VyYi9CRTIiPjYyPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MjY8L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9sb2dvL3RpbnkvZWpwbC5wbmc/bG09MTQwNDU1NDAxOSIgdGl0bGU9Ikp1cGlsZXIgUHJvIExlYWd1ZSBDaGFtcGlvbnMnIFBsYXktT2ZmcyIgYWx0PSJKdXBpbGVyIFBybyBMZWFndWUgQ2hhbXBpb25zJyBQbGF5LU9mZnMiIGNsYXNzPSIiIC8+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIj48YSB0aXRsZT0iSnVwaWxlciBQcm8gTGVhZ3VlIENoYW1waW9ucyYjMDM5OyBQbGF5LU9mZnMiIGhyZWY9Ii9qdXBpbGVyLXByby1sZWFndWUtcGxheW9mZi1pL3N0YXJ0c2VpdGUvd2V0dGJld2VyYi9FSlBMIj5KdXBpbGVyIFBybyBMZWFndWUgQ2hhbXBpb25zJyBQbGF5LU9mZnM8L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvd2V0dGJld2VyYi9FSlBML3ZlcmVpbi8xMTg0Ij4yMTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjg8L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjQ8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9sb2dvL3RpbnkvcG9iZS5wbmc/bG09MTQwNDU1NDAzOSIgdGl0bGU9Ikp1cGlsZXIgUHJvIExlYWd1ZSBFdXJvcGUgUGxheS1PZmZzIiBhbHQ9Ikp1cGlsZXIgUHJvIExlYWd1ZSBFdXJvcGUgUGxheS1PZmZzIiBjbGFzcz0iIiAvPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9Ikp1cGlsZXIgUHJvIExlYWd1ZSBFdXJvcGUgUGxheS1PZmZzIiBocmVmPSIvanVwaWxlci1wcm8tbGVhZ3VlLXBsYXlvZmYtaWkvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL1BPQkUiPkp1cGlsZXIgUHJvIExlYWd1ZSBFdXJvcGUgUGxheS1PZmZzPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iTGVhbmRybyBUcm9zc2FyZCIgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ0MDI4L3NhaXNvbi8yMDE2L3dldHRiZXdlcmIvUE9CRS92ZXJlaW4vMTE4NCI+NjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjM8L3RkPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjE8L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9sb2dvL3RpbnkvZWJlbC5wbmc/bG09MTQwNDU1NDA2NyIgdGl0bGU9IkVuZHJ1bmRlIEp1cGlsZXIgUHJvIExlYWd1ZSIgYWx0PSJFbmRydW5kZSBKdXBpbGVyIFBybyBMZWFndWUiIGNsYXNzPSIiIC8+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIj48YSB0aXRsZT0iRW5kcnVuZGUgSnVwaWxlciBQcm8gTGVhZ3VlIiBocmVmPSIvZW5kcnVuZGUtanVwaWxlci1wcm8tbGVhZ3VlL3N0YXJ0c2VpdGUvd2V0dGJld2VyYi9FQkVMIj5FbmRydW5kZSBKdXBpbGVyIFBybyBMZWFndWU8L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDQwMjgvc2Fpc29uLzIwMTQvd2V0dGJld2VyYi9FQkVML3ZlcmVpbi81MDI2Ij42PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTwvdGQ+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9lc2pwLnBuZz9sbT0xNDE1Nzk0MzM2IiB0aXRsZT0iSnVwaWxlciBQcm8gTGVhZ3VlIHBsYXlvZmYgRXVyb3BhIExlYWd1ZSIgYWx0PSJKdXBpbGVyIFBybyBMZWFndWUgcGxheW9mZiBFdXJvcGEgTGVhZ3VlIiBjbGFzcz0iIiAvPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyI+PGEgdGl0bGU9Ikp1cGlsZXIgUHJvIExlYWd1ZSBwbGF5b2ZmIEV1cm9wYSBMZWFndWUiIGhyZWY9Ii9lbnRzY2hlaWR1bmdzc3BpZWxlLWp1cGlsZXItcHJvLWxlYWd1ZS9zdGFydHNlaXRlL3dldHRiZXdlcmIvRVNKUCI+SnVwaWxlciBQcm8gTGVhZ3VlIHBsYXlvZmYgRXVyb3BhIExlYWd1ZTwvYT48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IkxlYW5kcm8gVHJvc3NhcmQiIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NDAyOC9zYWlzb24vMjAxNy93ZXR0YmV3ZXJiL0VTSlAvdmVyZWluLzExODQiPjE8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xPC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3Rib2R5PgogICAgPC90YWJsZT4KICAgIDxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBjbGFzcz0iY29udGVudC1saW5rIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9kZXRhaWxsaWVydGVsZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NDAyOCI+TW9yZSBkZXRhaWxzPC9hPjwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImJveCI+CiAgICA8aDIgY2xhc3M9ImNvbnRlbnQtYm94LWhlYWRsaW5lIj4KICAgICAgICBOYXRpb25hbCB0ZWFtIGNhcmVlciAgICA8L2gyPgogICAgPHRhYmxlPgogICAgICAgIDx0aGVhZD4KICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij4jPC90aD4KICAgICAgICAgICAgPHRoIGNvbHNwYW49IjIiIGNsYXNzPSJoaWRlLWZvci1zbWFsbCI+TmF0aW9uYWwgdGVhbTwvdGg+CiAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5EZWJ1dDwvdGg+CiAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZWluc2FldHplLXRhYmxlLWhlYWRlciIgdGl0bGU9Ik1hdGNoZXMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXRvci10YWJsZS1oZWFkZXIiPjwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgPC90aGVhZD4KICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItcmVjaHRzIHplbnRyaWVydCB1ZWJlcnplaWxlIHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS92ZXJ5c21hbGwvMTkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJCZWxnaXVtIiBhbHQ9IkJlbGdpdW0iIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI1IiBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyB1ZWJlcnplaWxlIHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxhIHRpdGxlPSJCZWxnaXVtIiBocmVmPSIvYmVsZ2llbi9zdGFydHNlaXRlL3ZlcmVpbi8zMzgyIj5CZWxnaXVtPC9hPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGJnX2dydWVuXzIwIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICA5CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3ZlcnlzbWFsbC8xOS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkJlbGdpdW0iIGFsdD0iQmVsZ2l1bSIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIGhpZGUtZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxhIHRpdGxlPSJCZWxnaXVtIiBocmVmPSIvYmVsZ2llbi9zdGFydHNlaXRlL3ZlcmVpbi8zMzgyIj5CZWxnaXVtPC9hPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NwaWVsL2luZGV4L3NwaWVsYmVyaWNodC8zMzMwNjg4IiB0aXRsZT0iVUVGQSBOYXRpb25zIExlYWd1ZSBBOiBEZW5tYXJrIC0gQmVsZ2l1bSAwOjIiPlNlcCA1LCAyMDIwPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDQwMjgvdmVyZWluX2lkLzMzODIiPjMwPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDQwMjgvdmVyZWluX2lkLzMzODIvbnVyRWluc2F0ei8yIj43PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItcmVjaHRzIHplbnRyaWVydCB1ZWJlcnplaWxlIHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS92ZXJ5c21hbGwvMTkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJCZWxnaXVtIiBhbHQ9IkJlbGdpdW0iIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI1IiBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyB1ZWJlcnplaWxlIHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxhIHRpdGxlPSJCZWxnaXVtIFUyMSIgaHJlZj0iL2JlbGdpZW4tdTIxL3N0YXJ0c2VpdGUvdmVyZWluLzkzMTUiPkJlbGdpdW0gVTIxPC9hPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGJnX3JvdF8yMCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMTkKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItcmVjaHRzIHplbnRyaWVydCBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9mbGFnZ2UvdmVyeXNtYWxsLzE5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iQmVsZ2l1bSIgYWx0PSJCZWxnaXVtIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGEgdGl0bGU9IkJlbGdpdW0gVTIxIiBocmVmPSIvYmVsZ2llbi11MjEvc3RhcnRzZWl0ZS92ZXJlaW4vOTMxNSI+QmVsZ2l1bSBVMjE8L2E+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3BpZWwvaW5kZXgvc3BpZWxiZXJpY2h0LzI1Nzc4ODEiIHRpdGxlPSJVRUZBIEV1cm9wZWFuIFVuZGVyLTIxIENoYW1waW9uc2hpcCBRdWFsaWZ5aW5nOiBCZWxnaXVtIFUyMSAtIE1vbnRlbmVncm8gVTIxIDE6MiI+TWFyIDI4LCAyMDE2PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDQwMjgvdmVyZWluX2lkLzkzMTUiPjE8L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NDAyOC92ZXJlaW5faWQvOTMxNS9udXJFaW5zYXR6LzIiPi08L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1yZWNodHMgemVudHJpZXJ0IHVlYmVyemVpbGUgc2hvdy1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3ZlcnlzbWFsbC8xOS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkJlbGdpdW0iIGFsdD0iQmVsZ2l1bSIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNvbHNwYW49IjUiIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIHVlYmVyemVpbGUgc2hvdy1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGEgdGl0bGU9IkJlbGdpdW0gVTE5IiBocmVmPSIvYmVsZ2llbi11MTkvc3RhcnRzZWl0ZS92ZXJlaW4vMTYzMzgiPkJlbGdpdW0gVTE5PC9hPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGJnX3JvdF8yMCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMTcKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItcmVjaHRzIHplbnRyaWVydCBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9mbGFnZ2UvdmVyeXNtYWxsLzE5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iQmVsZ2l1bSIgYWx0PSJCZWxnaXVtIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGEgdGl0bGU9IkJlbGdpdW0gVTE5IiBocmVmPSIvYmVsZ2llbi11MTkvc3RhcnRzZWl0ZS92ZXJlaW4vMTYzMzgiPkJlbGdpdW0gVTE5PC9hPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3NwaWVsL2luZGV4L3NwaWVsYmVyaWNodC8yNzgwMzgxIiB0aXRsZT0iSW50ZXJuYXRpb25hbCBGcmllbmRsaWVzOiBCZWxnaXVtIFUxOSAtIFNlcmJpYSBVMTkgMDowIj5GZWIgMjYsIDIwMTI8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NDAyOC92ZXJlaW5faWQvMTYzMzgiPjg8L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NDAyOC92ZXJlaW5faWQvMTYzMzgvbnVyRWluc2F0ei8yIj4tPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItcmVjaHRzIHplbnRyaWVydCB1ZWJlcnplaWxlIHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS92ZXJ5c21hbGwvMTkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJCZWxnaXVtIiBhbHQ9IkJlbGdpdW0iIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI1IiBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyB1ZWJlcnplaWxlIHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxhIHRpdGxlPSJCZWxnaXVtIFUxOCIgaHJlZj0iL2JlbGdpZW4tdTE4L3N0YXJ0c2VpdGUvdmVyZWluLzE2MzM3Ij5CZWxnaXVtIFUxODwvYT4gICAgICAgICAgICA8L3RkPgogICAgICAgIDwvdHI+CiAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBiZ19yb3RfMjAiPgogICAgICAgICAgICAKICAgICAgICAgICAgICAgIDE4CiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3ZlcnlzbWFsbC8xOS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkJlbGdpdW0iIGFsdD0iQmVsZ2l1bSIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIGhpZGUtZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxhIHRpdGxlPSJCZWxnaXVtIFUxOCIgaHJlZj0iL2JlbGdpZW4tdTE4L3N0YXJ0c2VpdGUvdmVyZWluLzE2MzM3Ij5CZWxnaXVtIFUxODwvYT4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zcGllbC9pbmRleC9zcGllbGJlcmljaHQvMjc4NTU5MyIgdGl0bGU9IkludGVybmF0aW9uYWwgRnJpZW5kbGllczogRGVubWFyayBVMTggLSBCZWxnaXVtIFUxOCAwOjIiPk9jdCAyMCwgMjAxMTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbmF0aW9uYWxtYW5uc2NoYWZ0L3NwaWVsZXIvMTQ0MDI4L3ZlcmVpbl9pZC8xNjMzNyI+MzwvYT48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbmF0aW9uYWxtYW5uc2NoYWZ0L3NwaWVsZXIvMTQ0MDI4L3ZlcmVpbl9pZC8xNjMzNy9udXJFaW5zYXR6LzIiPi08L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1yZWNodHMgemVudHJpZXJ0IHVlYmVyemVpbGUgc2hvdy1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3ZlcnlzbWFsbC8xOS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkJlbGdpdW0iIGFsdD0iQmVsZ2l1bSIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNvbHNwYW49IjUiIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIHVlYmVyemVpbGUgc2hvdy1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGEgdGl0bGU9IkJlbGdpdW0gVTE3IiBocmVmPSIvYmVsZ2llbi11MTcvc3RhcnRzZWl0ZS92ZXJlaW4vMjMyMTkiPkJlbGdpdW0gVTE3PC9hPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgPC90cj4KICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGJnX3JvdF8yMCI+CiAgICAgICAgICAgIAogICAgICAgICAgICAgICAgMTgKICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItcmVjaHRzIHplbnRyaWVydCBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9mbGFnZ2UvdmVyeXNtYWxsLzE5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iQmVsZ2l1bSIgYWx0PSJCZWxnaXVtIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGEgdGl0bGU9IkJlbGdpdW0gVTE3IiBocmVmPSIvYmVsZ2llbi11MTcvc3RhcnRzZWl0ZS92ZXJlaW4vMjMyMTkiPkJlbGdpdW0gVTE3PC9hPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVnIDQsIDIwMTAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9sZWFuZHJvLXRyb3NzYXJkL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NDAyOC92ZXJlaW5faWQvMjMyMTkiPjExPC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDQwMjgvdmVyZWluX2lkLzIzMjE5L251ckVpbnNhdHovMiI+LTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgdWViZXJ6ZWlsZSBzaG93LWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9mbGFnZ2UvdmVyeXNtYWxsLzE5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iQmVsZ2l1bSIgYWx0PSJCZWxnaXVtIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY29sc3Bhbj0iNSIgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MgdWViZXJ6ZWlsZSBzaG93LWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8YSB0aXRsZT0iQmVsZ2l1bSBVMTYiIGhyZWY9Ii9iZWxnaWVuLXUxNi9zdGFydHNlaXRlL3ZlcmVpbi8yMzI4MiI+QmVsZ2l1bSBVMTY8L2E+ICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgogICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgYmdfcm90XzIwIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAyMgogICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1yZWNodHMgemVudHJpZXJ0IGhpZGUtZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS92ZXJ5c21hbGwvMTkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJCZWxnaXVtIiBhbHQ9IkJlbGdpdW0iIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8YSB0aXRsZT0iQmVsZ2l1bSBVMTYiIGhyZWY9Ii9iZWxnaWVuLXUxNi9zdGFydHNlaXRlL3ZlcmVpbi8yMzI4MiI+QmVsZ2l1bSBVMTY8L2E+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc3BpZWwvaW5kZXgvc3BpZWxiZXJpY2h0LzI4MTM1ODQiIHRpdGxlPSJJbnRlcm5hdGlvbmFsIEZyaWVuZGxpZXM6IEJlbGdpdW0gVTE2IC0gRmlubGFuZCBVMTYgNDowIj5NYXIgMSwgMjAxMDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbmF0aW9uYWxtYW5uc2NoYWZ0L3NwaWVsZXIvMTQ0MDI4L3ZlcmVpbl9pZC8yMzI4MiI+NTwvYT48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL2xlYW5kcm8tdHJvc3NhcmQvbmF0aW9uYWxtYW5uc2NoYWZ0L3NwaWVsZXIvMTQ0MDI4L3ZlcmVpbl9pZC8yMzI4Mi9udXJFaW5zYXR6LzIiPi08L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CiAgICAgICAgICAgIDxhIHRpdGxlPSJMZWFuZHJvIFRyb3NzYXJkIiBjbGFzcz0iY29udGVudC1saW5rIiBocmVmPSIvbGVhbmRyby10cm9zc2FyZC9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDQwMjgiPkdvIHRvIG5hdGlvbmFsIHBsYXllciBwcm9maWxlPC9hPiAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3ZXJidW5nIHdlcmJ1bmctcmVjdGFuZ2xlMiI+CiAgPGRpdiBpZD0iZGl2LWdwdC1hZC0xNjIxNTI4MDE4OTMwLTAiIHN0eWxlPSJtaW4td2lkdGg6IDMwMHB4OyBtaW4taGVpZ2h0OiAyNTBweDsiPgo8c2NyaXB0Pmdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7IGdvb2dsZXRhZy5kaXNwbGF5KCJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIpOyB9KTs8L3NjcmlwdD4KICA8L2Rpdj4KPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8c2NyaXB0IGFzeW5jIHNyYz0iL2pzL2N1c3RvbS90bS10cmFjay1saW5rcy5taW4uanMiIHR5cGU9Im1vZHVsZSI+PC9zY3JpcHQ+CjxkaXYgY2xhc3M9IndlcmJ1bmcgd2VyYnVuZy1mdWxsc2l6ZV9jb250ZW50YWQiPgogIDxkaXYgaWQ9ImRpdi1ncHQtYWQtMTYyMTUyODE3MzUyNC0wIiBzdHlsZT0ibWluLXdpZHRoOiA3MjhweDsgbWluLWhlaWdodDogOTBweDsiPgo8c2NyaXB0Pmdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7IGdvb2dsZXRhZy5kaXNwbGF5KCJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIpOyB9KTs8L3NjcmlwdD4KICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgPC9tYWluPgoKICAgICAgICA8Zm9vdGVyPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0bS1mb290ZXIiPgogICAgICAgICAgICA8YSBocmVmPSIvIgogICAgICAgICAgIGNsYXNzPSJ0bS1mb290ZXJfX2xvZ28iPgogICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2hlYWQvdHJhbnNmZXJtYXJrdF9sb2dvLnN2ZyIgYWx0PSJUcmFuc2Zlcm1hcmt0IiBoZWlnaHQ9IjMzIiB3aWR0aD0iODAiLz4KICAgICAgICA8L2E+CiAgICAgICAgICA8dWwgY2xhc3M9InRtLWZvb3Rlcl9fbGlua3MiPgogICAgPGxpIGNsYXNzPSJ0bS1mb290ZXJfX2xpbmtzLWl0ZW0iPgogICAgICA8YSBocmVmPSIvaW50ZXJuL2ltcHJlc3N1bSI+CiAgICAgICAgICBMZWdhbCBub3RpY2UgICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJ0bS1mb290ZXJfX2xpbmtzLWl0ZW0iPgogICAgICA8YSBocmVmPSIvaW50ZXJuL3dlYi9kYXRlbnNjaHV0eiI+CiAgICAgICAgICBEYXRhIHByb3RlY3Rpb24gICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJ0bS1mb290ZXJfX2xpbmtzLWl0ZW0iPgogICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJjbXAtbGluayI+CiAgICAgICAgICBQcml2YWN5ICAgICAgPC9hPgogICAgPC9saT4KICAgIDxsaSBjbGFzcz0idG0tZm9vdGVyX19saW5rcy1pdGVtIj4KICAgICAgPGEgaHJlZj0iL2ludGVybi9hbmIiPgogICAgICAgICAgR2VuZXJhbCBjb25kaXRpb25zIG9mIHVzZSAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9InRtLWZvb3Rlcl9fbGlua3MtaXRlbSI+CiAgICAgIDxhIGhyZWY9Ii9pbnRlcm4vdG10ZWFtIj4KICAgICAgICAgIFRNLVRlYW0gICAgICA8L2E+CiAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InRtLWZvb3Rlcl9fbGlua3MtaXRlbSI+CiAgICAgIDxhIGhyZWY9Ii9pbnRlcm4vZmFxIj4KICAgICAgICAgIEZBUSAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9InRtLWZvb3Rlcl9fbGlua3MtaXRlbSI+CiAgICAgIDxhIGhyZWY9Ii9pbnRlcm4vZmVobGVybWVsZGVuIj4KICAgICAgICAgIEZvdW5kIGEgbWlzdGFrZT8gICAgICA8L2E+CiAgICA8L2xpPgogIDwvdWw+CjwvZGl2PgogICAgICAgIDwvZm9vdGVyPgogICAgICAgICAgICAgICAgPGRpdiBpZD0ibWVudWVfb3ZlcmxheSI+PC9kaXY+CiAgICA8L2Rpdj4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgdmFyIGlhbV9kYXRhID0gewoic3QiOiJ0cmFuc2ZlciIsCiJjcCI6ImF1c2xhbmRfY28udWtfciIsCiJjbyI6IiIKfQogICAgPC9zY3JpcHQ+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJtb2R1bGUiPgogICAgICAgIHZhciBkZWZhdWx0T3B0aW9ucyA9IHsKICAgICAgICAgICAgdHJhY2tpbmc6ICEwLAogICAgICAgICAgICByZWZyZXNoQWRzOiAhMAogICAgICAgIH07CiAgICAgICAgZXhwb3J0IHZhciByZWZyZXNoQWQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGUsIG47CiAgICAgICAgICAgIFtBU0NEUC5oYXNPd25Qcm9wZXJ0eSgiYWRTIiksIG51bGwgPT09IChlID0gQVNDRFAuYWRTKSB8fCB2b2lkIDAgPT09IGUgPyB2b2lkIDAgOiBlLmhhc093blByb3BlcnR5KCJyZWxvYWRBZHMiKSwgImZ1bmN0aW9uIiA9PSB0eXBlb2YobnVsbCA9PT0gKG4gPSBBU0NEUC5hZFMpIHx8IHZvaWQgMCA9PT0gbiA/IHZvaWQgMCA6IG4ucmVsb2FkQWRzKV0uZXZlcnkoZnVuY3Rpb24oZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGUKICAgICAgICAgICAgfSkgJiYgQVNDRFAuYWRTLnJlbG9hZEFkcygpCiAgICAgICAgfTsKICAgICAgICBleHBvcnQgdmFyIFRtVHJhY2tpbmdBbmRBZHMgPSBmdW5jdGlvbihlLCBuKSB7CiAgICAgICAgICAgIHZvaWQgMCA9PT0gbiAmJiAobiA9IGRlZmF1bHRPcHRpb25zKTsKICAgICAgICAgICAgdmFyIHIgPSBbInRhYmVsbGUiLCAicmVpdGVyIiwgImZvcnVtIl0uaW5jbHVkZXMoZSkgPyBlIDogIiI7CiAgICAgICAgICAgIG4udHJhY2tpbmcgJiYgKGd0YWcoImV2ZW50IiwgInBhZ2VfdmlldyIsIHsKICAgICAgICAgICAgICAgIHBhZ2VfcGF0aDogIi9qc0NvbnRlbnQiICsgd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lCiAgICAgICAgICAgIH0pLCBzZW5kSXZ3RGF0YShyKSksIG4ucmVmcmVzaEFkcyAmJiAidW5kZWZpbmVkIiAhPSB0eXBlb2YgQVNDRFAgJiYgcmVmcmVzaEFkKCkKICAgICAgICB9OwogICAgICAgIHdpbmRvdy50bVRyYWNraW5nQW5kQWRzID0gZnVuY3Rpb24oZSwgbikgewogICAgICAgICAgICByZXR1cm4gVG1UcmFja2luZ0FuZEFkcyhlLCBuKQogICAgICAgIH07CiAgICA8L3NjcmlwdD4KICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgogICAgICAgICAgICBjb25zdCBpb21tSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIElPTW0gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICBJT01tKCdjb25maWd1cmUnLCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0OiBpYW1fZGF0YS5zdCwKICAgICAgICAgICAgICAgICAgICAgICAgZG46ICdkYXRhLTg0YTBmMzQ1NWQudHJhbnNmZXJtYXJrdC5jb20nLAogICAgICAgICAgICAgICAgICAgICAgICBtaDogNQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIElPTW0oJ3BhZ2V2aWV3JywgewogICAgICAgICAgICAgICAgICAgICAgICBjcDogaWFtX2RhdGEuY3AsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvOiBpYW1fZGF0YS5jbwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW9tbUludGVydmFsKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwgMjUwKTsKICAgICAgICA8L3NjcmlwdD4KICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KCWlmKHR5cGVvZihhZGV0KSA9PSAiYm9vbGVhbiIgJiYgYWRldCA9PSBmYWxzZSl7CgkJaW1nX3NyYz0iL3N0YXRpYy9zaW5nbGVwaWN0dXJlcy9qazk5aGhmc2RoMjA5bmJua2psZGdoOTBzZ2hmc2RsayI7Cgl9IGVsc2UgewoJCWltZ19zcmM9Ii9zdGF0aWMvc2luZ2xlcGljdHVyZXMvamt1OTB3aGpsa2pid2J0YTFnNGI4aDg5Zmg4c2doOGQiOwoJfQoJdmFyIGVsZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbWciKTsKCWRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbSk7CgllbGVtLnNyYyA9IGltZ19zcmM7Cjwvc2NyaXB0PgoKICAgICAgICAgICAgPHNjcmlwdD4KICAgICAgICAgICAgJChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBjbnQgPSAkKCdkaXYubGFyZ2UtNC5jb2x1bW5zJykubGVuZ3RoOwogICAgICAgICAgICAgICAgaWYgKGNudCA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNpZGViYXJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYubGFyZ2UtNC5jb2x1bW5zJyk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHNpZGViYXJEaXYgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgnI3dlcmJ1bmdfcmVjb21tZW5kZXJfc2lkZWJhcl93cmFwcGVyJykuYXBwZW5kVG8oc2lkZWJhckRpdik7CiAgICAgICAgICAgICAgICAgICAgICAgICQoJyN3ZXJidW5nX3JlY29tbWVuZGVyX3NpZGViYXJfd3JhcHBlcicpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIDwvc2NyaXB0PgogICAgICAgIDxkaXYgaWQ9IndlcmJ1bmdfcmVjb21tZW5kZXJfc2lkZWJhcl93cmFwcGVyIiBzdHlsZT0iZGlzcGxheTogbm9uZTsiPgogICAgICAgICAgICA8ZGl2IAogICAgaWQ9InJlY29tbWVuZGVyX3NpZGViYXIiIAogICAgY2xhc3M9ImJveCIKICAgID4KICAgIDxkaXYgY2xhc3M9Ik9VVEJSQUlOIiBkYXRhLXdpZGdldC1pZD0iU0xfRFRfU0IiPjwvZGl2Pgo8dG0tY29uc2VudCAKICAgIG5vLWNoZWNrYm94IAogICAgdHlwZT0ib3V0YnJhaW4iIAogICAgZW1iZWQ9IlBITmpjbWx3ZENCMGVYQmxQU0owWlhoMEwycGhkbUZ6WTNKcGNIUWlJR0Z6ZVc1alBTSmhjM2x1WXlJZ2MzSmpQU0l2TDNkcFpHZGxkSE11YjNWMFluSmhhVzR1WTI5dEwyOTFkR0p5WVdsdUxtcHpJajQ4TDNOamNtbHdkRDQ9Ij4KPC90bS1jb25zZW50Pgo8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL2N1c3RvbS1lbGVtZW50LWdsb2JhbHMvdG0tZ2xvYmFsLWVsZW1lbnRzLmVzbS5qcyIgZGVmZXI+PC9zY3JpcHQ+PHNjcmlwdCBub21vZHVsZT0iIiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL2N1c3RvbS1lbGVtZW50LWdsb2JhbHMvdG0tZ2xvYmFsLWVsZW1lbnRzLmpzIiBkZWZlcj48L3NjcmlwdD48dG0tY29uc2VudCB0eXBlPSJhZGl0aW9uIiBuby1jaGVja2JveCBlbWJlZD0iUEhOamNtbHdkQ0J6Y21NOUltaDBkSEJ6T2k4dlkzSmxZWFJwZG1VdFkyUnVMbTlrWkhOelpYSjJaUzVqYjIwdmJHOWhaR1Z5TG1welAzQjFZbXhwYzJobGNqMTBiU0lnWVhONWJtTTlJbUZ6ZVc1aklqNDhMM05qY21sd2REND0iPjwvdG0tY29uc2VudD48dG0tY29uc2VudCB0eXBlPSJnb29nbGVhbmFseXRpY3MiIG5vLWNoZWNrYm94IGVtYmVkPSJQSE5qY21sd2RDQmhjM2x1WXlCemNtTTlJbWgwZEhCek9pOHZkM2QzTG1kdmIyZHNaWFJoWjIxaGJtRm5aWEl1WTI5dEwyZDBZV2N2YW5NL2FXUTlWVUV0TXpneE5qSXdOQzB4TXlJK1BDOXpZM0pwY0hRKyI+PC90bS1jb25zZW50Pgo8dG0tY29uc2VudCB0eXBlPSJwdWJtYXRpYyIgbm8tY2hlY2tib3ggZW1iZWQ9IlBITmpjbWx3ZENCMGVYQmxQU2QwWlhoMEwycGhkbUZ6WTNKcGNIUW5QZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlGQlhWRDE3ZlRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJuYjI5bmJHVjBZV2NnUFNCbmIyOW5iR1YwWVdjZ2ZId2dlMzA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbmIyOW5iR1YwWVdjdVkyMWtJRDBnWjI5dloyeGxkR0ZuTG1OdFpDQjhmQ0JiWFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJuY0hSU1lXNGdQU0JtWVd4elpUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkJYVkM1cWMweHZZV1JsWkNBOUlDZ3BJRDArSUhzZ0x5OVFkV0pOWVhScFl5QndkM1F1YW5NZ2IyNGdiRzloWkNCallXeHNZbUZqYXlCcGN5QjFjMlZrSUhSdklHeHZZV1FnUjFCVUNpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYkc5aFpFZFFWQ2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2IyRmtSMUJVSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdRMmhsWTJzZ2RHaGxJR2R3ZEZKaGJpQm1iR0ZuQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGbmNIUlNZVzRwSUhzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ozQjBVbUZ1SUQwZ2RISjFaVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHZGhaSE1nUFNCa2IyTjFiV1Z1ZEM1amNtVmhkR1ZGYkdWdFpXNTBLQ2R6WTNKcGNIUW5LVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIVnpaVk5UVENBOUlDZG9kSFJ3Y3pvbklEMDlJR1J2WTNWdFpXNTBMbXh2WTJGMGFXOXVMbkJ5YjNSdlkyOXNPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JuWVdSekxuTnlZeUE5SUNoMWMyVlRVMHdnUHlBbmFIUjBjSE02SnlBNklDZG9kSFJ3T2ljcElDc2dKeTh2YzJWamRYSmxjSFZpWVdSekxtY3VaRzkxWW14bFkyeHBZMnN1Ym1WMEwzUmhaeTlxY3k5bmNIUXVhbk1uT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibTlrWlNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ2R6WTNKcGNIUW5LVnN3WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzV3WVhKbGJuUk9iMlJsTG1sdWMyVnlkRUpsWm05eVpTaG5ZV1J6TENCdWIyUmxLVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5T3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSbUZwYkhOaFptVWdkRzhnWTJGc2JDQm5jSFFLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhObGRGUnBiV1Z2ZFhRb2JHOWhaRWRRVkN3Z05UQXdLVHNLQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSEIxY213Z1BTQjNhVzVrYjNjdWJHOWpZWFJwYjI0dWFISmxaanNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnZFhKc0lEMGdKeTh2WVdSekxuQjFZbTFoZEdsakxtTnZiUzlCWkZObGNuWmxjaTlxY3k5d2QzUXZNVFl6TWpJNUx6RXdNVEF6SnpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZabWxzWlZabGNuTnBiMjVKWkNBOUlDY25Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1LSEIxY213dWFXNWtaWGhQWmlnbmNIZDBkajBuS1Q0d0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhKbFoyVjRjQ0E5SUM5d2QzUjJQU2d1S2o4cEtDWjhKQ2t2WnpzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JXRjBZMmhsY3lBOUlISmxaMlY0Y0M1bGVHVmpLSEIxY213cE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUtHMWhkR05vWlhNdWJHVnVaM1JvSUQ0OUlESWdKaVlnYldGMFkyaGxjMXN4WFM1c1pXNW5kR2dnUGlBd0tYc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Wm1sc1pWWmxjbk5wYjI1SlpDQTlJQ2N2Snl0dFlYUmphR1Z6V3pGZE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkM1JoWkhNZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkelkzSnBjSFFuS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzZEdGa2N5NWhjM2x1WXlBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkM1JoWkhNdWRIbHdaU0E5SUNkMFpYaDBMMnBoZG1GelkzSnBjSFFuT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGQwWVdSekxuTnlZeUE5SUhWeWJDdHdjbTltYVd4bFZtVnljMmx2Ymtsa0t5Y3ZjSGQwTG1wekp6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibTlrWlNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ2R6WTNKcGNIUW5LVnN3WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExuQmhjbVZ1ZEU1dlpHVXVhVzV6WlhKMFFtVm1iM0psS0hkMFlXUnpMQ0J1YjJSbEtUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBwS0NrN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR3dmMyTnlhWEIwUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E9Ij48L3RtLWNvbnNlbnQ+PHRtLWNvbnNlbnQgdHlwZT0iYW1hem9uYWR2ZXJ0aXNpbmciIG5vLWNoZWNrYm94IGVtYmVkPSJQSE5qY21sd2RENGhablZ1WTNScGIyNG9kQ3drTEdVc2N5eHBMR0VzYnlsN0pGdDBYWHg4S0NSYmRGMDllMmx1YVhRNlpuVnVZM1JwYjI0b0tYdGZLQ0pwSWl4aGNtZDFiV1Z1ZEhNcGZTeG1aWFJqYUVKcFpITTZablZ1WTNScGIyNG9LWHRmS0NKbUlpeGhjbWQxYldWdWRITXBmU3h6WlhSRWFYTndiR0Y1UW1sa2N6cG1kVzVqZEdsdmJpZ3BlMzBzZEdGeVoyVjBhVzVuUzJWNWN6cG1kVzVqZEdsdmJpZ3BlM0psZEhWeWJsdGRmU3hmVVRwYlhYMHNLR0U5WlM1amNtVmhkR1ZGYkdWdFpXNTBLSE1wS1M1aGMzbHVZejBoTUN4aExuTnlZejFwTENodlBXVXVaMlYwUld4bGJXVnVkSE5DZVZSaFowNWhiV1VvY3lsYk1GMHBMbkJoY21WdWRFNXZaR1V1YVc1elpYSjBRbVZtYjNKbEtHRXNieWtwTzJaMWJtTjBhVzl1SUY4b1pTeHpLWHNrVzNSZExsOVJMbkIxYzJnb1cyVXNjMTBwZlgwb0ltRndjM1JoWnlJc2QybHVaRzkzTEdSdlkzVnRaVzUwTENKelkzSnBjSFFpTENJdkwyTXVZVzFoZW05dUxXRmtjM2x6ZEdWdExtTnZiUzloWVhneUwyRndjM1JoWnk1cWN5SXBMR0Z3YzNSaFp5NXBibWwwS0h0d2RXSkpSRG9pTlRFek5DSXNZV1JUWlhKMlpYSTZJbWR2YjJkc1pYUmhaeUo5S1R0amIyNXpkQ0JwYm1sMFFXMWhlbTl1UVdSQ2FXUnpQU2gwTENRcFBUNTdLQ1FtSmlKMFkyeHZZV1JsWkNJOVBUMTBMbVYyWlc1MFUzUmhkSFZ6Zkh3aWRYTmxjbUZqZEdsdmJtTnZiWEJzWlhSbElqMDlQWFF1WlhabGJuUlRkR0YwZFhNcEppWmhjSE4wWVdjdVptVjBZMmhDYVdSektBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0emJHOTBjenBiQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0emJHOTBTVVE2SW1ScGRpMW5jSFF0WVdRdE1UWXlNVFV5TkRrd016azFOaTB3SWl4emJHOTBUbUZ0WlRvaU5UZzNOemd4TmpRdlJHVnphM1J2Y0MxQ2FXeHNZbTloY21RdE1TSXNjMmw2WlhNNlcxczVOakFzT1RCZExGczVOekFzTWpVd1hTeGJPVFV3TERrd1hTeGJOekk0TERrd1hTeGJPVGN3TERrd1hTeGRmU3dLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTNOc2IzUkpSRG9pWkdsMkxXZHdkQzFoWkMweE5qSXhOVEkyTkRZek5URXhMVEFpTEhOc2IzUk9ZVzFsT2lJMU9EYzNPREUyTkM5RVpYTnJkRzl3TFUxbFpHbDFiVkpsWTNSaGJtZHNaUzB4SWl4emFYcGxjenBiV3pNd01Dd3lOVEJkTEZzek16WXNNamd3WFN4ZGZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM05zYjNSSlJEb2laR2wyTFdkd2RDMWhaQzB4TmpJeE5USTNOVEl4T1RNNUxUQWlMSE5zYjNST1lXMWxPaUkxT0RjM09ERTJOQzlFWlhOcmRHOXdMVk5yZVhOamNtRndaWEl0TVNJc2MybDZaWE02VzFzeE5qQXNOakF3WFN4Yk16TTJMREk0TUYwc1d6TXdNQ3d5TlRCZExGc3pNREFzTmpBd1hTeGJNVEl3TENBMk1EQmRMRjE5TEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCN2MyeHZkRWxFT2lKa2FYWXRaM0IwTFdGa0xURTJNakUxTWpnd01UZzVNekF0TUNJc2MyeHZkRTVoYldVNklqVTROemM0TVRZMEwwUmxjMnQwYjNBdFRXVmthWFZ0VW1WamRHRnVaMnhsTFRJaUxITnBlbVZ6T2x0Yk16TTJMREk0TUYwc1d6TXdNQ3d5TlRCZExGMTlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3YzJ4dmRFbEVPaUprYVhZdFozQjBMV0ZrTFRFMk1qRTFNamd4TWpNek9UZ3RNQ0lzYzJ4dmRFNWhiV1U2SWpVNE56YzRNVFkwTDBSbGMydDBiM0F0VTJ0NWMyTnlZWEJsY2kweUlpeHphWHBsY3pwYld6TXdNQ3d5TlRCZExGc3pNellzTWpnd1hTeGJNVFl3TERZd01GMHNXek13TUN3Mk1EQmRMQ0JiTVRJd0xDQTJNREJkTEYxOUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdjMnh2ZEVsRU9pSmthWFl0WjNCMExXRmtMVEUyTWpFMU1qZ3hOek0xTWpRdE1DSXNjMnh2ZEU1aGJXVTZJalU0TnpjNE1UWTBMMFJsYzJ0MGIzQXRRbWxzYkdKdllYSmtMVElpTEhOcGVtVnpPbHRiT1RVd0xEa3dYU3hiT1Rjd0xESTFNRjBzV3pjeU9DdzVNRjBzV3prM01DdzVNRjBzV3prMk1DdzVNRjBzV3pNd01Dd2dNalV3WFYxOUxBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdjMnh2ZEVsRU9pSmthWFl0WjNCMExXRmtMVEUyTWpFMU16UXlPRGt5T1RZdE1DSXNjMnh2ZEU1aGJXVTZJalU0TnpjNE1UWTBMMDF2WW1sc1pTMU5aV1JwZFcxU1pXTjBZVzVuYkdVdE1TSXNjMmw2WlhNNlcxc3pNREFzTVRBd1hTeGJNekF3TERJMU1GMHNYWDBzQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0emJHOTBTVVE2SW1ScGRpMW5jSFF0WVdRdE1UWTNPVE0wTVRRMk9ERTVNeTB3SWl4emJHOTBUbUZ0WlRvaU5UZzNOemd4TmpRdlRXOWlhV3hsTFUxbFpHbDFiVkpsWTNSaGJtZHNaUzB5SWl4emFYcGxjenBiV3pNd01Dd2dNalV3WFN3Z1d6TXlNQ3dnTlRCZExDQmJNalV3TENBeU5UQmRMQ0JiTXpBd0xDQXhNREJkTENCYk16TTJMQ0F5T0RCZExGMTlMQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3YzJ4dmRFbEVPaUprYVhZdFozQjBMV0ZrTFRFMk1qRTFNelF6TmpreU9UUXRNQ0lzYzJ4dmRFNWhiV1U2SWpVNE56YzRNVFkwTDAxdlltbHNaUzFJWVd4bWNHRm5aUzB4SWl4emFYcGxjenBiV3pNd01DdzJNREJkTEZzek1EQXNNalV3WFN4ZGZTd0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlM05zYjNSSlJEb2laR2wyTFdkd2RDMWhaQzB4TmpJeE5UTTBORE15T0RJNUxUQWlMSE5zYjNST1lXMWxPaUkxT0RjM09ERTJOQzlOYjJKcGJHVXRVM1JwWTJ0NUlpeHphWHBsY3pwYld6TXdNQ3cxTUYwc1d6TXlNQ3cxTUYwc1hYMHNYU3gwYVcxbGIzVjBPakpsTTMwc0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWjFibU4wYVc5dUtIUXBlMmR2YjJkc1pYUmhaeTVqYldRdWNIVnphQ2htZFc1amRHbHZiaWdwZTJGd2MzUmhaeTV6WlhSRWFYTndiR0Y1UW1sa2N5Z3BMR2R2YjJkc1pYUmhaeTV3ZFdKaFpITW9LUzV5WldaeVpYTm9LQ2w5S1gwcGZUc2lablZ1WTNScGIyNGlQVDEwZVhCbGIyWWdkMmx1Wkc5M0xsOWZkR05tWVhCcEppWjNhVzVrYjNjdVgxOTBZMlpoY0drb0ltRmtaRVYyWlc1MFRHbHpkR1Z1WlhJaUxESXNhVzVwZEVGdFlYcHZia0ZrUW1sa2N5azdQQzl6WTNKcGNIUSsiPjwvdG0tY29uc2VudD48dG0tY29uc2VudCB0eXBlPSJnb29nbGVhZHZlcnRpc2luZyIgbm8tY2hlY2tib3ggZW1iZWQ9IlBITmpjbWx3ZENBZ2MzSmpQU0pvZEhSd2N6b3ZMM05sWTNWeVpYQjFZbUZrY3k1bkxtUnZkV0pzWldOc2FXTnJMbTVsZEM5MFlXY3Zhbk12WjNCMExtcHpJaUJoYzNsdVl6MGlZWE41Ym1NaVBqd3ZjMk55YVhCMFBnPT0iPjwvdG0tY29uc2VudD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Fzc2V0cy9hYTY5YzZlOWM1MWYxZTgxMTg0NzA4MmM2MzYzMzk1Ni9ncmlkdmlldy9qcXVlcnkueWlpZ3JpZHZpZXcuanM/bG09MTcwMzE2NDAwOSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9qcy9jdXN0b20vdG0tbWVudS5taW4uanM/bG09MTcwMzE2NDAwOSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9qcy9jdXN0b20vdmVuZG9ycy5taW4uanM/bG09MTcwMzE2NDAwOSI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL3N2ZWx0ZS1jb21wb25lbnRzL2NvbnNlbnQvYnVuZGxlLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL2N1c3RvbS90bS1za3lzY3JhcGVyLm1pbi5qcz9sbT0xNzAzMTY0MDA5Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovKjwhW0NEQVRBWyovCgl2YXIgbG9naW5Vcmw9Jy9wcm9maWwvbG9naW4nOwoJdmFyIG9ubHlERSA9ICcnOwoJdmFyIG9ubHlNb2JpbGUgPSAnJzsKCXZhciBvbmx5VGFibGV0ID0gJyc7Cgl2YXIgZ2V0VXNlcklEID0gJyc7CgogICAgZnVuY3Rpb24gc2VuZEl2d0RhdGEodHlwKSB7CiAgICAgICAgaWYodHlwID09ICd0YWJlbGxlJykgewogICAgICAgICAgICB2YXIgaWFtX2RhdGEgPSB7CiJzdCI6InRyYW5zZmVyIiwKImNwIjoiYXVzbGFuZF9jby51a19yX3QiLAoiY28iOiIiCn0KCiAgICAgICAgfWVsc2UgaWYodHlwID09ICdyZWl0ZXInKSB7CiAgICAgICAgICAgIHZhciBpYW1fZGF0YSA9IHsKInN0IjoidHJhbnNmZXIiLAoiY3AiOiJhdXNsYW5kX2NvLnVrX3JfciIsCiJjbyI6IiIKfQoKICAgICAgICB9ZWxzZSBpZih0eXAgPT0gJ2ZvcnVtJykgewogICAgICAgICAgICB2YXIgaWFtX2RhdGEgPSB7CiJzdCI6InRyYW5zZmVyIiwKImNwIjoiYXVzbGFuZF9jby51a19yX2ZvcnVtIiwKImNvIjoiIgp9CgogICAgICAgIH1lbHNlIHsKICAgICAgICAgICAgdmFyIGlhbV9kYXRhID0gewoic3QiOiJ0cmFuc2ZlciIsCiJjcCI6ImF1c2xhbmRfY28udWtfcl9zIiwKImNvIjoiIgp9CgogICAgICAgIH0KICAgICAgICBpZih0eXBlb2YgSU9NbSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBJT01tKCdwYWdldmlldycsIHsgY3A6IGlhbV9kYXRhLmNwLCBjbzogaWFtX2RhdGEuY28gfSk7CiAgICAgICAgfQogICAgfQpqUXVlcnkoZnVuY3Rpb24oJCkgewpqUXVlcnkoJyN5dzEnKS55aWlHcmlkVmlldyh7J2FqYXhVcGRhdGUnOlsneXcxJ10sJ2FqYXhWYXInOidhamF4JywncGFnZXJDbGFzcyc6J3BhZ2VyJywnbG9hZGluZ0NsYXNzJzonZ3JpZFx4MkR2aWV3XHgyRGxvYWRpbmcnLCdmaWx0ZXJDbGFzcyc6J2ZpbHRlcnMnLCd0YWJsZUNsYXNzJzonaXRlbXMnLCdzZWxlY3RhYmxlUm93cyc6MSwnZW5hYmxlSGlzdG9yeSc6ZmFsc2UsJ3VwZGF0ZVNlbGVjdG9yJzonXHg3QnBhZ2VceDdELFx4MjBceDdCc29ydFx4N0QnLCdmaWx0ZXJTZWxlY3Rvcic6J1x4N0JmaWx0ZXJceDdEJywnYWZ0ZXJBamF4VXBkYXRlJzpmdW5jdGlvbigpIHt3aW5kb3cuTGF6eUxvYWRJbnN0YW5jZS51cGRhdGUoKTsgdG1UcmFja2luZ0FuZEFkcygpOyB0cmFja0xpbmtzKCk7IGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCJ0bUluaXRUb29sdGlwIikpO319KTsKfSk7Ci8qXV0+Ki8KPC9zY3JpcHQ+CjwvYm9keT4KCjwvaHRtbD4=
  recorded_at: Sun, 31 Dec 2023 15:08:47 GMT
recorded_with: VCR 6.2.0
