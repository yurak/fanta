---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/plus/0?saison=2023
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 14:51:42 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web08
      Set-Cookie:
      - TMSESSID=fe6ec6537eaee8d8479b21ce7b558100; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 aba4c94d7226be4a72f6be3307b6227a.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - 8GBV9Np3REIeB8098Jzu00DqB2Koej_CKOCvk0VjWK3X9d8gMrgKrA==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">

<head>
    
<script type="text/javascript" data-description="sourcepoint stub code">
    !function () { var e = function () { var e, t = "__tcfapiLocator", a = [], n = window; for (; n;) { try { if (n.frames[t]) { e = n; break } } catch (e) { } if (n === window.top) break; n = n.parent } e || (!function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var i = a.createElement("iframe"); i.style.cssText = "display:none", i.name = t, a.body.appendChild(i) } else setTimeout(e, 5); return !r }(), n.__tcfapi = function () { for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++)n[r] = arguments[r]; if (!n.length) return a; if ("setGdprApplies" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && "boolean" == typeof n[3] && (e = n[3], "function" == typeof n[2] && n[2]("set", !0)); else if ("ping" === n[0]) { var i = { gdprApplies: e, cmpLoaded: !1, cmpStatus: "stub" }; "function" == typeof n[2] && n[2](i) } else a.push(n) }, n.addEventListener("message", (function (e) { var t = "string" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data } catch (e) { } var n = a.__tcfapiCall; n && window.__tcfapi(n.command, n.version, (function (a, r) { var i = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId } }; t && (i = JSON.stringify(i)), e.source.postMessage(i, "*") }), n.parameter) }), !1)) }; "undefined" != typeof module ? module.exports = e : e() }();
</script>
<script data-description="sourcepoint configuration">
window._sp_ = {
    config: {"accountId":1254,"propertyId":7427,"gdpr":{"consentLanguage":"en","targetingParams":{"acps":"false"}},"baseEndpoint":"https://cdn.privacy-mgmt.com","isSPA":true,"cpPropertyId":"7a84b340"}}
</script>
<script src="https://cdn.privacy-mgmt.com/wrapperMessagingWithoutDetection.js" async></script>

<script type="text/javascript" data-description="contentpass integration">
    (function() {
        var cpBaseUrl = 'https://cp.transfermarkt.com';
        var cpController = cpBaseUrl + '/now.js';
        var cpPropertyId = '7a84b340';

        !function(C,o,n,t,P,a,s){C['CPObject']=n;C[n]||(C[n]=function(){
        (C[n].q=C[n].q||[]).push(arguments)});C[n].l=+new Date;a=o.createElement(t);
        s=o.getElementsByTagName(t)[0];a.src=P;s.parentNode.insertBefore(a,s)}
        (window,document,'cp','script',cpController);

        !function(C,o,n,t,P){if(!C[n].patched){cp('extension','authenticate');P=C[n].q.push;
        C[n].q.push=function(a){if(a[0]==='authenticate'){if((o['cookie']||'').indexOf('_cpauthhint=')===-1&&
        !(C['localStorage']||{})['_cpuser']&&C.location.href.toLowerCase().indexOf('cpauthenticated')===-1){
        t={isLoggedIn:function(){return false;},hasValidSubscription:function(){return false;}};
        (typeof a[1]==='function'&&a[1](null,t));C[n].afp=true;P.apply(C[n].q,[['authenticate',null]]);
        return t;}}P.apply(C[n].q,[a]);}}}
        (window,document,'cp',false);

        cp('create', cpPropertyId, {
        baseUrl: cpBaseUrl
        });

        cp('render', {
        onFullConsent: function() {
            console.log('[DEMO] onFullConsent');
        }
        })
    })()
</script>

<script type="text/javascript" data-description="contentpass sourcepoint fast path">
(function () {
    cp('authenticate', function(err, user) {
        if (err || (!user.isLoggedIn() && !user.hasValidSubscription())) {
        console.log('[SPCP] Taking fast path');
        (function spExecMsg() {
            if (window._sp_ && window._sp_.executeMessaging) {
            if (!window._sp_.config.isSPA) {
                console.warn('[SPCP] Sourcepoint not in SPA mode!');
            } else if (window._sp_.version) {
                console.log('[SPCP] Sourcepoint already running');
            } else {
                console.log('[SPCP] Starting Sourcepoint');
                window._sp_.executeMessaging();
            }
            } else {
            console.log('[SPCP] Sourcepoint not loaded yet. Retrying.');
            setTimeout(spExecMsg, 10);
            }
        })();
        }
    });
    })();
</script>
    <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" sizes="16x16" href="/favicon-16x16.png">
    <link rel="shortcut icon" sizes="192x192" href="/android-chrome-192x192.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=no" />
<meta name="robots" content="noindex, nofollow" />
<meta name="keywords" content="Kevin De Bruyne,Manchester City,Premier League,Belgium" />
<meta name="description" content="Player stats of Kevin De Bruyne (Manchester City) ➤ Goals ➤ Assists ➤ Matches played ➤ All performance data" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://img.a.transfermarkt.technology/portrait/big/88755-1684245748.jpg?lm=1" />
<meta property="og:description" content="" />
<meta property="og:title" content="Kevin De Bruyne - Stats 23/24" />
<meta property="og:url" content="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/plus/0?saison=2023" />
<link hreflang="de" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="de-LU" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="de-AT" rel="alternate" href="https://www.transfermarkt.at/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="de-CH" rel="alternate" href="https://www.transfermarkt.ch/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="tr" rel="alternate" href="https://www.transfermarkt.com.tr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="it-CH" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="it" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="pl" rel="alternate" href="https://www.transfermarkt.pl/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="en-GB" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="en-IE" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-ES" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-CL" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-VE" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-EC" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-CU" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="nl" rel="alternate" href="https://www.transfermarkt.nl/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="pt" rel="alternate" href="https://www.transfermarkt.pt/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="ru" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="world" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="fr-CH" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="fr" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="fr-CA" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="fr-CI" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="fr-LU" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="fr-BE" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="pt-BR" rel="alternate" href="https://www.transfermarkt.com.br/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="en-US" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="en-CA" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="en-IN" rel="alternate" href="https://www.transfermarkt.co.in/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="en-ZA" rel="alternate" href="https://www.transfermarkt.co.za/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="x-default" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="en" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="nl-BE" rel="alternate" href="https://www.transfermarkt.be/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="ro" rel="alternate" href="https://www.transfermarkt.ro/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="el-GR" rel="alternate" href="https://www.transfermarkt.gr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="ko-KR" rel="alternate" href="https://www.transfermarkt.co.kr/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-AR" rel="alternate" href="https://www.transfermarkt.com.ar/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-MX" rel="alternate" href="https://www.transfermarkt.mx/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-CO" rel="alternate" href="https://www.transfermarkt.co/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="es-PE" rel="alternate" href="https://www.transfermarkt.pe/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="ms" rel="alternate" href="https://www.transfermarkt.my/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="ja" rel="alternate" href="https://www.transfermarkt.jp/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link hreflang="id" rel="alternate" href="https://www.transfermarkt.co.id/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/menue.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-main.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main_desktop.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/print.css?_sn=1?lm=1703164027" media="print" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/chosen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-player-profile.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/gespieltePositionen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/statistiken.css?lm=1703164027" />
<script type="text/javascript" src="https://tmssl.akamaized.net/js/vendor/jquery.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/b7c5571cf8957553f95f6d9069eaed67/jquery.ba-bbq.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.ajaxaddition.jquery.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/functions.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main_desktop.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.jquery.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
console.info("%c [TM-ADs] Initialize Ads on domain com (wettbewerbe_profile_spieler | spieler/leistungsdaten)", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle1 (div-gpt-ad-1621526463511-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle2 (div-gpt-ad-1621528018930-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraper (div-gpt-ad-1621527521939-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraperbtf (div-gpt-ad-1621528123398-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render billboard (div-gpt-ad-1621524903956-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render fullsize_contentad (div-gpt-ad-1621528173524-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] No ad configuration found for richmedia", "background: #222; color: #bada55")
    var oddsServe = function(placement,competition,match,node) {
        if (!node){
            var s=document.readyState==='loading'?document.getElementsByTagName('script'):[];
            node=s.length?s[s.length-1].parentNode:null;
        }
        oddsServe.queue.push({contentUnitId:placement,competition:competition,match:match,node:node});
    }
    
    oddsServe.onInit=function(callbacks){
        if (typeof window.__tcfapi === 'function') {
            __tcfapi('addEventListener', 2, function(tcdata, success) {
                let tcf20compatibleString;
                if(success) {
                    if (tcdata.eventStatus === 'useractioncomplete') {
                        tcf20compatibleString = tcdata.tcString;
                    } else if (tcdata.eventStatus === 'tcloaded') {
                        tcf20compatibleString = tcdata.tcString;
                    }
                    callbacks.setGdprOptions({
                        gdpr:1,
                        gdpr_pd:1,
                        gdpr_consent:tcf20compatibleString,
                    });
                }
            });
        } else {
            console.warn('E2: __tcfapi not found');
        }
    };
    oddsServe.options={gdpr_wait:true};
    oddsServe.queue=[];
console.info("%c [TM-ADs] Add initScript for slots: rectangle1 | rectangle2 | skyscraper | skyscraperbtf | billboard | fullsize_contentad", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Register slots with JS vendor lib", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render ad slots js for google", "background: #222; color: #bada55")
PWT = {};
window.googletag = window.googletag || {cmd: []};
googletag.cmd.push(() => {
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-1",
    [[960,90],[970,250],[950,90],[728,90],[970,90]],
    "div-gpt-ad-1621524903956-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-1",
    [[300,250],[336,280]],
    "div-gpt-ad-1621526463511-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-2",
    [[300,250],[336,280]],
    "div-gpt-ad-1621528018930-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-1",
    [[160,600],[336,280],[300,250],[300,600],[120, 600]],
    "div-gpt-ad-1621527521939-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-2",
    [[300,250],[336,280],[160,600],[300,600],[120, 600]],
    "div-gpt-ad-1621528123398-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-2",
    [[950,90],[970,250],[728,90],[970,90],[960,90],[300, 250]],
    "div-gpt-ad-1621528173524-0"
  ) 
.addService(googletag.pubads());
  googletag.pubads().enableLazyLoad({
    fetchMarginPercent: 500,
    renderMarginPercent: 200,
    mobileScaling: 2.0
  });
  googletag.pubads().setCentering(true);
  googletag.pubads().disableInitialLoad();
  googletag.pubads().enableSingleRequest();
  googletag.pubads().setTargeting("cg1", ["spieler"]);
  googletag.pubads().setTargeting("URL", "www.transfermarkt.com");
  googletag.enableServices();
});

console.info("%c [TM-ADs] Added external ad script(s) for vendor google", "background: #222; color: #bada55")
/*]]>*/
</script>
<title>Kevin De Bruyne - Stats 23/24 | Transfermarkt</title>
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-152x152.png">
            <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/manager/base/es6/bundle.js" as="script" id="IOMmBundle">
        <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js" as="script">
        <script type="text/javascript" src="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js"></script>
    
<script type="text/javascript">
   tmData = {
       loggedIn : "0",
       tmTraffic: "0",
   };
</script>
<script>// Set to the same value as the web property used on the site
		var gaProperty = 'UA-3816204-13';

		// Disable tracking if the opt-out cookie exists.
		var disableStr = 'ga-disable-' + gaProperty;
		if (document.cookie.indexOf(disableStr + '=true') > -1) {
			window[disableStr] = true;
		}

		// Opt-out function
		function gaOptout() {
			document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
			window[disableStr] = true;
		}</script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag() { dataLayer.push(arguments); } 
   gtag('set', 'linker', { 'domains': [/^transfermarkt\.(com|de|nl|it|at|ch|es|fr|com\.tr|pt|tv|pl|co\.uk)$/]});
   gtag('js', new Date()); 
   gtag('set',
  {
    'custom_map': {
                    'dimension1': 'loggedIn',
                    'dimension2': 'tmTraffic'
                }
  });
        gtag('config', 'UA-3816204-13', {
                'anonymize_ip': true,
                'transport_type': 'beacon',
                'content_group1': 'statistik',
                'content_group2': 'spieler',
                'content_group3': 'leistungsdaten',
                'content_group4': '88755',
                'loggedIn': tmData.loggedIn,
                'tmTraffic': tmData.tmTraffic
            }); 
   function tmEvent(category, action, label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event',
                    action,
                    {
                        'event_category': category,
                        'event_label': label
                    }
                );
            }

            function tmTiming(value, name, event_category, event_label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event', 'timing_complete', {
                    name,
                    value,
                    event_category,
                    event_label
                });
            }
            
	</script>    <script type="text/javascript" src="https://tmssl.akamaized.net//ads/ads.js"></script>
    <script type="text/javascript">
        window.tmGaId = "UA-3816204-13";
    </script>

            <link rel="canonical" href="https://www.transfermarkt.com/kevin-de-bruyne/leistungsdaten/spieler/88755">
    <!-- no Tisoomi -->
    </head>

<body class="" itemscope itemtype="http://schema.org/WebPage" data-tm-tld="com" data-cmp-layer-id="910164">
    
                <tm-language-hint></tm-language-hint>
        <div id="main">
                <div class="werbung-skyscraper-container">
            <div class="werbung werbung-skyscraper">
  <div id="div-gpt-ad-1621527521939-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621527521939-0"); });</script>
  </div>
</div>
        </div>

        <div class="werbung-skyscraperbtf-container">
            <div class="werbung werbung-skyscraperbtf">
  <div id="div-gpt-ad-1621528123398-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528123398-0"); });</script>
  </div>
</div>
        </div>
        
        <header class="tm-header">
                            <div class="tm-header__box ">
                                            <a href="/">
                            <img class="icon-logo" src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" height="62" width="156" title="Transfermarkt" alt="Transfermarkt">
                        </a>
                                                                <tm-domainswitcher open-list="false" tld="com"></tm-domainswitcher>
                                            <div class="tm-header__social-box">
                        <a href="https://www.facebook.com/Transfermarkt.global" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Facebook');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/fb_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://twitter.com/TMuk_news" target="_blank" class="header__social-link header__social-link--twitter" onclick="tmEvent('SM-Icons_Header','click','Twitter');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/twitter.svg" width="20" height="20" class="header__icon header__icon--twitter">
                </a>
                <a href="http://instagram.com/transfermarkt_official" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Instagram');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/instagram_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="/intern/rssguide" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','RSS');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/rss_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://www.tiktok.com/@transfermarkt" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Tiktok');
">
                    <img src="https://tmsi.akamaized.net/icons/tiktokRebrush.svg" width="20" height="20" class="header__icon">
                </a>
                    </div>
                            <div class="tm-header__input-wrapper " id="schnellsuche-platz">
                            <form name="schnellsuche" id="schnellsuche" class="tm-header__form" action="/schnellsuche/ergebnis/schnellsuche">
                                <input type="text" name="query" class="tm-header__input--search-field" onClick="" placeholder="Enter your search term" autocorrect="off" spellcheck="false" value="" />
                                <input type="submit" value="" class="tm-header__input--search-send" alt="search" />
                            </form>
                            <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="tm-header__search-detail">
                                <img src="https://tmsi.akamaized.net/icons/search_icon_plus_blue_white.svg" alt="search" class="tm-header__icon-detail-search" height="26" width="26">
                            </a>
                        </div>
                                    </div>
            
            <nav class="main-navbar navihalter">
                                                                        <ul class="main-navbar__container megamenu_dark_bar megamenu_dark" itemscope="itemscope" itemtype="http://www.schema.org/SiteNavigationElement">
                    <a href="/" class="sticky-logo hide-for-small">
                <span title="Transfermarkt" class="tm_svg"></span>
            </a>
            
    <li class="main-navbar__list" data-nav-group="news">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('News','click','menu');
"
            >
            News        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="transfers">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Transfers & Gerüchte','click','menu');
"
            >
            Transfers & rumours        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="marktwerte">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Marktwerte','click','menu');
"
            >
            Market values        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list aktiv" data-nav-group="wettbewerbe">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Wettbewerbe','click','menu');
"
            >
            Competitions        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="foren">
                <a
            class="main-navbar__list-title tm-main-nav-el"
            href="/uebersicht/index/forum/com"
            onClick="tmEvent('Foren','click','menu');
"
            >
            Forums                    </a>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="meintm">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('MeinTM','click','menu');
"
            >
            My TM        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" >
                <a
            class="main-navbar__list-title tm-main-nav-el live-navilink"
            href="/ticker/index/live"
            onClick="tmEvent('Live','click','menu');
"
            >
            Live                            <tm-live-match-counter auto-request="true" content='["Live maches", "Live matches"]'></tm-live-match-counter>
                    </a>
            </li>
</ul>

                
                <form name="schnellsuche" id="schnellsuche-sticky" class="noclose sticky-suche" action="/schnellsuche/ergebnis/schnellsuche">
                    <input type="text" name="query" class="header-suche" onClick="" placeholder="Enter your search term" />
                    <input type="image" class="header-suche-abschicken" src="https://tmssl.akamaized.net//images/suchicon.png" alt="search" />
                </form>
                <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="header-suche-detailsuche">
                    <span class="icon-detailsuche"></span>
                </a>
                                    <a id="arrow-up-xy" href="#">
                        <svg style="fill: white; width: 20px; height: 20px;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                            <g>
                                <path d="M78.016,49.132L51.961,12.714c-0.471-0.66-1.233-1.049-2.043-1.051c-0.006,0-0.006,0-0.006,0
                                c-0.815,0.002-1.575,0.396-2.048,1.059L21.977,49.14c-0.546,0.767-0.616,1.776-0.183,2.612c0.426,0.835,1.292,1.361,2.236,1.361
                                h12.183l-0.001,32.709c0,1.39,1.125,2.515,2.516,2.515l22.541-0.001c1.389,0.001,2.515-1.124,2.516-2.517l0-32.705h12.187
                                c0.94,0,1.803-0.53,2.237-1.367C78.641,50.911,78.566,49.9,78.016,49.132z" />
                            </g>
                        </svg>
                    </a>
                <div class="tm-login " id="login" onClick="tmEvent('login','click','sign_in_button');
">
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     fill="#FFF" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="tm-login__image">
        <g>
            <path d="M80.161,60.441l-15.66-7.47l-6.622-3.159c2.892-1.822,5.241-4.634,6.778-8.022c1.22-2.69,1.946-5.734,1.946-8.99
                c0-1.827-0.29-3.562-0.694-5.236C63.94,19.453,57.605,13.477,50,13.477c-7.461,0-13.701,5.763-15.792,13.645
                c-0.482,1.808-0.815,3.688-0.815,5.68c0,3.459,0.808,6.684,2.181,9.489c1.587,3.254,3.94,5.937,6.804,7.662l-6.342,2.953
                l-16.168,7.53c-1.404,0.658-2.327,2.242-2.327,4.011v15.062v2.703c0,2.381,1.659,4.312,3.708,4.312h57.505
                c2.048,0,3.708-1.93,3.708-4.312v-2.703V64.446C82.46,62.683,81.552,61.114,80.161,60.441z"/>
        </g>
    </svg>
    <span class="tm-login__cta">
        Log in    </span>
</div>
            </nav>

            
            <div class="quick-select-wrapper">
    <div id="quickselect-skeleton" class="ssc" style="height: 40px;">
        <div class="ssc-wrapper flex" style="height: 100%; padding: 0">
            <div class="ssc-square quickselect-element" style="width: 40px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 171.06px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 170.84px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 138.03px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 141.5px;"></div>
        </div>
    </div>

    <tm-quick-select-bar
        default-country="189"
        default-competition="GB1"
        default-club="281"
        default-player="88755"
        dropdown-visible=""
        translations='{&quot;home&quot;:&quot;Home&quot;,&quot;country&quot;:&quot;Country&quot;,&quot;competition&quot;:&quot;Competition&quot;,&quot;club&quot;:&quot;Club&quot;,&quot;player&quot;:&quot;Player&quot;,&quot;attack&quot;:&quot;Striker&quot;,&quot;midfield&quot;:&quot;Mittelfeld&quot;,&quot;defense&quot;:&quot;Defender&quot;,&quot;goalkeeper&quot;:&quot;Goalkeeper&quot;}'
        >
    </tm-quick-select-bar>
</div>


            <div class="werbung werbung-billboard">
  <div id="div-gpt-ad-1621524903956-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621524903956-0"); });</script>
  </div>
</div>
        </header>
        <main>

            
            
    <div id="modal-1" class="modal micromodal-slide" aria-hidden="true" tabindex="1">
        <div class="modal__overlay" tabindex="-1" data-custom-close>
            <div
                class="modal__container"
                role="dialog"
                aria-modal="true"
                aria-labelledby="modal-1-title"
                data-custom-close
                >
                <header class="modal__header">
                    <button
                        class="modal__close modal__close--profile-img"
                        aria-label="Close modal"
                        data-custom-close
                        >
                    </button>
                </header>
                <div id="modal-1-content" class="modal__content">
                                        <img src='https://img.a.transfermarkt.technology/portrait/big/88755-1684245748.jpg?lm=1' alt='Kevin De Bruyne' title='Kevin De Bruyne' data-custom-close loading="lazy">
                </div>
            </div>
        </div>
    </div>


<header class="data-header" itemscope itemtype="https://schema.org/Person">
                    <div class="data-header__headline-container">
            <h1 class="data-header__headline-wrapper">
                                    <span class="data-header__shirt-number">
                        #17                    </span>
                                Kevin <strong>De Bruyne</strong>            </h1>
                                </div>
                    <div class="data-header__badge-container">
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="Footballer of the Year" class="data-header__success-data">
                                                    <img src="data:image/gif;base64,R0lGODlhAQABAIAAAMLCwgAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==" data-src="https://tmssl.akamaized.net/images/titel/header/4.png?lm=1465908580" title="Footballer of the Year" alt="Footballer of the Year" class="data-header__success-image lazy lazy" />                                                <span class="data-header__success-number">3</span>
                    </a>
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="TM-Player of the season" class="data-header__success-data">
                                                    <img src="data:image/gif;base64,R0lGODlhAQABAIAAAMLCwgAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==" data-src="https://tmssl.akamaized.net/images/titel/header/256.png?lm=1623075349" title="TM-Player of the season" alt="TM-Player of the season" class="data-header__success-image lazy lazy" />                                                <span class="data-header__success-number">2</span>
                    </a>
                                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="Champions League winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/4.png?lm=1520606999" title="Champions League winner" alt="Champions League winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="FIFA Club World Cup winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/318.png?lm=1520606999" title="FIFA Club World Cup winner" alt="FIFA Club World Cup winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="English Champion" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/12.png?lm=1520606997" title="English Champion" alt="English Champion" class="" />                                                <span class="data-header__success-number">5</span>
                    </a>
                                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="All titles & victories">
                        <div class="data-header__success-data">
                            <span class="data-header__success-more">
                                <img src="/images/icons/mehr_erfolge.png" />
                            </span>
                        </div>
                    </a>
                            </div>
        
                    <div class="data-header__box--big">
                                    <a href="/manchester-city/startseite/verein/281" class="data-header__box__club-link">
                                            <img srcset="
                            https://tmssl.akamaized.net/images/wappen/normquad/281.png?lm=1467356331 1x,
                            https://tmssl.akamaized.net/images/wappen/homepageWappen150x150/281.png?lm=1467356331 2x
                            " alt="Manchester City" height="100" width="100" />
                                        </a>
                                <div class="data-header__club-info">
                    <span class="data-header__club" itemprop="affiliation">
                        <a title="Manchester City" href="/manchester-city/startseite/verein/281">Man City</a>                    </span><br />                    
                                                                            <span class="data-header__league">
                                    <a class="data-header__league-link" href="/premier-league/startseite/wettbewerb/GB1">
                                        <img src="https://tmssl.akamaized.net/images/logo/verytiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League                                    </a>
                                </span>
                                                                            <span class="data-header__label">League level:
                                <span class="data-header__content">
                                    <img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" />First Tier                                </span>
                            </span>
                                                                                                        <span class="data-header__label">Joined: <span class="data-header__content">Aug 30, 2015</span></span>
                            <span class="data-header__label">Contract expires: <span class="data-header__content">Jun 30, 2025</span></span>
                                                            </div>
            </div>
        
        <div class="data-header__profile-container">
                            <div class="modal-trigger" data-custom-open="modal-1" id="fotoauswahlOeffnen" style="cursor:pointer" onclick="tmEvent('spielerprofil','click','profilbild');">
            
                                <img src="https://img.a.transfermarkt.technology/portrait/header/88755-1684245748.jpg?lm=1" title="Kevin De Bruyne" alt="Kevin De Bruyne" class="data-header__profile-image" height="181" width="139" /><div class="bildquelle"><span title="IMAGO">IMAGO</span></div>
                                    <span class="modal-trigger-icon">+</span>
                </div>
                        </div>
        <div class="data-header__info-box ">
            <div class="data-header__details">
                <ul class="data-header__items">
                                            <li class="data-header__label">Date of birth/Age:
                            <span itemprop="birthDate" class="data-header__content">
                                Jun 28, 1991 (32)                            </span>
                        </li>

                                                    <li class="data-header__label">Place of birth:
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />                                <span class="data-header__content" itemprop="birthPlace">
                                    Drongen                                </span>
                            </li>
                        
                                            <li class="data-header__label">Citizenship:
                            <span itemprop="nationality" class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />                                Belgium                            </span>
                        </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li class="data-header__label">Height:
                            <span itemprop="height" class="data-header__content">
                                1,81 m                            </span>
                        </li>
                    
                    <li class="data-header__label">Position:
                        <span class="data-header__content">
                            Attacking Midfield                        </span>
                    </li>
                    
                        <li class="data-header__label">Agent:
                            <span class="data-header__content data-header__content--vertical-aligned">
                                
                                    <a onclick="tmEvent(&quot;spielerprofil&quot;, &quot;click&quot;, &quot;berater-header-premium&quot;)" href="/roc-nation-sports/beraterfirma/berater/5015">Roc Nation Sports</a>                                                                            <img class="data-header__verified-logo" src="https://tmsi.akamaized.net/berater/verified_premium_minified.png" alt="verified" title="verified" height="13" width="13">
                                                                                                </span>
                        </li>

                                    </ul>
                <ul class="data-header__items">
                                            <li for="" class="data-header__label">
                                                            National player:
                                                        <span class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen flagge" /><a title="Belgium" href="/belgien/startseite/verein/3382">Belgium</a>                            </span>
                        </li>
                                                    <li class="data-header__label">Caps/Goals:
                                <a class="data-header__content data-header__content--highlight" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382">99                                </a>/
                                <a class="data-header__content data-header__content--highlight" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382">26                                </a>
                            </li>
                                    </ul>
            </div>
        </div>
        
    
            <div class="data-header__box--small">
                <a href="/kevin-de-bruyne/marktwertverlauf/spieler/88755" class="data-header__market-value-wrapper"><span class="waehrung">€</span>60.00<span class="waehrung">m</span>                <p class="data-header__last-update">Last update: Dec 19, 2023</p></a>
            </div>

            
    </header>
    <div class="row hide-on-print" id="subnavi" data-season="" data-controller="spieler" data-action="leistungsdaten" data-path="player-path/leistungsdaten/spieler/88755/plus/0" data-id="88755">
        <div class="page_wrapper subnavi">
            <div class="large-12 columns">
                <div class="subnavi_box" id="subnavigation">
                    <div class="submenu-text show-for-small">
                        <a name="SubNavi" title="Navigation">
                            <span>≡ Sub navigation</span>
                        </a>
                    </div>
                    <nav>
                        <ul id="submenu">
                                                <li id="close_submenu" class="show-for-small">
                            <div id="submenu-icon">
                                <span class="clicked"></span>
                                <span class="clicked"></span>
                            </div>
                            <a>Close subnavigation</a>
                        </li>
                                                    <li id="profile" class="first-button  " data-nav-group="profile">
                                <a name="SubNavi" href="/kevin-de-bruyne/profil/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','profil');
">Profile</a>
                                                            </li>
                                                        <li id="stats" class="  " data-nav-group="stats">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','leistungsdaten');
">Stats</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="market-values" class="  " data-nav-group="market-values">
                                <a name="SubNavi" href="/kevin-de-bruyne/marktwertverlauf/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','marktwert');
">Market values</a>
                                                            </li>
                                                        <li id="transfers" class="  " data-nav-group="transfers">
                                <a name="SubNavi" href="/kevin-de-bruyne/transfers/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','transfers');
">Transfers</a>
                                                            </li>
                                                        <li id="rumors" class="  " data-nav-group="rumors">
                                <a name="SubNavi" href="/kevin-de-bruyne/geruechte/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','geruchte');
">Rumors</a>
                                                            </li>
                                                        <li id="national-team" class="  " data-nav-group="national-team">
                                <a name="SubNavi" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','nationalmannschaft');
">National team</a>
                                                            </li>
                                                        <li id="news" class="  " data-nav-group="news">
                                <a name="SubNavi" href="/kevin-de-bruyne/news/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','news');
">News</a>
                                                            </li>
                                                        <li id="achievements" class="  " data-nav-group="achievements">
                                <a name="SubNavi" href="/kevin-de-bruyne/erfolge/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','erfolge');
">Achievements</a>
                                                            </li>
                                                        <li id="career" class="  " data-nav-group="career">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','karriere');
">Career</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="subnavi-edit" class="  subnavi-edit" data-nav-group="subnavi-edit">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','edit');
"></a>
                                <div class="dropdown_fullwidth gasthinweis" title="Log in or register now"><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                    </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <script>
        var stickySubTop = $('#subnavigation').offset().top;
        stickySubTop = stickySubTop - 60;
        var main = $("#main");
        $(document).ready(function() {
            $(window).on('scroll load', function() {
                if (!main.hasClass("stickySubnavigation")) {
                    stickySubTop = $('#subnavigation').offset().top;
                }
                if ($(window).scrollTop() > stickySubTop) {
                    main.addClass("stickySubnavigation");
                } else {
                    main.removeClass("stickySubnavigation");
                }
            });
        });
    </script>
    <style>
        .forum-anchor {
            margin-top: -80px;
        }
    </style>

                        
<div class="row">
    <div class="large-8 columns">

        <div class="box">
            <h2 class="content-box-headline">
                Stats of Kevin De Bruyne            </h2>
            <p class="info-content">
                This page contains information about a player's detailed stats. In the info box, you can filter by period, club, type of league and competition. The "Detailed stats" tab shows a player's total appearances, goals, cards and cumulative minutes of play for each competition, and indicates the season in which it occurred.            </p>
            <div class="content">
                <form action="/kevin-de-bruyne/leistungsdaten/spieler/88755/plus/0" method="get">                <div class="row">
                    <div class="large-12 columns">
                        <table class="auflistung">
                            <tbody>
                                <tr>
                                    <td>Filter by season:</td>
                                    <td>
                                        <div class="inline-select">
                                            <select name="saison" data-placeholder="Filter by season" class="chzn-select" tabindex="0">
                                                <option value="ges">Overall balance</option>
                                                                                                    <option  selected="selected"value="2023">23/24</option>
                                                                                                    <option value="2022">22/23</option>
                                                                                                    <option value="2021">21/22</option>
                                                                                                    <option value="2020">20/21</option>
                                                                                                    <option value="2019">19/20</option>
                                                                                                    <option value="2018">18/19</option>
                                                                                                    <option value="2017">17/18</option>
                                                                                                    <option value="2016">16/17</option>
                                                                                                    <option value="2015">15/16</option>
                                                                                                    <option value="2014">14/15</option>
                                                                                                    <option value="2013">13/14</option>
                                                                                                    <option value="2012">12/13</option>
                                                                                                    <option value="2011">11/12</option>
                                                                                                    <option value="2010">10/11</option>
                                                                                                    <option value="2009">09/10</option>
                                                                                                    <option value="2008">08/09</option>
                                                                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="submit" class="small button" value="Show">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                </form>            </div>
        </div>
        <div class="box">
            <h2 class="content-box-headline">
                Stats 23/24            </h2>
            
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023#gesamt"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023/plus/1#gesamt"><div class=""><span>Detailed</span></div></a></div>
            <div class="responsive-table">
                <div id="yw1" class="grid-view">
<div class="summary"></div>
<table class="items">
<thead>
<tr>
<th colspan="2" id="yw1_c0"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/wettbewerb">Competition</a></th><th class="hide" id="yw1_c1"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/wettbewerb">wettbewerb</a></th><th class="zentriert" id="yw1_c2"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/einsaetze.desc"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></a></th><th class="zentriert" id="yw1_c3"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/tore.desc"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></a></th><th class="zentriert" id="yw1_c4"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/vorlagen.desc"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></a></th><th class="zentriert" id="yw1_c5"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/gelbe.desc"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c6"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/gelbrote.desc"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c7"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/rote.desc"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></a></th><th class="rechts" id="yw1_c8"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2023/plus/0/sort/einsatzzeit.desc"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></a></th></tr>
</thead>
<tfoot>
<tr>
<td colspan="2" class="rechts">Total  23/24:</td><td class="hide">&nbsp;</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">49'</td></tr>
</tfoot>
<tbody>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td><td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td><td class="zentriert player-profile-performance-data"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/wettbewerb/GB1/verein/281">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">23'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gbcs.png?lm=1659265562" title="Community Shield" alt="Community Shield" class="" /></td><td class="hauptlink no-border-links"><a title="Community Shield" href="/community-shield/startseite/pokalwettbewerb/GBCS">Community Shield</a></td><td class="zentriert player-profile-performance-data"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/wettbewerb/GBCS/verein/281">1</a></td><td class="zentriert">-</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">26'</td></tr>
</tbody>
</table>
<div class="keys" style="display:none" title="/player-path/leistungsdaten/spieler/88755/plus/0?saison=2023"><span>Premier League</span><span>Community Shield</span></div>
</div>            </div>
        </div>

        <div class="box">
    <div class="table-header img-vat">
        <a name="CL" href="/uefa-champions-league/startseite/wettbewerb/CL/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cl.png?lm=1626810555" title="UEFA Champions League" alt="UEFA Champions League" class="" />UEFA Champions League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">9/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/159.png?lm=1567102522" title="Red Star Belgrade" alt="Red Star Belgrade" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023">Red Star</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171305" href="/manchester-city_red-star-belgrade/index/spielbericht/4171305"><span class="greentext">3:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">10/4/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/23826.png?lm=1619431624" title="RB Leipzig" alt="RB Leipzig" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023">RB Leipzig</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171307" href="/rb-leipzig_manchester-city/index/spielbericht/4171307"><span class="greentext">1:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">10/25/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/452.png?lm=1689916664" title="BSC Young Boys" alt="BSC Young Boys" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023">BSC Young Boys</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171324" href="/bsc-young-boys_manchester-city/index/spielbericht/4171324"><span class="greentext">1:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">11/7/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/452.png?lm=1689916664" title="BSC Young Boys" alt="BSC Young Boys" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="BSC Young Boys" href="/bsc-young-boys/spielplan/verein/452/saison_id/2023">BSC Young Boys</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171317" href="/manchester-city_bsc-young-boys/index/spielbericht/4171317"><span class="greentext">3:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">11/28/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/23826.png?lm=1619431624" title="RB Leipzig" alt="RB Leipzig" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2023">RB Leipzig</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171304" href="/manchester-city_rb-leipzig/index/spielbericht/4171304"><span class="greentext">3:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2023/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">12/13/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/159.png?lm=1567102522" title="Red Star Belgrade" alt="Red Star Belgrade" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Red Star Belgrade" href="/roter-stern-belgrad/spielplan/verein/159/saison_id/2023">Red Star</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4171321" href="/red-star-belgrade_manchester-city/index/spielbericht/4171321"><span class="greentext">2:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 0,
                        Starting eleven: 0,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 6                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="USC" href="/uefa-super-cup/startseite/wettbewerb/USC/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/usc.png?lm=1520607013" title="UEFA Super Cup" alt="UEFA Super Cup" class="" />UEFA Super Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-super-cup/spieltag/pokalwettbewerb/USC/saison_id/2023/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">8/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/368.png?lm=1408655455" title="Sevilla FC" alt="Sevilla FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2023">Sevilla FC</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087203" href="/manchester-city_sevilla-fc/index/spielbericht/4087203"><span class="greentext">6:5 <span class="ergebnis_zusatz"> on pens</span></span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 0,
                        Starting eleven: 0,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="KLUB" href="/fifa-club-world-cup/startseite/wettbewerb/KLUB/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/klub.png?lm=1702377936" title="FIFA Club World Cup" alt="FIFA Club World Cup" class="" />FIFA Club World Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/fifa-club-world-cup/spieltag/pokalwettbewerb/KLUB/saison_id/2023/gruppe/HF">Semi-Finals</a>
                </td>
                                    <td class="zentriert">12/19/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Urawa Red Diamonds" href="/urawa-red-diamonds/spielplan/verein/828/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/828.png?lm=1703509823" title="Urawa Red Diamonds" alt="Urawa Red Diamonds" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Urawa Red Diamonds" href="/urawa-red-diamonds/spielplan/verein/828/saison_id/2023">Urawa Reds</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4243187" href="/urawa-red-diamonds_manchester-city/index/spielbericht/4243187"><span class="greentext">0:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Fitness" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Fitness</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/fifa-club-world-cup/spieltag/pokalwettbewerb/KLUB/saison_id/2023/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">12/22/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Fluminense Football Club" href="/fluminense-rio-de-janeiro/spielplan/verein/2462/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2462.png?lm=1648225934" title="Fluminense Football Club" alt="Fluminense Football Club" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fluminense Football Club" href="/fluminense-rio-de-janeiro/spielplan/verein/2462/saison_id/2023">Fluminense</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4244600" href="/manchester-city_fluminense-football-club/index/spielbericht/4244600"><span class="greentext">4:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Fitness" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Fitness</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 0,
                        Starting eleven: 0,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 2                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="GB1" href="/premier-league/startseite/wettbewerb/GB1/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/1">1</a>
                </td>
                                    <td class="zentriert">8/11/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1132.png?lm=1686818840" title="Burnley FC" alt="Burnley FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023">Burnley</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087924" href="/burnley-fc_manchester-city/index/spielbericht/4087924"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">23'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/2">2</a>
                </td>
                                    <td class="zentriert">8/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/762.png?lm=1472921161" title="Newcastle United" alt="Newcastle United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023">Newcastle</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087939" href="/manchester-city_newcastle-united/index/spielbericht/4087939"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/3">3</a>
                </td>
                                    <td class="zentriert">8/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/350.png?lm=1409254138" title="Sheffield United" alt="Sheffield United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023">Sheff Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087953" href="/sheffield-united_manchester-city/index/spielbericht/4087953"><span class="greentext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">9/2/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/931.png?lm=1556831687" title="Fulham FC" alt="Fulham FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2023">Fulham</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087962" href="/manchester-city_fulham-fc/index/spielbericht/4087962"><span class="greentext">5:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">9/16/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/379.png?lm=1464675260" title="West Ham United" alt="West Ham United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2023">West Ham</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087971" href="/west-ham-united_manchester-city/index/spielbericht/4087971"><span class="greentext">1:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/6">6</a>
                </td>
                                    <td class="zentriert">9/23/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/703.png?lm=1598890289" title="Nottingham Forest" alt="Nottingham Forest" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2023">Nottm Forest</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095070" href="/manchester-city_nottingham-forest/index/spielbericht/4095070"><span class="greentext">2:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/7">7</a>
                </td>
                                    <td class="zentriert">9/30/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/543.png?lm=1467496784" title="Wolverhampton Wanderers" alt="Wolverhampton Wanderers" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2023">Wolves</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095145" href="/wolverhampton-wanderers_manchester-city/index/spielbericht/4095145"><span class="redtext">2:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/8">8</a>
                </td>
                                    <td class="zentriert">10/8/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023">Arsenal</a>&nbsp;&nbsp;<span class="tabellenplatz">(2.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095146" href="/arsenal-fc_manchester-city/index/spielbericht/4095146"><span class="redtext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/9">9</a>
                </td>
                                    <td class="zentriert">10/21/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1237.png?lm=1492718902" title="Brighton & Hove Albion" alt="Brighton & Hove Albion" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2023">Brighton</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095161" href="/manchester-city_brighton-amp-hove-albion/index/spielbericht/4095161"><span class="greentext">2:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/10">10</a>
                </td>
                                    <td class="zentriert">10/29/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/985.png?lm=1457975903" title="Manchester United" alt="Manchester United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2023">Man Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095173" href="/manchester-united_manchester-city/index/spielbericht/4095173"><span class="greentext">0:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/11">11</a>
                </td>
                                    <td class="zentriert">11/4/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/989.png?lm=1457991811" title="AFC Bournemouth" alt="AFC Bournemouth" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2023">Bournemouth</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095181" href="/manchester-city_afc-bournemouth/index/spielbericht/4095181"><span class="greentext">6:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/12">12</a>
                </td>
                                    <td class="zentriert">11/12/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2023">Chelsea</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095190" href="/chelsea-fc_manchester-city/index/spielbericht/4095190"><span class="">4:4 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/13">13</a>
                </td>
                                    <td class="zentriert">11/25/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31.png?lm=1456567819" title="Liverpool FC" alt="Liverpool FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2023">Liverpool</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095201" href="/manchester-city_liverpool-fc/index/spielbericht/4095201"><span class="">1:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/14">14</a>
                </td>
                                    <td class="zentriert">12/3/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/148.png?lm=1544345801" title="Tottenham Hotspur" alt="Tottenham Hotspur" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2023">Tottenham</a>&nbsp;&nbsp;<span class="tabellenplatz">(5.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095212" href="/manchester-city_tottenham-hotspur/index/spielbericht/4095212"><span class="">3:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/15">15</a>
                </td>
                                    <td class="zentriert">12/6/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023">Aston Villa</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095216" href="/aston-villa_manchester-city/index/spielbericht/4095216"><span class="redtext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/16">16</a>
                </td>
                                    <td class="zentriert">12/10/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Luton Town" href="/luton-town/spielplan/verein/1031/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1031.png?lm=1457723228" title="Luton Town" alt="Luton Town" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Luton Town" href="/luton-town/spielplan/verein/1031/saison_id/2023">Luton</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095231" href="/luton-town_manchester-city/index/spielbericht/4095231"><span class="greentext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/17">17</a>
                </td>
                                    <td class="zentriert">12/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/873.png?lm=1457723287" title="Crystal Palace" alt="Crystal Palace" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2023">Crystal Palace</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095242" href="/manchester-city_crystal-palace/index/spielbericht/4095242"><span class="">2:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/19">19</a>
                </td>
                                    <td class="zentriert">12/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/29.png?lm=1445949846" title="Everton FC" alt="Everton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023">Everton</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095262" href="/everton-fc_manchester-city/index/spielbericht/4095262"><span class="greentext">1:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Fitness" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Fitness</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/20">20</a>
                </td>
                                    <td class="zentriert">12/30/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/350.png?lm=1409254138" title="Sheffield United" alt="Sheffield United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023">Sheff Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095271" href="/manchester-city_sheffield-united/index/spielbericht/4095271"><span class="greentext">2:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 2,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 1,
                        Suspended: 0,
                        Injured: 17                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="GBCS" href="/community-shield/startseite/wettbewerb/GBCS/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/gbcs.png?lm=1659265562" title="Community Shield" alt="Community Shield" class="" />Community Shield        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/community-shield/spieltag/pokalwettbewerb/GBCS/saison_id/2023/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">8/6/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023">Arsenal</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4149666" href="/arsenal-fc_manchester-city/index/spielbericht/4149666"><span class="redtext">5:2 <span class="ergebnis_zusatz"> on pens</span></span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">26'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 0,
                        Substituted in: 1,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="CGB" href="/efl-cup/startseite/wettbewerb/CGB/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cgb.png?lm=1566937342" title="EFL Cup" alt="EFL Cup" class="" />EFL Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/efl-cup/spieltag/pokalwettbewerb/CGB/saison_id/2023/gruppe/3R">Third Round</a>
                </td>
                                    <td class="zentriert">9/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/762.png?lm=1472921161" title="Newcastle United" alt="Newcastle United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2023">Newcastle</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4188454" href="/newcastle-united_manchester-city/index/spielbericht/4188454"><span class="redtext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 0,
                        Starting eleven: 0,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
</div>
    <div class="large-4 columns">
        <div class="werbung werbung-rectangle1">
  <div id="div-gpt-ad-1621526463511-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621526463511-0"); });</script>
  </div>
</div>
        <div class="box hide">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                                    <span class="position_7" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:22px !important" title="100">2</span>
                                </div>
        </div>
    </div>
</div>
<div class="box">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                
                    <div class="zahl-anzeige pos-box positionsbox_7" title="Central Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/pos/7">
                            <div class="text-box p-7" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                2                                <div class="zusatz-kreis">CM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_7" title="Central Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/pos/7">
                            <div class="text-box p-7" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                CM                                <div class="zusatz-kreis">2</div>
                            </div>
                            </a>
                        </div>
                    </div>

                                </div>
        </div>
    </div>
        <table>
        <thead>
            <tr>
                <th>Played as...</th>
                <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                        </tr>
        </thead>
        <tbody>
                        <tr>
                <td class="hauptlink"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/pos/7">Central Midfield</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/pos/7">2</a></td>
                                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/pos/7">-</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2023/pos/7">1</a></td>
                            </tr>
                        </tbody>
    </table>
</div>
        <div class="box">
    <h2 class="content-box-headline">
        Stats by club    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Club</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2016"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2016">Man City</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/281">358</a></td>
                            <td class="zentriert">96</td>
                <td class="zentriert">153</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="KRC Genk" href="/krc-genk/spielplan/verein/1184/saison_id/2009"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1184_1522273528.png?lm=1522273528" title="&nbsp;" alt="KRC Genk" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="KRC Genk" href="/krc-genk/spielplan/verein/1184/saison_id/2009">KRC Genk</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/1184">113</a></td>
                            <td class="zentriert">17</td>
                <td class="zentriert">36</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="VfL Wolfsburg" href="/vfl-wolfsburg/spielplan/verein/82/saison_id/2015"><img src="https://tmssl.akamaized.net/images/wappen/tiny/82.png?lm=1503060755" title="VfL Wolfsburg" alt="VfL Wolfsburg" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="VfL Wolfsburg" href="/vfl-wolfsburg/spielplan/verein/82/saison_id/2015">VfL Wolfsburg</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/82">73</a></td>
                            <td class="zentriert">20</td>
                <td class="zentriert">37</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="SV Werder Bremen" href="/sv-werder-bremen/spielplan/verein/86/saison_id/2012"><img src="https://tmssl.akamaized.net/images/wappen/tiny/86.png?lm=1403082298" title="SV Werder Bremen" alt="SV Werder Bremen" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="SV Werder Bremen" href="/sv-werder-bremen/spielplan/verein/86/saison_id/2012">Werder Bremen</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/86">34</a></td>
                            <td class="zentriert">10</td>
                <td class="zentriert">10</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2013"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2013">Chelsea</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/631">9</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">1</td>
                    </tr>
            </tbody>
    </table>
    <a title="Kevin De Bruyne" class="content-link" href="/kevin-de-bruyne/leistungsdatenverein/spieler/88755">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        Performance by competition    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Competition</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/GB1">243</a></td>
                            <td class="zentriert">64</td>
                <td class="zentriert">105</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/l1.png?lm=1525905518" title="Bundesliga" alt="Bundesliga" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Bundesliga" href="/bundesliga/startseite/wettbewerb/L1">Bundesliga</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/L1">85</a></td>
                            <td class="zentriert">23</td>
                <td class="zentriert">36</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/be1.png?lm=1601478124" title="Jupiler Pro League" alt="Jupiler Pro League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League" href="/jupiler-pro-league/startseite/wettbewerb/BE1">Jupiler Pro League</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/BE1/verein/1184">72</a></td>
                            <td class="zentriert">13</td>
                <td class="zentriert">19</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/ejpl.png?lm=1404554019" title="Jupiler Pro League Champions' Play-Offs" alt="Jupiler Pro League Champions' Play-Offs" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League Champions&#039; Play-Offs" href="/jupiler-pro-league-playoff-i/startseite/wettbewerb/EJPL">Jupiler Pro League Champions' Play-Offs</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/EJPL/verein/1184">16</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">11</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/pobe.png?lm=1404554039" title="Jupiler Pro League Europe Play-Offs" alt="Jupiler Pro League Europe Play-Offs" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League Europe Play-Offs" href="/jupiler-pro-league-playoff-ii/startseite/wettbewerb/POBE">Jupiler Pro League Europe Play-Offs</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2009/wettbewerb/POBE/verein/1184">5</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">2</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/esjp.png?lm=1415794336" title="Jupiler Pro League playoff Europa League" alt="Jupiler Pro League playoff Europa League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League playoff Europa League" href="/entscheidungsspiele-jupiler-pro-league/startseite/wettbewerb/ESJP">Jupiler Pro League playoff Europa League</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2009/wettbewerb/ESJP/verein/1184">4</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">2</td>
                    </tr>
            </tbody>
    </table>
    <a title="Kevin De Bruyne" class="content-link" href="/kevin-de-bruyne/detaillierteleistungsdaten/spieler/88755">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        National team career    </h2>
    <table>
        <thead>
        <tr>
            <th class="zentriert">#</th>
            <th colspan="2" class="hide-for-small">National team</th>
            <th class="zentriert">Debut</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Matches">&nbsp;</span></th>
            <th class="zentriert"><span class="icons_sprite icon-tor-table-header"></span></th>
                    </tr>
        </thead>
        <tbody>
            <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium" href="/belgien/startseite/verein/3382">Belgium</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_gelb_20">
            
                7
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium" href="/belgien/startseite/verein/3382">Belgium</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/1029793" title="International Friendlies: Finland - Belgium 1:0">Aug 11, 2010</a>
                                </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382">99</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382/nurEinsatz/2">26</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium U21" href="/belgien-u21/startseite/verein/9315">Belgium U21</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                10
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium U21" href="/belgien-u21/startseite/verein/9315">Belgium U21</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2789305" title="International Friendlies: Belgium U21 - Scotland U21 1:0">Mar 24, 2011</a>
                                </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/9315">2</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/9315/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium U19" href="/belgien-u19/startseite/verein/16338">Belgium U19</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                14
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium U19" href="/belgien-u19/startseite/verein/16338">Belgium U19</a>            </td>
            <td class="zentriert">
                                    May 11, 2009                            </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16338">10</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16338/nurEinsatz/2">1</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium U18" href="/belgien-u18/startseite/verein/16337">Belgium U18</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                10
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium U18" href="/belgien-u18/startseite/verein/16337">Belgium U18</a>            </td>
            <td class="zentriert">
                                    Nov 19, 2008                            </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16337">7</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16337/nurEinsatz/2">1</a></td>
                    </tr>
                </tbody>
    </table>
            <a title="Kevin De Bruyne" class="content-link" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755">Go to national player profile</a>    </div>
        <div class="werbung werbung-rectangle2">
  <div id="div-gpt-ad-1621528018930-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528018930-0"); });</script>
  </div>
</div>
    </div>
</div>

<script async src="/js/custom/tm-track-links.min.js" type="module"></script>
<div class="werbung werbung-fullsize_contentad">
  <div id="div-gpt-ad-1621528173524-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528173524-0"); });</script>
  </div>
</div>
        </main>

        <footer>
            <div class="tm-footer">
            <a href="/"
           class="tm-footer__logo">
          <img src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" alt="Transfermarkt" height="33" width="80"/>
        </a>
          <ul class="tm-footer__links">
    <li class="tm-footer__links-item">
      <a href="/intern/impressum">
          Legal notice      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/web/datenschutz">
          Data protection      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="javascript:void(0)" class="cmp-link">
          Privacy      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/anb">
          General conditions of use      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/tmteam">
          TM-Team      </a>
    </li>
                        <li class="tm-footer__links-item">
      <a href="/intern/faq">
          FAQ      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/fehlermelden">
          Found a mistake?      </a>
    </li>
  </ul>
</div>
        </footer>
                <div id="menue_overlay"></div>
    </div>
        <script type="text/javascript">
        var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r",
"co":""
}
    </script>
        <script type="module">
        var defaultOptions = {
            tracking: !0,
            refreshAds: !0
        };
        export var refreshAd = function() {
            var e, n;
            [ASCDP.hasOwnProperty("adS"), null === (e = ASCDP.adS) || void 0 === e ? void 0 : e.hasOwnProperty("reloadAds"), "function" == typeof(null === (n = ASCDP.adS) || void 0 === n ? void 0 : n.reloadAds)].every(function(e) {
                return e
            }) && ASCDP.adS.reloadAds()
        };
        export var TmTrackingAndAds = function(e, n) {
            void 0 === n && (n = defaultOptions);
            var r = ["tabelle", "reiter", "forum"].includes(e) ? e : "";
            n.tracking && (gtag("event", "page_view", {
                page_path: "/jsContent" + window.location.pathname
            }), sendIvwData(r)), n.refreshAds && "undefined" != typeof ASCDP && refreshAd()
        };
        window.tmTrackingAndAds = function(e, n) {
            return TmTrackingAndAds(e, n)
        };
    </script>
            <script type="text/javascript">
            const iommInterval = setInterval(() => {
                if (typeof IOMm === 'function') {
                    IOMm('configure', {
                        st: iam_data.st,
                        dn: 'data-84a0f3455d.transfermarkt.com',
                        mh: 5
                    });
                    IOMm('pageview', {
                        cp: iam_data.cp,
                        co: iam_data.co
                    });
                    clearInterval(iommInterval);
                }
            }, 250);
        </script>
    <script type="text/javascript">
	if(typeof(adet) == "boolean" && adet == false){
		img_src="/static/singlepictures/jk99hhfsdh209nbnkjldgh90sghfsdlk";
	} else {
		img_src="/static/singlepictures/jku90whjlkjbwbta1g4b8h89fh8sgh8d";
	}
	var elem = document.createElement("img");
	document.body.appendChild(elem);
	elem.src = img_src;
</script>

            <script>
            $(function() {
                var cnt = $('div.large-4.columns').length;
                if (cnt == 1) {
                    var sidebarDiv = document.querySelector('div.large-4.columns');
                    if (sidebarDiv !== null) {
                        $('#werbung_recommender_sidebar_wrapper').appendTo(sidebarDiv);
                        $('#werbung_recommender_sidebar_wrapper').show();
                    }
                }
            });
        </script>
        <div id="werbung_recommender_sidebar_wrapper" style="display: none;">
            <div 
    id="recommender_sidebar" 
    class="box"
    >
    <div class="OUTBRAIN" data-widget-id="SL_DT_SB"></div>
<tm-consent 
    no-checkbox 
    type="outbrain" 
    embed="PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jPSJhc3luYyIgc3JjPSIvL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzIj48L3NjcmlwdD4=">
</tm-consent>
</div>
        </div>
    <script type="module" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.esm.js" defer></script><script nomodule="" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.js" defer></script><tm-consent type="adition" no-checkbox embed="PHNjcmlwdCBzcmM9Imh0dHBzOi8vY3JlYXRpdmUtY2RuLm9kZHNzZXJ2ZS5jb20vbG9hZGVyLmpzP3B1Ymxpc2hlcj10bSIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4="></tm-consent><tm-consent type="googleanalytics" no-checkbox embed="PHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMzgxNjIwNC0xMyI+PC9zY3JpcHQ+"></tm-consent>
<tm-consent type="pubmatic" no-checkbox embed="PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBXVD17fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncHRSYW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBXVC5qc0xvYWRlZCA9ICgpID0+IHsgLy9QdWJNYXRpYyBwd3QuanMgb24gbG9hZCBjYWxsYmFjayBpcyB1c2VkIHRvIGxvYWQgR1BUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEdQVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkR1BUID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGdwdFJhbiBmbGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncHRSYW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B0UmFuID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWRzLnNyYyA9ICh1c2VTU0wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0L3RhZy9qcy9ncHQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbHNhZmUgdG8gY2FsbCBncHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEdQVCwgNTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9wd3QvMTYzMjI5LzEwMTAzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZlcnNpb25JZCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1cmwuaW5kZXhPZigncHd0dj0nKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IC9wd3R2PSguKj8pKCZ8JCkvZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHJlZ2V4cC5leGVjKHB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoID49IDIgJiYgbWF0Y2hlc1sxXS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVZlcnNpb25JZCA9ICcvJyttYXRjaGVzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3RhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dGFkcy5hc3luYyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3RhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd0YWRzLnNyYyA9IHVybCtwcm9maWxlVmVyc2lvbklkKycvcHd0LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHd0YWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICA="></tm-consent><tm-consent type="amazonadvertising" no-checkbox embed="PHNjcmlwdD4hZnVuY3Rpb24odCwkLGUscyxpLGEsbyl7JFt0XXx8KCRbdF09e2luaXQ6ZnVuY3Rpb24oKXtfKCJpIixhcmd1bWVudHMpfSxmZXRjaEJpZHM6ZnVuY3Rpb24oKXtfKCJmIixhcmd1bWVudHMpfSxzZXREaXNwbGF5QmlkczpmdW5jdGlvbigpe30sdGFyZ2V0aW5nS2V5czpmdW5jdGlvbigpe3JldHVybltdfSxfUTpbXX0sKGE9ZS5jcmVhdGVFbGVtZW50KHMpKS5hc3luYz0hMCxhLnNyYz1pLChvPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbykpO2Z1bmN0aW9uIF8oZSxzKXskW3RdLl9RLnB1c2goW2Usc10pfX0oImFwc3RhZyIsd2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCIvL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIpLGFwc3RhZy5pbml0KHtwdWJJRDoiNTEzNCIsYWRTZXJ2ZXI6Imdvb2dsZXRhZyJ9KTtjb25zdCBpbml0QW1hem9uQWRCaWRzPSh0LCQpPT57KCQmJiJ0Y2xvYWRlZCI9PT10LmV2ZW50U3RhdHVzfHwidXNlcmFjdGlvbmNvbXBsZXRlIj09PXQuZXZlbnRTdGF0dXMpJiZhcHN0YWcuZmV0Y2hCaWRzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90czpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIixzbG90TmFtZToiNTg3NzgxNjQvRGVza3RvcC1CaWxsYm9hcmQtMSIsc2l6ZXM6W1s5NjAsOTBdLFs5NzAsMjUwXSxbOTUwLDkwXSxbNzI4LDkwXSxbOTcwLDkwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLU1lZGl1bVJlY3RhbmdsZS0xIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLVNreXNjcmFwZXItMSIsc2l6ZXM6W1sxNjAsNjAwXSxbMzM2LDI4MF0sWzMwMCwyNTBdLFszMDAsNjAwXSxbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLHNpemVzOltbMzM2LDI4MF0sWzMwMCwyNTBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0yIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxbMTYwLDYwMF0sWzMwMCw2MDBdLCBbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtQmlsbGJvYXJkLTIiLHNpemVzOltbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQyODkyOTYtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1NZWRpdW1SZWN0YW5nbGUtMSIsc2l6ZXM6W1szMDAsMTAwXSxbMzAwLDI1MF0sXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTY3OTM0MTQ2ODE5My0wIixzbG90TmFtZToiNTg3NzgxNjQvTW9iaWxlLU1lZGl1bVJlY3RhbmdsZS0yIixzaXplczpbWzMwMCwgMjUwXSwgWzMyMCwgNTBdLCBbMjUwLCAyNTBdLCBbMzAwLCAxMDBdLCBbMzM2LCAyODBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQzNjkyOTQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1IYWxmcGFnZS0xIixzaXplczpbWzMwMCw2MDBdLFszMDAsMjUwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTM0NDMyODI5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9Nb2JpbGUtU3RpY2t5IixzaXplczpbWzMwMCw1MF0sWzMyMCw1MF0sXX0sXSx0aW1lb3V0OjJlM30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpe2dvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpe2Fwc3RhZy5zZXREaXNwbGF5QmlkcygpLGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCl9KX0pfTsiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7PC9zY3JpcHQ+"></tm-consent><tm-consent type="googleadvertising" no-checkbox embed="PHNjcmlwdCAgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg=="></tm-consent>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/aa69c6e9c51f1e811847082c63633956/gridview/jquery.yiigridview.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-menu.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/vendors.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmsi.akamaized.net/js/svelte-components/consent/bundle.js"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-skyscraper.min.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
	var loginUrl='/profil/login';
	var onlyDE = '';
	var onlyMobile = '';
	var onlyTablet = '';
	var getUserID = '';

    function sendIvwData(typ) {
        if(typ == 'tabelle') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_t",
"co":""
}

        }else if(typ == 'reiter') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_r",
"co":""
}

        }else if(typ == 'forum') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_forum",
"co":""
}

        }else {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_s",
"co":""
}

        }
        if(typeof IOMm === 'function') {
            IOMm('pageview', { cp: iam_data.cp, co: iam_data.co });
        }
    }
jQuery(function($) {
jQuery('#yw1').yiiGridView({'ajaxUpdate':['yw1'],'ajaxVar':'ajax','pagerClass':'pager','loadingClass':'grid\x2Dview\x2Dloading','filterClass':'filters','tableClass':'items','selectableRows':1,'enableHistory':false,'updateSelector':'\x7Bpage\x7D,\x20\x7Bsort\x7D','filterSelector':'\x7Bfilter\x7D','afterAjaxUpdate':function() {window.LazyLoadInstance.update(); tmTrackingAndAds(); trackLinks(); document.dispatchEvent(new CustomEvent("tmInitTooltip"));}});
});
/*]]>*/
</script>
</body>

</html>
  recorded_at: Sun, 31 Dec 2023 14:51:42 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/plus/0?saison=2022
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 14:51:43 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web03
      Set-Cookie:
      - TMSESSID=6f7aa5c823f2b9ab0a2c726084d5dd12; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 f4021b1aef9bacd347e69fce08bd4964.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - 4J3JXlmkLwoPskNQSUmc8GitB6MR7F3uvpCoQN8U1-8y5RPVSX_EnQ==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">

<head>
    
<script type="text/javascript" data-description="sourcepoint stub code">
    !function () { var e = function () { var e, t = "__tcfapiLocator", a = [], n = window; for (; n;) { try { if (n.frames[t]) { e = n; break } } catch (e) { } if (n === window.top) break; n = n.parent } e || (!function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var i = a.createElement("iframe"); i.style.cssText = "display:none", i.name = t, a.body.appendChild(i) } else setTimeout(e, 5); return !r }(), n.__tcfapi = function () { for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++)n[r] = arguments[r]; if (!n.length) return a; if ("setGdprApplies" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && "boolean" == typeof n[3] && (e = n[3], "function" == typeof n[2] && n[2]("set", !0)); else if ("ping" === n[0]) { var i = { gdprApplies: e, cmpLoaded: !1, cmpStatus: "stub" }; "function" == typeof n[2] && n[2](i) } else a.push(n) }, n.addEventListener("message", (function (e) { var t = "string" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data } catch (e) { } var n = a.__tcfapiCall; n && window.__tcfapi(n.command, n.version, (function (a, r) { var i = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId } }; t && (i = JSON.stringify(i)), e.source.postMessage(i, "*") }), n.parameter) }), !1)) }; "undefined" != typeof module ? module.exports = e : e() }();
</script>
<script data-description="sourcepoint configuration">
window._sp_ = {
    config: {"accountId":1254,"propertyId":7427,"gdpr":{"consentLanguage":"en","targetingParams":{"acps":"false"}},"baseEndpoint":"https://cdn.privacy-mgmt.com","isSPA":true,"cpPropertyId":"7a84b340"}}
</script>
<script src="https://cdn.privacy-mgmt.com/wrapperMessagingWithoutDetection.js" async></script>

<script type="text/javascript" data-description="contentpass integration">
    (function() {
        var cpBaseUrl = 'https://cp.transfermarkt.com';
        var cpController = cpBaseUrl + '/now.js';
        var cpPropertyId = '7a84b340';

        !function(C,o,n,t,P,a,s){C['CPObject']=n;C[n]||(C[n]=function(){
        (C[n].q=C[n].q||[]).push(arguments)});C[n].l=+new Date;a=o.createElement(t);
        s=o.getElementsByTagName(t)[0];a.src=P;s.parentNode.insertBefore(a,s)}
        (window,document,'cp','script',cpController);

        !function(C,o,n,t,P){if(!C[n].patched){cp('extension','authenticate');P=C[n].q.push;
        C[n].q.push=function(a){if(a[0]==='authenticate'){if((o['cookie']||'').indexOf('_cpauthhint=')===-1&&
        !(C['localStorage']||{})['_cpuser']&&C.location.href.toLowerCase().indexOf('cpauthenticated')===-1){
        t={isLoggedIn:function(){return false;},hasValidSubscription:function(){return false;}};
        (typeof a[1]==='function'&&a[1](null,t));C[n].afp=true;P.apply(C[n].q,[['authenticate',null]]);
        return t;}}P.apply(C[n].q,[a]);}}}
        (window,document,'cp',false);

        cp('create', cpPropertyId, {
        baseUrl: cpBaseUrl
        });

        cp('render', {
        onFullConsent: function() {
            console.log('[DEMO] onFullConsent');
        }
        })
    })()
</script>

<script type="text/javascript" data-description="contentpass sourcepoint fast path">
(function () {
    cp('authenticate', function(err, user) {
        if (err || (!user.isLoggedIn() && !user.hasValidSubscription())) {
        console.log('[SPCP] Taking fast path');
        (function spExecMsg() {
            if (window._sp_ && window._sp_.executeMessaging) {
            if (!window._sp_.config.isSPA) {
                console.warn('[SPCP] Sourcepoint not in SPA mode!');
            } else if (window._sp_.version) {
                console.log('[SPCP] Sourcepoint already running');
            } else {
                console.log('[SPCP] Starting Sourcepoint');
                window._sp_.executeMessaging();
            }
            } else {
            console.log('[SPCP] Sourcepoint not loaded yet. Retrying.');
            setTimeout(spExecMsg, 10);
            }
        })();
        }
    });
    })();
</script>
    <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" sizes="16x16" href="/favicon-16x16.png">
    <link rel="shortcut icon" sizes="192x192" href="/android-chrome-192x192.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=no" />
<meta name="robots" content="noindex, nofollow" />
<meta name="keywords" content="Kevin De Bruyne,Manchester City,Premier League,Belgium" />
<meta name="description" content="Player stats of Kevin De Bruyne (Manchester City) ➤ Goals ➤ Assists ➤ Matches played ➤ All performance data" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://img.a.transfermarkt.technology/portrait/big/88755-1684245748.jpg?lm=1" />
<meta property="og:description" content="" />
<meta property="og:title" content="Kevin De Bruyne - Stats 22/23" />
<meta property="og:url" content="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/plus/0?saison=2022" />
<link hreflang="de" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="de-LU" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="de-AT" rel="alternate" href="https://www.transfermarkt.at/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="de-CH" rel="alternate" href="https://www.transfermarkt.ch/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="tr" rel="alternate" href="https://www.transfermarkt.com.tr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="it-CH" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="it" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="pl" rel="alternate" href="https://www.transfermarkt.pl/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="en-GB" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="en-IE" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-ES" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-CL" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-VE" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-EC" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-CU" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="nl" rel="alternate" href="https://www.transfermarkt.nl/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="pt" rel="alternate" href="https://www.transfermarkt.pt/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="ru" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="world" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="fr-CH" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="fr" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="fr-CA" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="fr-CI" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="fr-LU" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="fr-BE" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="pt-BR" rel="alternate" href="https://www.transfermarkt.com.br/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="en-US" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="en-CA" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="en-IN" rel="alternate" href="https://www.transfermarkt.co.in/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="en-ZA" rel="alternate" href="https://www.transfermarkt.co.za/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="x-default" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="en" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="nl-BE" rel="alternate" href="https://www.transfermarkt.be/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="ro" rel="alternate" href="https://www.transfermarkt.ro/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="el-GR" rel="alternate" href="https://www.transfermarkt.gr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="ko-KR" rel="alternate" href="https://www.transfermarkt.co.kr/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-AR" rel="alternate" href="https://www.transfermarkt.com.ar/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-MX" rel="alternate" href="https://www.transfermarkt.mx/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-CO" rel="alternate" href="https://www.transfermarkt.co/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="es-PE" rel="alternate" href="https://www.transfermarkt.pe/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="ms" rel="alternate" href="https://www.transfermarkt.my/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="ja" rel="alternate" href="https://www.transfermarkt.jp/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link hreflang="id" rel="alternate" href="https://www.transfermarkt.co.id/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/menue.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-main.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main_desktop.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/print.css?_sn=1?lm=1703164027" media="print" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/chosen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-player-profile.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/gespieltePositionen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/statistiken.css?lm=1703164027" />
<script type="text/javascript" src="https://tmssl.akamaized.net/js/vendor/jquery.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/b7c5571cf8957553f95f6d9069eaed67/jquery.ba-bbq.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.ajaxaddition.jquery.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/functions.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main_desktop.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.jquery.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
console.info("%c [TM-ADs] Initialize Ads on domain com (wettbewerbe_profile_spieler | spieler/leistungsdaten)", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle1 (div-gpt-ad-1621526463511-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle2 (div-gpt-ad-1621528018930-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraper (div-gpt-ad-1621527521939-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraperbtf (div-gpt-ad-1621528123398-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render billboard (div-gpt-ad-1621524903956-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render fullsize_contentad (div-gpt-ad-1621528173524-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] No ad configuration found for richmedia", "background: #222; color: #bada55")
    var oddsServe = function(placement,competition,match,node) {
        if (!node){
            var s=document.readyState==='loading'?document.getElementsByTagName('script'):[];
            node=s.length?s[s.length-1].parentNode:null;
        }
        oddsServe.queue.push({contentUnitId:placement,competition:competition,match:match,node:node});
    }
    
    oddsServe.onInit=function(callbacks){
        if (typeof window.__tcfapi === 'function') {
            __tcfapi('addEventListener', 2, function(tcdata, success) {
                let tcf20compatibleString;
                if(success) {
                    if (tcdata.eventStatus === 'useractioncomplete') {
                        tcf20compatibleString = tcdata.tcString;
                    } else if (tcdata.eventStatus === 'tcloaded') {
                        tcf20compatibleString = tcdata.tcString;
                    }
                    callbacks.setGdprOptions({
                        gdpr:1,
                        gdpr_pd:1,
                        gdpr_consent:tcf20compatibleString,
                    });
                }
            });
        } else {
            console.warn('E2: __tcfapi not found');
        }
    };
    oddsServe.options={gdpr_wait:true};
    oddsServe.queue=[];
console.info("%c [TM-ADs] Add initScript for slots: rectangle1 | rectangle2 | skyscraper | skyscraperbtf | billboard | fullsize_contentad", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Register slots with JS vendor lib", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render ad slots js for google", "background: #222; color: #bada55")
PWT = {};
window.googletag = window.googletag || {cmd: []};
googletag.cmd.push(() => {
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-1",
    [[960,90],[970,250],[950,90],[728,90],[970,90]],
    "div-gpt-ad-1621524903956-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-1",
    [[300,250],[336,280]],
    "div-gpt-ad-1621526463511-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-2",
    [[300,250],[336,280]],
    "div-gpt-ad-1621528018930-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-1",
    [[160,600],[336,280],[300,250],[300,600],[120, 600]],
    "div-gpt-ad-1621527521939-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-2",
    [[300,250],[336,280],[160,600],[300,600],[120, 600]],
    "div-gpt-ad-1621528123398-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-2",
    [[950,90],[970,250],[728,90],[970,90],[960,90],[300, 250]],
    "div-gpt-ad-1621528173524-0"
  ) 
.addService(googletag.pubads());
  googletag.pubads().enableLazyLoad({
    fetchMarginPercent: 500,
    renderMarginPercent: 200,
    mobileScaling: 2.0
  });
  googletag.pubads().setCentering(true);
  googletag.pubads().disableInitialLoad();
  googletag.pubads().enableSingleRequest();
  googletag.pubads().setTargeting("cg1", ["spieler"]);
  googletag.pubads().setTargeting("URL", "www.transfermarkt.com");
  googletag.enableServices();
});

console.info("%c [TM-ADs] Added external ad script(s) for vendor google", "background: #222; color: #bada55")
/*]]>*/
</script>
<title>Kevin De Bruyne - Stats 22/23 | Transfermarkt</title>
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-152x152.png">
            <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/manager/base/es6/bundle.js" as="script" id="IOMmBundle">
        <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js" as="script">
        <script type="text/javascript" src="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js"></script>
    
<script type="text/javascript">
   tmData = {
       loggedIn : "0",
       tmTraffic: "0",
   };
</script>
<script>// Set to the same value as the web property used on the site
		var gaProperty = 'UA-3816204-13';

		// Disable tracking if the opt-out cookie exists.
		var disableStr = 'ga-disable-' + gaProperty;
		if (document.cookie.indexOf(disableStr + '=true') > -1) {
			window[disableStr] = true;
		}

		// Opt-out function
		function gaOptout() {
			document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
			window[disableStr] = true;
		}</script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag() { dataLayer.push(arguments); } 
   gtag('set', 'linker', { 'domains': [/^transfermarkt\.(com|de|nl|it|at|ch|es|fr|com\.tr|pt|tv|pl|co\.uk)$/]});
   gtag('js', new Date()); 
   gtag('set',
  {
    'custom_map': {
                    'dimension1': 'loggedIn',
                    'dimension2': 'tmTraffic'
                }
  });
        gtag('config', 'UA-3816204-13', {
                'anonymize_ip': true,
                'transport_type': 'beacon',
                'content_group1': 'statistik',
                'content_group2': 'spieler',
                'content_group3': 'leistungsdaten',
                'content_group4': '88755',
                'loggedIn': tmData.loggedIn,
                'tmTraffic': tmData.tmTraffic
            }); 
   function tmEvent(category, action, label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event',
                    action,
                    {
                        'event_category': category,
                        'event_label': label
                    }
                );
            }

            function tmTiming(value, name, event_category, event_label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event', 'timing_complete', {
                    name,
                    value,
                    event_category,
                    event_label
                });
            }
            
	</script>    <script type="text/javascript" src="https://tmssl.akamaized.net//ads/ads.js"></script>
    <script type="text/javascript">
        window.tmGaId = "UA-3816204-13";
    </script>

            <link rel="canonical" href="https://www.transfermarkt.com/kevin-de-bruyne/leistungsdaten/spieler/88755">
    <!-- no Tisoomi -->
    </head>

<body class="" itemscope itemtype="http://schema.org/WebPage" data-tm-tld="com" data-cmp-layer-id="910164">
    
                <tm-language-hint></tm-language-hint>
        <div id="main">
                <div class="werbung-skyscraper-container">
            <div class="werbung werbung-skyscraper">
  <div id="div-gpt-ad-1621527521939-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621527521939-0"); });</script>
  </div>
</div>
        </div>

        <div class="werbung-skyscraperbtf-container">
            <div class="werbung werbung-skyscraperbtf">
  <div id="div-gpt-ad-1621528123398-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528123398-0"); });</script>
  </div>
</div>
        </div>
        
        <header class="tm-header">
                            <div class="tm-header__box ">
                                            <a href="/">
                            <img class="icon-logo" src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" height="62" width="156" title="Transfermarkt" alt="Transfermarkt">
                        </a>
                                                                <tm-domainswitcher open-list="false" tld="com"></tm-domainswitcher>
                                            <div class="tm-header__social-box">
                        <a href="https://www.facebook.com/Transfermarkt.global" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Facebook');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/fb_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://twitter.com/TMuk_news" target="_blank" class="header__social-link header__social-link--twitter" onclick="tmEvent('SM-Icons_Header','click','Twitter');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/twitter.svg" width="20" height="20" class="header__icon header__icon--twitter">
                </a>
                <a href="http://instagram.com/transfermarkt_official" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Instagram');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/instagram_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="/intern/rssguide" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','RSS');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/rss_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://www.tiktok.com/@transfermarkt" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Tiktok');
">
                    <img src="https://tmsi.akamaized.net/icons/tiktokRebrush.svg" width="20" height="20" class="header__icon">
                </a>
                    </div>
                            <div class="tm-header__input-wrapper " id="schnellsuche-platz">
                            <form name="schnellsuche" id="schnellsuche" class="tm-header__form" action="/schnellsuche/ergebnis/schnellsuche">
                                <input type="text" name="query" class="tm-header__input--search-field" onClick="" placeholder="Enter your search term" autocorrect="off" spellcheck="false" value="" />
                                <input type="submit" value="" class="tm-header__input--search-send" alt="search" />
                            </form>
                            <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="tm-header__search-detail">
                                <img src="https://tmsi.akamaized.net/icons/search_icon_plus_blue_white.svg" alt="search" class="tm-header__icon-detail-search" height="26" width="26">
                            </a>
                        </div>
                                    </div>
            
            <nav class="main-navbar navihalter">
                                                                        <ul class="main-navbar__container megamenu_dark_bar megamenu_dark" itemscope="itemscope" itemtype="http://www.schema.org/SiteNavigationElement">
                    <a href="/" class="sticky-logo hide-for-small">
                <span title="Transfermarkt" class="tm_svg"></span>
            </a>
            
    <li class="main-navbar__list" data-nav-group="news">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('News','click','menu');
"
            >
            News        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="transfers">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Transfers & Gerüchte','click','menu');
"
            >
            Transfers & rumours        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="marktwerte">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Marktwerte','click','menu');
"
            >
            Market values        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list aktiv" data-nav-group="wettbewerbe">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Wettbewerbe','click','menu');
"
            >
            Competitions        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="foren">
                <a
            class="main-navbar__list-title tm-main-nav-el"
            href="/uebersicht/index/forum/com"
            onClick="tmEvent('Foren','click','menu');
"
            >
            Forums                    </a>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="meintm">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('MeinTM','click','menu');
"
            >
            My TM        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" >
                <a
            class="main-navbar__list-title tm-main-nav-el live-navilink"
            href="/ticker/index/live"
            onClick="tmEvent('Live','click','menu');
"
            >
            Live                            <tm-live-match-counter auto-request="true" content='["Live maches", "Live matches"]'></tm-live-match-counter>
                    </a>
            </li>
</ul>

                
                <form name="schnellsuche" id="schnellsuche-sticky" class="noclose sticky-suche" action="/schnellsuche/ergebnis/schnellsuche">
                    <input type="text" name="query" class="header-suche" onClick="" placeholder="Enter your search term" />
                    <input type="image" class="header-suche-abschicken" src="https://tmssl.akamaized.net//images/suchicon.png" alt="search" />
                </form>
                <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="header-suche-detailsuche">
                    <span class="icon-detailsuche"></span>
                </a>
                                    <a id="arrow-up-xy" href="#">
                        <svg style="fill: white; width: 20px; height: 20px;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                            <g>
                                <path d="M78.016,49.132L51.961,12.714c-0.471-0.66-1.233-1.049-2.043-1.051c-0.006,0-0.006,0-0.006,0
                                c-0.815,0.002-1.575,0.396-2.048,1.059L21.977,49.14c-0.546,0.767-0.616,1.776-0.183,2.612c0.426,0.835,1.292,1.361,2.236,1.361
                                h12.183l-0.001,32.709c0,1.39,1.125,2.515,2.516,2.515l22.541-0.001c1.389,0.001,2.515-1.124,2.516-2.517l0-32.705h12.187
                                c0.94,0,1.803-0.53,2.237-1.367C78.641,50.911,78.566,49.9,78.016,49.132z" />
                            </g>
                        </svg>
                    </a>
                <div class="tm-login " id="login" onClick="tmEvent('login','click','sign_in_button');
">
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     fill="#FFF" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="tm-login__image">
        <g>
            <path d="M80.161,60.441l-15.66-7.47l-6.622-3.159c2.892-1.822,5.241-4.634,6.778-8.022c1.22-2.69,1.946-5.734,1.946-8.99
                c0-1.827-0.29-3.562-0.694-5.236C63.94,19.453,57.605,13.477,50,13.477c-7.461,0-13.701,5.763-15.792,13.645
                c-0.482,1.808-0.815,3.688-0.815,5.68c0,3.459,0.808,6.684,2.181,9.489c1.587,3.254,3.94,5.937,6.804,7.662l-6.342,2.953
                l-16.168,7.53c-1.404,0.658-2.327,2.242-2.327,4.011v15.062v2.703c0,2.381,1.659,4.312,3.708,4.312h57.505
                c2.048,0,3.708-1.93,3.708-4.312v-2.703V64.446C82.46,62.683,81.552,61.114,80.161,60.441z"/>
        </g>
    </svg>
    <span class="tm-login__cta">
        Log in    </span>
</div>
            </nav>

            
            <div class="quick-select-wrapper">
    <div id="quickselect-skeleton" class="ssc" style="height: 40px;">
        <div class="ssc-wrapper flex" style="height: 100%; padding: 0">
            <div class="ssc-square quickselect-element" style="width: 40px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 171.06px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 170.84px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 138.03px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 141.5px;"></div>
        </div>
    </div>

    <tm-quick-select-bar
        default-country="189"
        default-competition="GB1"
        default-club="281"
        default-player="88755"
        dropdown-visible=""
        translations='{&quot;home&quot;:&quot;Home&quot;,&quot;country&quot;:&quot;Country&quot;,&quot;competition&quot;:&quot;Competition&quot;,&quot;club&quot;:&quot;Club&quot;,&quot;player&quot;:&quot;Player&quot;,&quot;attack&quot;:&quot;Striker&quot;,&quot;midfield&quot;:&quot;Mittelfeld&quot;,&quot;defense&quot;:&quot;Defender&quot;,&quot;goalkeeper&quot;:&quot;Goalkeeper&quot;}'
        >
    </tm-quick-select-bar>
</div>


            <div class="werbung werbung-billboard">
  <div id="div-gpt-ad-1621524903956-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621524903956-0"); });</script>
  </div>
</div>
        </header>
        <main>

            
            
    <div id="modal-1" class="modal micromodal-slide" aria-hidden="true" tabindex="1">
        <div class="modal__overlay" tabindex="-1" data-custom-close>
            <div
                class="modal__container"
                role="dialog"
                aria-modal="true"
                aria-labelledby="modal-1-title"
                data-custom-close
                >
                <header class="modal__header">
                    <button
                        class="modal__close modal__close--profile-img"
                        aria-label="Close modal"
                        data-custom-close
                        >
                    </button>
                </header>
                <div id="modal-1-content" class="modal__content">
                                        <img src='https://img.a.transfermarkt.technology/portrait/big/88755-1684245748.jpg?lm=1' alt='Kevin De Bruyne' title='Kevin De Bruyne' data-custom-close loading="lazy">
                </div>
            </div>
        </div>
    </div>


<header class="data-header" itemscope itemtype="https://schema.org/Person">
                    <div class="data-header__headline-container">
            <h1 class="data-header__headline-wrapper">
                                    <span class="data-header__shirt-number">
                        #17                    </span>
                                Kevin <strong>De Bruyne</strong>            </h1>
                                </div>
                    <div class="data-header__badge-container">
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="Footballer of the Year" class="data-header__success-data">
                                                    <img src="data:image/gif;base64,R0lGODlhAQABAIAAAMLCwgAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==" data-src="https://tmssl.akamaized.net/images/titel/header/4.png?lm=1465908580" title="Footballer of the Year" alt="Footballer of the Year" class="data-header__success-image lazy lazy" />                                                <span class="data-header__success-number">3</span>
                    </a>
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="TM-Player of the season" class="data-header__success-data">
                                                    <img src="data:image/gif;base64,R0lGODlhAQABAIAAAMLCwgAAACH5BAAAAAAALAAAAAABAAEAAAICRAEAOw==" data-src="https://tmssl.akamaized.net/images/titel/header/256.png?lm=1623075349" title="TM-Player of the season" alt="TM-Player of the season" class="data-header__success-image lazy lazy" />                                                <span class="data-header__success-number">2</span>
                    </a>
                                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="Champions League winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/4.png?lm=1520606999" title="Champions League winner" alt="Champions League winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="FIFA Club World Cup winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/318.png?lm=1520606999" title="FIFA Club World Cup winner" alt="FIFA Club World Cup winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="English Champion" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/12.png?lm=1520606997" title="English Champion" alt="English Champion" class="" />                                                <span class="data-header__success-number">5</span>
                    </a>
                                                    <a href="/kevin-de-bruyne/erfolge/spieler/88755" title="All titles & victories">
                        <div class="data-header__success-data">
                            <span class="data-header__success-more">
                                <img src="/images/icons/mehr_erfolge.png" />
                            </span>
                        </div>
                    </a>
                            </div>
        
                    <div class="data-header__box--big">
                                    <a href="/manchester-city/startseite/verein/281" class="data-header__box__club-link">
                                            <img srcset="
                            https://tmssl.akamaized.net/images/wappen/normquad/281.png?lm=1467356331 1x,
                            https://tmssl.akamaized.net/images/wappen/homepageWappen150x150/281.png?lm=1467356331 2x
                            " alt="Manchester City" height="100" width="100" />
                                        </a>
                                <div class="data-header__club-info">
                    <span class="data-header__club" itemprop="affiliation">
                        <a title="Manchester City" href="/manchester-city/startseite/verein/281">Man City</a>                    </span><br />                    
                                                                            <span class="data-header__league">
                                    <a class="data-header__league-link" href="/premier-league/startseite/wettbewerb/GB1">
                                        <img src="https://tmssl.akamaized.net/images/logo/verytiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League                                    </a>
                                </span>
                                                                            <span class="data-header__label">League level:
                                <span class="data-header__content">
                                    <img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" />First Tier                                </span>
                            </span>
                                                                                                        <span class="data-header__label">Joined: <span class="data-header__content">Aug 30, 2015</span></span>
                            <span class="data-header__label">Contract expires: <span class="data-header__content">Jun 30, 2025</span></span>
                                                            </div>
            </div>
        
        <div class="data-header__profile-container">
                            <div class="modal-trigger" data-custom-open="modal-1" id="fotoauswahlOeffnen" style="cursor:pointer" onclick="tmEvent('spielerprofil','click','profilbild');">
            
                                <img src="https://img.a.transfermarkt.technology/portrait/header/88755-1684245748.jpg?lm=1" title="Kevin De Bruyne" alt="Kevin De Bruyne" class="data-header__profile-image" height="181" width="139" /><div class="bildquelle"><span title="IMAGO">IMAGO</span></div>
                                    <span class="modal-trigger-icon">+</span>
                </div>
                        </div>
        <div class="data-header__info-box ">
            <div class="data-header__details">
                <ul class="data-header__items">
                                            <li class="data-header__label">Date of birth/Age:
                            <span itemprop="birthDate" class="data-header__content">
                                Jun 28, 1991 (32)                            </span>
                        </li>

                                                    <li class="data-header__label">Place of birth:
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />                                <span class="data-header__content" itemprop="birthPlace">
                                    Drongen                                </span>
                            </li>
                        
                                            <li class="data-header__label">Citizenship:
                            <span itemprop="nationality" class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />                                Belgium                            </span>
                        </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li class="data-header__label">Height:
                            <span itemprop="height" class="data-header__content">
                                1,81 m                            </span>
                        </li>
                    
                    <li class="data-header__label">Position:
                        <span class="data-header__content">
                            Attacking Midfield                        </span>
                    </li>
                    
                        <li class="data-header__label">Agent:
                            <span class="data-header__content data-header__content--vertical-aligned">
                                
                                    <a onclick="tmEvent(&quot;spielerprofil&quot;, &quot;click&quot;, &quot;berater-header-premium&quot;)" href="/roc-nation-sports/beraterfirma/berater/5015">Roc Nation Sports</a>                                                                            <img class="data-header__verified-logo" src="https://tmsi.akamaized.net/berater/verified_premium_minified.png" alt="verified" title="verified" height="13" width="13">
                                                                                                </span>
                        </li>

                                    </ul>
                <ul class="data-header__items">
                                            <li for="" class="data-header__label">
                                                            National player:
                                                        <span class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen flagge" /><a title="Belgium" href="/belgien/startseite/verein/3382">Belgium</a>                            </span>
                        </li>
                                                    <li class="data-header__label">Caps/Goals:
                                <a class="data-header__content data-header__content--highlight" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382">99                                </a>/
                                <a class="data-header__content data-header__content--highlight" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382">26                                </a>
                            </li>
                                    </ul>
            </div>
        </div>
        
    
            <div class="data-header__box--small">
                <a href="/kevin-de-bruyne/marktwertverlauf/spieler/88755" class="data-header__market-value-wrapper"><span class="waehrung">€</span>60.00<span class="waehrung">m</span>                <p class="data-header__last-update">Last update: Dec 19, 2023</p></a>
            </div>

            
    </header>
    <div class="row hide-on-print" id="subnavi" data-season="" data-controller="spieler" data-action="leistungsdaten" data-path="player-path/leistungsdaten/spieler/88755/plus/0" data-id="88755">
        <div class="page_wrapper subnavi">
            <div class="large-12 columns">
                <div class="subnavi_box" id="subnavigation">
                    <div class="submenu-text show-for-small">
                        <a name="SubNavi" title="Navigation">
                            <span>≡ Sub navigation</span>
                        </a>
                    </div>
                    <nav>
                        <ul id="submenu">
                                                <li id="close_submenu" class="show-for-small">
                            <div id="submenu-icon">
                                <span class="clicked"></span>
                                <span class="clicked"></span>
                            </div>
                            <a>Close subnavigation</a>
                        </li>
                                                    <li id="profile" class="first-button  " data-nav-group="profile">
                                <a name="SubNavi" href="/kevin-de-bruyne/profil/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','profil');
">Profile</a>
                                                            </li>
                                                        <li id="stats" class="  " data-nav-group="stats">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','leistungsdaten');
">Stats</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="market-values" class="  " data-nav-group="market-values">
                                <a name="SubNavi" href="/kevin-de-bruyne/marktwertverlauf/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','marktwert');
">Market values</a>
                                                            </li>
                                                        <li id="transfers" class="  " data-nav-group="transfers">
                                <a name="SubNavi" href="/kevin-de-bruyne/transfers/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','transfers');
">Transfers</a>
                                                            </li>
                                                        <li id="rumors" class="  " data-nav-group="rumors">
                                <a name="SubNavi" href="/kevin-de-bruyne/geruechte/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','geruchte');
">Rumors</a>
                                                            </li>
                                                        <li id="national-team" class="  " data-nav-group="national-team">
                                <a name="SubNavi" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','nationalmannschaft');
">National team</a>
                                                            </li>
                                                        <li id="news" class="  " data-nav-group="news">
                                <a name="SubNavi" href="/kevin-de-bruyne/news/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','news');
">News</a>
                                                            </li>
                                                        <li id="achievements" class="  " data-nav-group="achievements">
                                <a name="SubNavi" href="/kevin-de-bruyne/erfolge/spieler/88755" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','erfolge');
">Achievements</a>
                                                            </li>
                                                        <li id="career" class="  " data-nav-group="career">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','karriere');
">Career</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="subnavi-edit" class="  subnavi-edit" data-nav-group="subnavi-edit">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','edit');
"></a>
                                <div class="dropdown_fullwidth gasthinweis" title="Log in or register now"><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                    </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <script>
        var stickySubTop = $('#subnavigation').offset().top;
        stickySubTop = stickySubTop - 60;
        var main = $("#main");
        $(document).ready(function() {
            $(window).on('scroll load', function() {
                if (!main.hasClass("stickySubnavigation")) {
                    stickySubTop = $('#subnavigation').offset().top;
                }
                if ($(window).scrollTop() > stickySubTop) {
                    main.addClass("stickySubnavigation");
                } else {
                    main.removeClass("stickySubnavigation");
                }
            });
        });
    </script>
    <style>
        .forum-anchor {
            margin-top: -80px;
        }
    </style>

                        
<div class="row">
    <div class="large-8 columns">

        <div class="box">
            <h2 class="content-box-headline">
                Stats of Kevin De Bruyne            </h2>
            <p class="info-content">
                This page contains information about a player's detailed stats. In the info box, you can filter by period, club, type of league and competition. The "Detailed stats" tab shows a player's total appearances, goals, cards and cumulative minutes of play for each competition, and indicates the season in which it occurred.            </p>
            <div class="content">
                <form action="/kevin-de-bruyne/leistungsdaten/spieler/88755/plus/0" method="get">                <div class="row">
                    <div class="large-12 columns">
                        <table class="auflistung">
                            <tbody>
                                <tr>
                                    <td>Filter by season:</td>
                                    <td>
                                        <div class="inline-select">
                                            <select name="saison" data-placeholder="Filter by season" class="chzn-select" tabindex="0">
                                                <option value="ges">Overall balance</option>
                                                                                                    <option value="2023">23/24</option>
                                                                                                    <option  selected="selected"value="2022">22/23</option>
                                                                                                    <option value="2021">21/22</option>
                                                                                                    <option value="2020">20/21</option>
                                                                                                    <option value="2019">19/20</option>
                                                                                                    <option value="2018">18/19</option>
                                                                                                    <option value="2017">17/18</option>
                                                                                                    <option value="2016">16/17</option>
                                                                                                    <option value="2015">15/16</option>
                                                                                                    <option value="2014">14/15</option>
                                                                                                    <option value="2013">13/14</option>
                                                                                                    <option value="2012">12/13</option>
                                                                                                    <option value="2011">11/12</option>
                                                                                                    <option value="2010">10/11</option>
                                                                                                    <option value="2009">09/10</option>
                                                                                                    <option value="2008">08/09</option>
                                                                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="submit" class="small button" value="Show">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                </form>            </div>
        </div>
        <div class="box">
            <h2 class="content-box-headline">
                Stats 22/23            </h2>
            
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022#gesamt"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1#gesamt"><div class=""><span>Detailed</span></div></a></div>
            <div class="responsive-table">
                <div id="yw1" class="grid-view">
<div class="summary"></div>
<table class="items">
<thead>
<tr>
<th colspan="2" id="yw1_c0"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/wettbewerb">Competition</a></th><th class="hide" id="yw1_c1"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/wettbewerb">wettbewerb</a></th><th class="zentriert" id="yw1_c2"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/einsaetze.desc"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></a></th><th class="zentriert" id="yw1_c3"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/tore.desc"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></a></th><th class="zentriert" id="yw1_c4"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/vorlagen.desc"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></a></th><th class="zentriert" id="yw1_c5"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/gelbe.desc"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c6"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/gelbrote.desc"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c7"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/rote.desc"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></a></th><th class="rechts" id="yw1_c8"><a class="sort-link" href="/player-path/leistungsdaten/spieler/88755/saison/2022/plus/0/sort/einsatzzeit.desc"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></a></th></tr>
</thead>
<tfoot>
<tr>
<td colspan="2" class="rechts">Total  22/23:</td><td class="hide">&nbsp;</td><td class="zentriert">49</td><td class="zentriert">10</td><td class="zentriert">31</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">3.684'</td></tr>
</tfoot>
<tbody>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td><td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td><td class="zentriert player-profile-performance-data"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/wettbewerb/GB1/verein/281">32</a></td><td class="zentriert">7</td><td class="zentriert">18</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">2.425'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cl.png?lm=1626810555" title="UEFA Champions League" alt="UEFA Champions League" class="" /></td><td class="hauptlink no-border-links"><a title="Champions League" href="/uefa-champions-league/startseite/pokalwettbewerb/CL">Champions League</a></td><td class="zentriert player-profile-performance-data"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/wettbewerb/CL/verein/281">10</a></td><td class="zentriert">2</td><td class="zentriert">7</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">722'</td></tr>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/fac.png?lm=1666031556" title="FA Cup" alt="FA Cup" class="" /></td><td class="hauptlink no-border-links"><a title="FA Cup" href="/fa-cup/startseite/pokalwettbewerb/FAC">FA Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/wettbewerb/FAC/verein/281">4</a></td><td class="zentriert">1</td><td class="zentriert">4</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">330'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cgb.png?lm=1566937342" title="EFL Cup" alt="EFL Cup" class="" /></td><td class="hauptlink no-border-links"><a title="EFL Cup" href="/efl-cup/startseite/pokalwettbewerb/CGB">EFL Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/wettbewerb/CGB/verein/281">2</a></td><td class="zentriert">-</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">134'</td></tr>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gbcs.png?lm=1659265562" title="Community Shield" alt="Community Shield" class="" /></td><td class="hauptlink no-border-links"><a title="Community Shield" href="/community-shield/startseite/pokalwettbewerb/GBCS">Community Shield</a></td><td class="zentriert player-profile-performance-data"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/wettbewerb/GBCS/verein/281">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">73'</td></tr>
</tbody>
</table>
<div class="keys" style="display:none" title="/player-path/leistungsdaten/spieler/88755/plus/0?saison=2022"><span>Premier League</span><span>Champions League</span><span>FA Cup</span><span>EFL Cup</span><span>Community Shield</span></div>
</div>            </div>
        </div>

        <div class="box">
    <div class="table-header img-vat">
        <a name="CL" href="/uefa-champions-league/startseite/wettbewerb/CL/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cl.png?lm=1626810555" title="UEFA Champions League" alt="UEFA Champions League" class="" />UEFA Champions League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">9/6/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/368.png?lm=1408655455" title="Sevilla FC" alt="Sevilla FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2022">Sevilla FC</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3911834" href="/sevilla-fc_manchester-city/index/spielbericht/3911834"><span class="greentext">0:4 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">78'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">9/14/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Borussia Dortmund" href="/borussia-dortmund/spielplan/verein/16/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/16.png?lm=1396275280" title="Borussia Dortmund" alt="Borussia Dortmund" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Borussia Dortmund" href="/borussia-dortmund/spielplan/verein/16/saison_id/2022">Bor. Dortmund</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3911832" href="/manchester-city_borussia-dortmund/index/spielbericht/3911832"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">10/5/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="FC Copenhagen" href="/fc-kopenhagen/spielplan/verein/190/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/190.png?lm=1518117389" title="FC Copenhagen" alt="FC Copenhagen" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="FC Copenhagen" href="/fc-kopenhagen/spielplan/verein/190/saison_id/2022">FC Copenhagen</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3911833" href="/manchester-city_fc-copenhagen/index/spielbericht/3911833"><span class="greentext">5:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">10/11/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="FC Copenhagen" href="/fc-kopenhagen/spielplan/verein/190/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/190.png?lm=1518117389" title="FC Copenhagen" alt="FC Copenhagen" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="FC Copenhagen" href="/fc-kopenhagen/spielplan/verein/190/saison_id/2022">FC Copenhagen</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3913698" href="/fc-copenhagen_manchester-city/index/spielbericht/3913698"><span class="">0:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">78'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">10/25/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Borussia Dortmund" href="/borussia-dortmund/spielplan/verein/16/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/16.png?lm=1396275280" title="Borussia Dortmund" alt="Borussia Dortmund" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Borussia Dortmund" href="/borussia-dortmund/spielplan/verein/16/saison_id/2022">Bor. Dortmund</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3913700" href="/borussia-dortmund_manchester-city/index/spielbericht/3913700"><span class="">0:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/G">Group G</a>
                </td>
                                    <td class="zentriert">11/2/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/368.png?lm=1408655455" title="Sevilla FC" alt="Sevilla FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sevilla FC" href="/fc-sevilla/spielplan/verein/368/saison_id/2022">Sevilla FC</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3911831" href="/manchester-city_sevilla-fc/index/spielbericht/3911831"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">20'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/AFH">last 16 1st leg</a>
                </td>
                                    <td class="zentriert">2/22/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/23826.png?lm=1619431624" title="RB Leipzig" alt="RB Leipzig" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2022">RB Leipzig</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3956692" href="/rb-leipzig_manchester-city/index/spielbericht/3956692"><span class="">1:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Ill" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Ill</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/AFR">last 16 2nd leg</a>
                </td>
                                    <td class="zentriert">3/14/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/23826.png?lm=1619431624" title="RB Leipzig" alt="RB Leipzig" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="RB Leipzig" href="/rasenballsport-leipzig/spielplan/verein/23826/saison_id/2022">RB Leipzig</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3956684" href="/manchester-city_rb-leipzig/index/spielbericht/3956684"><span class="greentext">7:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert">67'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/VFH">Quarter-Finals 1st leg</a>
                </td>
                                    <td class="zentriert">4/11/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Bayern Munich" href="/fc-bayern-munchen/spielplan/verein/27/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/27.png?lm=1498251238" title="Bayern Munich" alt="Bayern Munich" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Bayern Munich" href="/fc-bayern-munchen/spielplan/verein/27/saison_id/2022">Bayern Munich</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4041602" href="/manchester-city_bayern-munich/index/spielbericht/4041602"><span class="greentext">3:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">68'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/VFR">Quarter-Finals 2nd leg</a>
                </td>
                                    <td class="zentriert">4/19/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Bayern Munich" href="/fc-bayern-munchen/spielplan/verein/27/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/27.png?lm=1498251238" title="Bayern Munich" alt="Bayern Munich" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Bayern Munich" href="/fc-bayern-munchen/spielplan/verein/27/saison_id/2022">Bayern Munich</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4041605" href="/bayern-munich_manchester-city/index/spielbericht/4041605"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">88'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/HFH">Semi-Finals 1st Leg</a>
                </td>
                                    <td class="zentriert">5/9/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Real Madrid" href="/real-madrid/spielplan/verein/418/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/418.png?lm=1697726166" title="Real Madrid" alt="Real Madrid" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Real Madrid" href="/real-madrid/spielplan/verein/418/saison_id/2022">Real Madrid</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4060794" href="/real-madrid_manchester-city/index/spielbericht/4060794"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/HFR">Semi-Finals 2nd Leg</a>
                </td>
                                    <td class="zentriert">5/17/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Real Madrid" href="/real-madrid/spielplan/verein/418/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/418.png?lm=1697726166" title="Real Madrid" alt="Real Madrid" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Real Madrid" href="/real-madrid/spielplan/verein/418/saison_id/2022">Real Madrid</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4060797" href="/manchester-city_real-madrid/index/spielbericht/4060797"><span class="greentext">4:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">84'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league/spieltag/pokalwettbewerb/CL/saison_id/2022/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">6/10/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46.png?lm=1618900989" title="Inter Milan" alt="Inter Milan" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2022">Inter</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4077814" href="/manchester-city_inter-milan/index/spielbericht/4077814"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">36'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 12,
                        Starting eleven: 9,
                        Substituted in: 1,
                        On the bench: 2,
                        Suspended: 0,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="EMQ" href="/european-qualifiers/startseite/wettbewerb/EMQ/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/emq.png?lm=1410165817" title="European Qualifiers" alt="European Qualifiers" class="" />European Qualifiers        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">3/24/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(9.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Sweden" href="/schweden/spielplan/verein/3557/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/147.png?lm=1520611569" title="Sweden" alt="Sweden" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Sweden" href="/schweden/spielplan/verein/3557/saison_id/2022">Sweden</a>&nbsp;&nbsp;<span class="tabellenplatz">(48.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941508" href="/sweden_belgium/index/spielbericht/3941508"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">6/17/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(17.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Austria" href="/osterreich/spielplan/verein/3383/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/127.png?lm=1520611569" title="Austria" alt="Austria" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Austria" href="/osterreich/spielplan/verein/3383/saison_id/2022">Austria</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941499" href="/belgium_austria/index/spielbericht/3941499"><span class="">1:1 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">6/20/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(12.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Estonia" href="/estland/spielplan/verein/6133/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/47.png?lm=1520611569" title="Estonia" alt="Estonia" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Estonia" href="/estland/spielplan/verein/6133/saison_id/2022">Estonia</a>&nbsp;&nbsp;<span class="tabellenplatz">(44.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941506" href="/estonia_belgium/index/spielbericht/3941506"><span class="greentext">0:3 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">9/9/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Azerbaijan" href="/aserbaidschan/spielplan/verein/8605/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/13.png?lm=1520611569" title="Azerbaijan" alt="Azerbaijan" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Azerbaijan" href="/aserbaidschan/spielplan/verein/8605/saison_id/2022">Azerbaijan</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941505" href="/azerbaijan_belgium/index/spielbericht/3941505"><span class="greentext">0:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">9/12/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Estonia" href="/estland/spielplan/verein/6133/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/47.png?lm=1520611569" title="Estonia" alt="Estonia" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Estonia" href="/estland/spielplan/verein/6133/saison_id/2022">Estonia</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941502" href="/belgium_estonia/index/spielbericht/3941502"><span class="greentext">5:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">10/13/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Austria" href="/osterreich/spielplan/verein/3383/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/127.png?lm=1520611569" title="Austria" alt="Austria" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Austria" href="/osterreich/spielplan/verein/3383/saison_id/2022">Austria</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941503" href="/austria_belgium/index/spielbericht/3941503"><span class="greentext">2:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">10/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Sweden" href="/schweden/spielplan/verein/3557/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/147.png?lm=1520611569" title="Sweden" alt="Sweden" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sweden" href="/schweden/spielplan/verein/3557/saison_id/2022">Sweden</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941500" href="/belgium_sweden/index/spielbericht/3941500"><span class="">1:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/F">Group F</a>
                </td>
                                    <td class="zentriert">11/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Azerbaijan" href="/aserbaidschan/spielplan/verein/8605/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/13.png?lm=1520611569" title="Azerbaijan" alt="Azerbaijan" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Azerbaijan" href="/aserbaidschan/spielplan/verein/8605/saison_id/2022">Azerbaijan</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941501" href="/belgium_azerbaijan/index/spielbericht/3941501"><span class="greentext">5:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Hamstring injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Hamstring injury</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 5                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="FS" href="/international-friendlies/startseite/wettbewerb/FS/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/fs.png?lm=1405063091" title="International Friendlies" alt="International Friendlies" class="" />International Friendlies        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/international-friendlies/spieltag/wettbewerb/FS/saison_id/2022/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">11/18/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Egypt" href="/agypten/spielplan/verein/3672/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/2.png?lm=1520611569" title="Egypt" alt="Egypt" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Egypt" href="/agypten/spielplan/verein/3672/saison_id/2022">Egypt</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3926447" href="/belgium_egypt/index/spielbericht/3926447"><span class="redtext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="UNLA" href="/uefa-nations-league-a/startseite/wettbewerb/UNLA/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/unla.png?lm=1512858223" title="UEFA Nations League A" alt="UEFA Nations League A" class="" />UEFA Nations League A        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/4">Group 4</a>
                </td>
                                    <td class="zentriert">6/3/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Netherlands" href="/niederlande/spielplan/verein/3379/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/122.png?lm=1520611569" title="Netherlands" alt="Netherlands" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Netherlands" href="/niederlande/spielplan/verein/3379/saison_id/2022">Netherlands</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716442" href="/belgium_netherlands/index/spielbericht/3716442"><span class="redtext">1:4 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/4">Group 4</a>
                </td>
                                    <td class="zentriert">6/8/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Poland" href="/polen/spielplan/verein/3442/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/135.png?lm=1520611569" title="Poland" alt="Poland" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Poland" href="/polen/spielplan/verein/3442/saison_id/2022">Poland</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716450" href="/belgium_poland/index/spielbericht/3716450"><span class="greentext">6:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">75'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/4">Group 4</a>
                </td>
                                    <td class="zentriert">6/11/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Wales" href="/wales/spielplan/verein/3864/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/191.png?lm=1520611569" title="Wales" alt="Wales" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Wales" href="/wales/spielplan/verein/3864/saison_id/2022">Wales</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716457" href="/wales_belgium/index/spielbericht/3716457"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">72'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/4">Group 4</a>
                </td>
                                    <td class="zentriert">6/14/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Poland" href="/polen/spielplan/verein/3442/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/135.png?lm=1520611569" title="Poland" alt="Poland" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Poland" href="/polen/spielplan/verein/3442/saison_id/2022">Poland</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716465" href="/poland_belgium/index/spielbericht/3716465"><span class="greentext">0:1 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/4">Group 4</a>
                </td>
                                    <td class="zentriert">9/22/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Wales" href="/wales/spielplan/verein/3864/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/191.png?lm=1520611569" title="Wales" alt="Wales" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Wales" href="/wales/spielplan/verein/3864/saison_id/2022">Wales</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716472" href="/belgium_wales/index/spielbericht/3716472"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/4">Group 4</a>
                </td>
                                    <td class="zentriert">9/25/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Belgium" href="/belgien/spielplan/verein/3382/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Netherlands" href="/niederlande/spielplan/verein/3379/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/122.png?lm=1520611569" title="Netherlands" alt="Netherlands" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Netherlands" href="/niederlande/spielplan/verein/3379/saison_id/2022">Netherlands</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716480" href="/netherlands_belgium/index/spielbericht/3716480"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 5,
                        Starting eleven: 5,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="GB1" href="/premier-league/startseite/wettbewerb/GB1/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/1">1</a>
                </td>
                                    <td class="zentriert">8/7/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/379.png?lm=1464675260" title="West Ham United" alt="West Ham United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2022">West Ham</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3837823" href="/west-ham-united_manchester-city/index/spielbericht/3837823"><span class="greentext">0:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">88'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/2">2</a>
                </td>
                                    <td class="zentriert">8/13/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/989.png?lm=1457991811" title="AFC Bournemouth" alt="AFC Bournemouth" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2022">Bournemouth</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3837827" href="/manchester-city_afc-bournemouth/index/spielbericht/3837827"><span class="greentext">4:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/3">3</a>
                </td>
                                    <td class="zentriert">8/21/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/762.png?lm=1472921161" title="Newcastle United" alt="Newcastle United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2022">Newcastle</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3837841" href="/newcastle-united_manchester-city/index/spielbericht/3837841"><span class="">3:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">8/27/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/873.png?lm=1457723287" title="Crystal Palace" alt="Crystal Palace" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2022">Crystal Palace</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3837850" href="/manchester-city_crystal-palace/index/spielbericht/3837850"><span class="greentext">4:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">89'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">8/31/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/703.png?lm=1598890289" title="Nottingham Forest" alt="Nottingham Forest" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2022">Nottm Forest</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3837863" href="/manchester-city_nottingham-forest/index/spielbericht/3837863"><span class="greentext">6:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">21'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/6">6</a>
                </td>
                                    <td class="zentriert">9/3/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2022">Aston Villa</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3837972" href="/aston-villa_manchester-city/index/spielbericht/3837972"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/8">8</a>
                </td>
                                    <td class="zentriert">9/17/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/543.png?lm=1467496784" title="Wolverhampton Wanderers" alt="Wolverhampton Wanderers" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2022">Wolves</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838007" href="/wolverhampton-wanderers_manchester-city/index/spielbericht/3838007"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">72'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/9">9</a>
                </td>
                                    <td class="zentriert">10/2/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/985.png?lm=1457975903" title="Manchester United" alt="Manchester United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2022">Man Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838015" href="/manchester-city_manchester-united/index/spielbericht/3838015"><span class="greentext">6:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">75'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/10">10</a>
                </td>
                                    <td class="zentriert">10/8/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Southampton FC" href="/fc-southampton/spielplan/verein/180/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/180.png?lm=1444560086" title="Southampton FC" alt="Southampton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Southampton FC" href="/fc-southampton/spielplan/verein/180/saison_id/2022">Southampton</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838024" href="/manchester-city_southampton-fc/index/spielbericht/3838024"><span class="greentext">4:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">70'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/11">11</a>
                </td>
                                    <td class="zentriert">10/16/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31.png?lm=1456567819" title="Liverpool FC" alt="Liverpool FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022">Liverpool</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838033" href="/liverpool-fc_manchester-city/index/spielbericht/3838033"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/13">13</a>
                </td>
                                    <td class="zentriert">10/22/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1237.png?lm=1492718902" title="Brighton & Hove Albion" alt="Brighton & Hove Albion" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2022">Brighton</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838192" href="/manchester-city_brighton-amp-hove-albion/index/spielbericht/3838192"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/14">14</a>
                </td>
                                    <td class="zentriert">10/29/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Leicester City" href="/leicester-city/spielplan/verein/1003/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1003.png?lm=1472229265" title="Leicester City" alt="Leicester City" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Leicester City" href="/leicester-city/spielplan/verein/1003/saison_id/2022">Leicester</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838210" href="/leicester-city_manchester-city/index/spielbericht/3838210"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/15">15</a>
                </td>
                                    <td class="zentriert">11/5/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/931.png?lm=1556831687" title="Fulham FC" alt="Fulham FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2022">Fulham</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838230" href="/manchester-city_fulham-fc/index/spielbericht/3838230"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/16">16</a>
                </td>
                                    <td class="zentriert">11/12/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brentford FC" href="/fc-brentford/spielplan/verein/1148/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1148.png?lm=1625150543" title="Brentford FC" alt="Brentford FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Brentford FC" href="/fc-brentford/spielplan/verein/1148/saison_id/2022">Brentford</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838240" href="/manchester-city_brentford-fc/index/spielbericht/3838240"><span class="redtext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/17">17</a>
                </td>
                                    <td class="zentriert">12/28/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Leeds United" href="/leeds-united/spielplan/verein/399/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/399.png?lm=1645652224" title="Leeds United" alt="Leeds United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Leeds United" href="/leeds-united/spielplan/verein/399/saison_id/2022">Leeds</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838258" href="/leeds-united_manchester-city/index/spielbericht/3838258"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/18">18</a>
                </td>
                                    <td class="zentriert">12/31/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/29.png?lm=1445949846" title="Everton FC" alt="Everton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2022">Everton</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838266" href="/manchester-city_everton-fc/index/spielbericht/3838266"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">30'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/19">19</a>
                </td>
                                    <td class="zentriert">1/5/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022">Chelsea</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838275" href="/chelsea-fc_manchester-city/index/spielbericht/3838275"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/20">20</a>
                </td>
                                    <td class="zentriert">1/14/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/985.png?lm=1457975903" title="Manchester United" alt="Manchester United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2022">Man Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838799" href="/manchester-united_manchester-city/index/spielbericht/3838799"><span class="redtext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/7">7</a>
                </td>
                                    <td class="zentriert">1/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/148.png?lm=1544345801" title="Tottenham Hotspur" alt="Tottenham Hotspur" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2022">Tottenham</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3837995" href="/manchester-city_tottenham-hotspur/index/spielbericht/3837995"><span class="greentext">4:2 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/21">21</a>
                </td>
                                    <td class="zentriert">1/22/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/543.png?lm=1467496784" title="Wolverhampton Wanderers" alt="Wolverhampton Wanderers" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2022">Wolves</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838785" href="/manchester-city_wolverhampton-wanderers/index/spielbericht/3838785"><span class="greentext">3:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">77'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/22">22</a>
                </td>
                                    <td class="zentriert">2/5/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/148.png?lm=1544345801" title="Tottenham Hotspur" alt="Tottenham Hotspur" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2022">Tottenham</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838778" href="/tottenham-hotspur_manchester-city/index/spielbericht/3838778"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">31'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/23">23</a>
                </td>
                                    <td class="zentriert">2/12/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2022">Aston Villa</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838763" href="/manchester-city_aston-villa/index/spielbericht/3838763"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/12">12</a>
                </td>
                                    <td class="zentriert">2/15/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2022">Arsenal</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838051" href="/arsenal-fc_manchester-city/index/spielbericht/3838051"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">87'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/24">24</a>
                </td>
                                    <td class="zentriert">2/18/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/703.png?lm=1598890289" title="Nottingham Forest" alt="Nottingham Forest" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2022">Nottm Forest</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838760" href="/nottingham-forest_manchester-city/index/spielbericht/3838760"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">88'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/25">25</a>
                </td>
                                    <td class="zentriert">2/25/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/989.png?lm=1457991811" title="AFC Bournemouth" alt="AFC Bournemouth" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2022">Bournemouth</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838741" href="/afc-bournemouth_manchester-city/index/spielbericht/3838741"><span class="greentext">1:4 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/26">26</a>
                </td>
                                    <td class="zentriert">3/4/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/762.png?lm=1472921161" title="Newcastle United" alt="Newcastle United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Newcastle United" href="/newcastle-united/spielplan/verein/762/saison_id/2022">Newcastle</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838734" href="/manchester-city_newcastle-united/index/spielbericht/3838734"><span class="greentext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">65'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/27">27</a>
                </td>
                                    <td class="zentriert">3/11/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/873.png?lm=1457723287" title="Crystal Palace" alt="Crystal Palace" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2022">Crystal Palace</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838722" href="/crystal-palace_manchester-city/index/spielbericht/3838722"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">11'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/29">29</a>
                </td>
                                    <td class="zentriert">4/1/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31.png?lm=1456567819" title="Liverpool FC" alt="Liverpool FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022">Liverpool</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838704" href="/manchester-city_liverpool-fc/index/spielbericht/3838704"><span class="greentext">4:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/30">30</a>
                </td>
                                    <td class="zentriert">4/8/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Southampton FC" href="/fc-southampton/spielplan/verein/180/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/180.png?lm=1444560086" title="Southampton FC" alt="Southampton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Southampton FC" href="/fc-southampton/spielplan/verein/180/saison_id/2022">Southampton</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838693" href="/southampton-fc_manchester-city/index/spielbericht/3838693"><span class="greentext">1:4 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/31">31</a>
                </td>
                                    <td class="zentriert">4/15/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Leicester City" href="/leicester-city/spielplan/verein/1003/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1003.png?lm=1472229265" title="Leicester City" alt="Leicester City" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Leicester City" href="/leicester-city/spielplan/verein/1003/saison_id/2022">Leicester</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838681" href="/manchester-city_leicester-city/index/spielbericht/3838681"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">62'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/33">33</a>
                </td>
                                    <td class="zentriert">4/26/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2022">Arsenal</a>&nbsp;&nbsp;<span class="tabellenplatz">(2.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838651" href="/manchester-city_arsenal-fc/index/spielbericht/3838651"><span class="greentext">4:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">2</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">80'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/34">34</a>
                </td>
                                    <td class="zentriert">4/30/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/931.png?lm=1556831687" title="Fulham FC" alt="Fulham FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2022">Fulham</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838643" href="/fulham-fc_manchester-city/index/spielbericht/3838643"><span class="greentext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Foot bruise" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Foot bruise</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/28">28</a>
                </td>
                                    <td class="zentriert">5/3/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/379.png?lm=1464675260" title="West Ham United" alt="West Ham United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2022">West Ham</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838717" href="/manchester-city_west-ham-united/index/spielbericht/3838717"><span class="greentext">3:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Foot bruise" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Foot bruise</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/35">35</a>
                </td>
                                    <td class="zentriert">5/6/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Leeds United" href="/leeds-united/spielplan/verein/399/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/399.png?lm=1645652224" title="Leeds United" alt="Leeds United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Leeds United" href="/leeds-united/spielplan/verein/399/saison_id/2022">Leeds</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838627" href="/manchester-city_leeds-united/index/spielbericht/3838627"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/36">36</a>
                </td>
                                    <td class="zentriert">5/14/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/29.png?lm=1445949846" title="Everton FC" alt="Everton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2022">Everton</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838618" href="/everton-fc_manchester-city/index/spielbericht/3838618"><span class="greentext">0:3 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/37">37</a>
                </td>
                                    <td class="zentriert">5/21/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022">Chelsea</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838607" href="/manchester-city_chelsea-fc/index/spielbericht/3838607"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">12'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/32">32</a>
                </td>
                                    <td class="zentriert">5/24/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1237.png?lm=1492718902" title="Brighton & Hove Albion" alt="Brighton & Hove Albion" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2022">Brighton</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838671" href="/brighton-amp-hove-albion_manchester-city/index/spielbericht/3838671"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">57'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2022/spieltag/38">38</a>
                </td>
                                    <td class="zentriert">5/28/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brentford FC" href="/fc-brentford/spielplan/verein/1148/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1148.png?lm=1625150543" title="Brentford FC" alt="Brentford FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Brentford FC" href="/fc-brentford/spielplan/verein/1148/saison_id/2022">Brentford</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3838595" href="/brentford-fc_manchester-city/index/spielbericht/3838595"><span class="redtext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 35,
                        Starting eleven: 28,
                        Substituted in: 4,
                        On the bench: 3,
                        Suspended: 0,
                        Injured: 2                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="GBCS" href="/community-shield/startseite/wettbewerb/GBCS/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/gbcs.png?lm=1659265562" title="Community Shield" alt="Community Shield" class="" />Community Shield        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/community-shield/spieltag/pokalwettbewerb/GBCS/saison_id/2022/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">7/30/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31.png?lm=1456567819" title="Liverpool FC" alt="Liverpool FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022">Liverpool</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3889181" href="/liverpool-fc_manchester-city/index/spielbericht/3889181"><span class="redtext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">73'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="FAC" href="/fa-cup/startseite/wettbewerb/FAC/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/fac.png?lm=1666031556" title="FA Cup" alt="FA Cup" class="" />FA Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/fa-cup/spieltag/pokalwettbewerb/FAC/saison_id/2022/gruppe/3R">Third Round</a>
                </td>
                                    <td class="zentriert">1/8/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022">Chelsea</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3974048" href="/manchester-city_chelsea-fc/index/spielbericht/3974048"><span class="greentext">4:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/fa-cup/spieltag/pokalwettbewerb/FAC/saison_id/2022/gruppe/4R">Fourth Round</a>
                </td>
                                    <td class="zentriert">1/27/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2022">Arsenal</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4013646" href="/manchester-city_arsenal-fc/index/spielbericht/4013646"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">75'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/fa-cup/spieltag/pokalwettbewerb/FAC/saison_id/2022/gruppe/5R">Fifth Round</a>
                </td>
                                    <td class="zentriert">2/28/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Bristol City" href="/bristol-city/spielplan/verein/698/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/698.png?lm=1571314125" title="Bristol City" alt="Bristol City" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Bristol City" href="/bristol-city/spielplan/verein/698/saison_id/2022">Bristol City</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4018345" href="/bristol-city_manchester-city/index/spielbericht/4018345"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/fa-cup/spieltag/pokalwettbewerb/FAC/saison_id/2022/gruppe/VF">Quarter-Finals</a>
                </td>
                                    <td class="zentriert">3/18/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1132_1686900149.png?lm=1686900149" title="&nbsp;" alt="Burnley FC" class="" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2022">Burnley</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4035008" href="/manchester-city_burnley-fc/index/spielbericht/4035008"><span class="greentext">6:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a><span title="Team captain" class="kapitaenicon-table icons_sprite">&nbsp;</span></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">89'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/fa-cup/spieltag/pokalwettbewerb/FAC/saison_id/2022/gruppe/HF">Semi-Finals</a>
                </td>
                                    <td class="zentriert">4/22/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/350.png?lm=1409254138" title="Sheffield United" alt="Sheffield United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2022">Sheff Utd</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4042689" href="/manchester-city_sheffield-united/index/spielbericht/4042689"><span class="greentext">3:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/fa-cup/spieltag/pokalwettbewerb/FAC/saison_id/2022/gruppe/FF">Final</a>
                </td>
                                    <td class="zentriert">6/3/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/985.png?lm=1457975903" title="Manchester United" alt="Manchester United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2022">Man Utd</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4064735" href="/manchester-city_manchester-united/index/spielbericht/4064735"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">76'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 6,
                        Starting eleven: 4,
                        Substituted in: 0,
                        On the bench: 2,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="CGB" href="/efl-cup/startseite/wettbewerb/CGB/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cgb.png?lm=1566937342" title="EFL Cup" alt="EFL Cup" class="" />EFL Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/kevin-de-bruyne/leistungsdaten/spieler/88755/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/efl-cup/spieltag/pokalwettbewerb/CGB/saison_id/2022/gruppe/3R">Third Round</a>
                </td>
                                    <td class="zentriert">11/9/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2022">Chelsea</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3911701" href="/manchester-city_chelsea-fc/index/spielbericht/3911701"><span class="greentext">2:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/efl-cup/spieltag/pokalwettbewerb/CGB/saison_id/2022/gruppe/4R">Fourth Round</a>
                </td>
                                    <td class="zentriert">12/22/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31.png?lm=1456567819" title="Liverpool FC" alt="Liverpool FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2022">Liverpool</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3959873" href="/manchester-city_liverpool-fc/index/spielbericht/3959873"><span class="greentext">3:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/efl-cup/spieltag/pokalwettbewerb/CGB/saison_id/2022/gruppe/VF">Quarter-Finals</a>
                </td>
                                    <td class="zentriert">1/11/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Southampton FC" href="/fc-southampton/spielplan/verein/180/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/180.png?lm=1444560086" title="Southampton FC" alt="Southampton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Southampton FC" href="/fc-southampton/spielplan/verein/180/saison_id/2022">Southampton</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3989305" href="/southampton-fc_manchester-city/index/spielbericht/3989305"><span class="redtext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Central Midfield">CM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 3,
                        Starting eleven: 1,
                        Substituted in: 1,
                        On the bench: 1,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
</div>
    <div class="large-4 columns">
        <div class="werbung werbung-rectangle1">
  <div id="div-gpt-ad-1621526463511-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621526463511-0"); });</script>
  </div>
</div>
        <div class="box hide">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                                    <span class="position_8" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);background-color: rgba(143, 13, 16, 0.98);font-size:11px !important" title="3.448275862069">1</span>
                                        <span class="position_13" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);background-color: rgba(143, 13, 16, 0.98);font-size:11px !important" title="3.448275862069">1</span>
                                        <span class="position_7" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:20px !important" title="55.172413793103">16</span>
                                        <span class="position_10" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:22px !important" title="100">29</span>
                                </div>
        </div>
    </div>
</div>
<div class="box">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                
                    <div class="zahl-anzeige pos-box positionsbox_8" title="Right Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/8">
                            <div class="text-box p-8" style="font-size:11px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                1                                <div class="zusatz-kreis">RM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_8" title="Right Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/8">
                            <div class="text-box p-8" style="font-size:11px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                RM                                <div class="zusatz-kreis">1</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/13">
                            <div class="text-box p-13" style="font-size:11px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                1                                <div class="zusatz-kreis">SS</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/13">
                            <div class="text-box p-13" style="font-size:11px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                SS                                <div class="zusatz-kreis">1</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_7" title="Central Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/7">
                            <div class="text-box p-7" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                16                                <div class="zusatz-kreis">CM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_7" title="Central Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/7">
                            <div class="text-box p-7" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                CM                                <div class="zusatz-kreis">16</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/10">
                            <div class="text-box p-10" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                29                                <div class="zusatz-kreis">AM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/10">
                            <div class="text-box p-10" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                AM                                <div class="zusatz-kreis">29</div>
                            </div>
                            </a>
                        </div>
                    </div>

                                </div>
        </div>
    </div>
        <table>
        <thead>
            <tr>
                <th>Played as...</th>
                <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                        </tr>
        </thead>
        <tbody>
                        <tr>
                <td class="hauptlink"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/10">Attacking Midfield</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/10">29</a></td>
                                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/10">6</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/10">21</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/7">Central Midfield</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/7">16</a></td>
                                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/7">4</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/7">10</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/13">Second Striker</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/13">1</a></td>
                                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/13">-</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/13">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/8">Right Midfield</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/8">1</a></td>
                                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/8">-</a></td>
                <td class="zentriert"><a href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2022/pos/8">-</a></td>
                            </tr>
                        </tbody>
    </table>
</div>
        <div class="box">
    <h2 class="content-box-headline">
        Stats by club    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Club</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2016"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2016">Man City</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/281">358</a></td>
                            <td class="zentriert">96</td>
                <td class="zentriert">153</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="KRC Genk" href="/krc-genk/spielplan/verein/1184/saison_id/2009"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1184_1522273528.png?lm=1522273528" title="&nbsp;" alt="KRC Genk" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="KRC Genk" href="/krc-genk/spielplan/verein/1184/saison_id/2009">KRC Genk</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/1184">113</a></td>
                            <td class="zentriert">17</td>
                <td class="zentriert">36</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="VfL Wolfsburg" href="/vfl-wolfsburg/spielplan/verein/82/saison_id/2015"><img src="https://tmssl.akamaized.net/images/wappen/tiny/82.png?lm=1503060755" title="VfL Wolfsburg" alt="VfL Wolfsburg" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="VfL Wolfsburg" href="/vfl-wolfsburg/spielplan/verein/82/saison_id/2015">VfL Wolfsburg</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/82">73</a></td>
                            <td class="zentriert">20</td>
                <td class="zentriert">37</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="SV Werder Bremen" href="/sv-werder-bremen/spielplan/verein/86/saison_id/2012"><img src="https://tmssl.akamaized.net/images/wappen/tiny/86.png?lm=1403082298" title="SV Werder Bremen" alt="SV Werder Bremen" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="SV Werder Bremen" href="/sv-werder-bremen/spielplan/verein/86/saison_id/2012">Werder Bremen</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/86">34</a></td>
                            <td class="zentriert">10</td>
                <td class="zentriert">10</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2013"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2013">Chelsea</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/verein/631">9</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">1</td>
                    </tr>
            </tbody>
    </table>
    <a title="Kevin De Bruyne" class="content-link" href="/kevin-de-bruyne/leistungsdatenverein/spieler/88755">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        Performance by competition    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Competition</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/GB1">243</a></td>
                            <td class="zentriert">64</td>
                <td class="zentriert">105</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/l1.png?lm=1525905518" title="Bundesliga" alt="Bundesliga" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Bundesliga" href="/bundesliga/startseite/wettbewerb/L1">Bundesliga</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/L1">85</a></td>
                            <td class="zentriert">23</td>
                <td class="zentriert">36</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/be1.png?lm=1601478124" title="Jupiler Pro League" alt="Jupiler Pro League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League" href="/jupiler-pro-league/startseite/wettbewerb/BE1">Jupiler Pro League</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/BE1/verein/1184">72</a></td>
                            <td class="zentriert">13</td>
                <td class="zentriert">19</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/ejpl.png?lm=1404554019" title="Jupiler Pro League Champions' Play-Offs" alt="Jupiler Pro League Champions' Play-Offs" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League Champions&#039; Play-Offs" href="/jupiler-pro-league-playoff-i/startseite/wettbewerb/EJPL">Jupiler Pro League Champions' Play-Offs</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/wettbewerb/EJPL/verein/1184">16</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">11</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/pobe.png?lm=1404554039" title="Jupiler Pro League Europe Play-Offs" alt="Jupiler Pro League Europe Play-Offs" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League Europe Play-Offs" href="/jupiler-pro-league-playoff-ii/startseite/wettbewerb/POBE">Jupiler Pro League Europe Play-Offs</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2009/wettbewerb/POBE/verein/1184">5</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">2</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/esjp.png?lm=1415794336" title="Jupiler Pro League playoff Europa League" alt="Jupiler Pro League playoff Europa League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Jupiler Pro League playoff Europa League" href="/entscheidungsspiele-jupiler-pro-league/startseite/wettbewerb/ESJP">Jupiler Pro League playoff Europa League</a></td>
            <td class="zentriert"><a title="Kevin De Bruyne" href="/kevin-de-bruyne/leistungsdatendetails/spieler/88755/saison/2009/wettbewerb/ESJP/verein/1184">4</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">2</td>
                    </tr>
            </tbody>
    </table>
    <a title="Kevin De Bruyne" class="content-link" href="/kevin-de-bruyne/detaillierteleistungsdaten/spieler/88755">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        National team career    </h2>
    <table>
        <thead>
        <tr>
            <th class="zentriert">#</th>
            <th colspan="2" class="hide-for-small">National team</th>
            <th class="zentriert">Debut</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Matches">&nbsp;</span></th>
            <th class="zentriert"><span class="icons_sprite icon-tor-table-header"></span></th>
                    </tr>
        </thead>
        <tbody>
            <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium" href="/belgien/startseite/verein/3382">Belgium</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_gelb_20">
            
                7
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium" href="/belgien/startseite/verein/3382">Belgium</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/1029793" title="International Friendlies: Finland - Belgium 1:0">Aug 11, 2010</a>
                                </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382">99</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/3382/nurEinsatz/2">26</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium U21" href="/belgien-u21/startseite/verein/9315">Belgium U21</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                10
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium U21" href="/belgien-u21/startseite/verein/9315">Belgium U21</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2789305" title="International Friendlies: Belgium U21 - Scotland U21 1:0">Mar 24, 2011</a>
                                </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/9315">2</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/9315/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium U19" href="/belgien-u19/startseite/verein/16338">Belgium U19</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                14
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium U19" href="/belgien-u19/startseite/verein/16338">Belgium U19</a>            </td>
            <td class="zentriert">
                                    May 11, 2009                            </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16338">10</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16338/nurEinsatz/2">1</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Belgium U18" href="/belgien-u18/startseite/verein/16337">Belgium U18</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                10
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/19.png?lm=1520611569" title="Belgium" alt="Belgium" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Belgium U18" href="/belgien-u18/startseite/verein/16337">Belgium U18</a>            </td>
            <td class="zentriert">
                                    Nov 19, 2008                            </td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16337">7</a></td>
            <td class="zentriert"><a href="/kevin-de-bruyne/nationalmannschaft/spieler/88755/verein_id/16337/nurEinsatz/2">1</a></td>
                    </tr>
                </tbody>
    </table>
            <a title="Kevin De Bruyne" class="content-link" href="/kevin-de-bruyne/nationalmannschaft/spieler/88755">Go to national player profile</a>    </div>
        <div class="werbung werbung-rectangle2">
  <div id="div-gpt-ad-1621528018930-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528018930-0"); });</script>
  </div>
</div>
    </div>
</div>

<script async src="/js/custom/tm-track-links.min.js" type="module"></script>
<div class="werbung werbung-fullsize_contentad">
  <div id="div-gpt-ad-1621528173524-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528173524-0"); });</script>
  </div>
</div>
        </main>

        <footer>
            <div class="tm-footer">
            <a href="/"
           class="tm-footer__logo">
          <img src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" alt="Transfermarkt" height="33" width="80"/>
        </a>
          <ul class="tm-footer__links">
    <li class="tm-footer__links-item">
      <a href="/intern/impressum">
          Legal notice      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/web/datenschutz">
          Data protection      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="javascript:void(0)" class="cmp-link">
          Privacy      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/anb">
          General conditions of use      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/tmteam">
          TM-Team      </a>
    </li>
                        <li class="tm-footer__links-item">
      <a href="/intern/faq">
          FAQ      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/fehlermelden">
          Found a mistake?      </a>
    </li>
  </ul>
</div>
        </footer>
                <div id="menue_overlay"></div>
    </div>
        <script type="text/javascript">
        var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r",
"co":""
}
    </script>
        <script type="module">
        var defaultOptions = {
            tracking: !0,
            refreshAds: !0
        };
        export var refreshAd = function() {
            var e, n;
            [ASCDP.hasOwnProperty("adS"), null === (e = ASCDP.adS) || void 0 === e ? void 0 : e.hasOwnProperty("reloadAds"), "function" == typeof(null === (n = ASCDP.adS) || void 0 === n ? void 0 : n.reloadAds)].every(function(e) {
                return e
            }) && ASCDP.adS.reloadAds()
        };
        export var TmTrackingAndAds = function(e, n) {
            void 0 === n && (n = defaultOptions);
            var r = ["tabelle", "reiter", "forum"].includes(e) ? e : "";
            n.tracking && (gtag("event", "page_view", {
                page_path: "/jsContent" + window.location.pathname
            }), sendIvwData(r)), n.refreshAds && "undefined" != typeof ASCDP && refreshAd()
        };
        window.tmTrackingAndAds = function(e, n) {
            return TmTrackingAndAds(e, n)
        };
    </script>
            <script type="text/javascript">
            const iommInterval = setInterval(() => {
                if (typeof IOMm === 'function') {
                    IOMm('configure', {
                        st: iam_data.st,
                        dn: 'data-84a0f3455d.transfermarkt.com',
                        mh: 5
                    });
                    IOMm('pageview', {
                        cp: iam_data.cp,
                        co: iam_data.co
                    });
                    clearInterval(iommInterval);
                }
            }, 250);
        </script>
    <script type="text/javascript">
	if(typeof(adet) == "boolean" && adet == false){
		img_src="/static/singlepictures/jk99hhfsdh209nbnkjldgh90sghfsdlk";
	} else {
		img_src="/static/singlepictures/jku90whjlkjbwbta1g4b8h89fh8sgh8d";
	}
	var elem = document.createElement("img");
	document.body.appendChild(elem);
	elem.src = img_src;
</script>

            <script>
            $(function() {
                var cnt = $('div.large-4.columns').length;
                if (cnt == 1) {
                    var sidebarDiv = document.querySelector('div.large-4.columns');
                    if (sidebarDiv !== null) {
                        $('#werbung_recommender_sidebar_wrapper').appendTo(sidebarDiv);
                        $('#werbung_recommender_sidebar_wrapper').show();
                    }
                }
            });
        </script>
        <div id="werbung_recommender_sidebar_wrapper" style="display: none;">
            <div 
    id="recommender_sidebar" 
    class="box"
    >
    <div class="OUTBRAIN" data-widget-id="SL_DT_SB"></div>
<tm-consent 
    no-checkbox 
    type="outbrain" 
    embed="PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jPSJhc3luYyIgc3JjPSIvL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzIj48L3NjcmlwdD4=">
</tm-consent>
</div>
        </div>
    <script type="module" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.esm.js" defer></script><script nomodule="" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.js" defer></script><tm-consent type="adition" no-checkbox embed="PHNjcmlwdCBzcmM9Imh0dHBzOi8vY3JlYXRpdmUtY2RuLm9kZHNzZXJ2ZS5jb20vbG9hZGVyLmpzP3B1Ymxpc2hlcj10bSIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4="></tm-consent><tm-consent type="googleanalytics" no-checkbox embed="PHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMzgxNjIwNC0xMyI+PC9zY3JpcHQ+"></tm-consent>
<tm-consent type="pubmatic" no-checkbox embed="PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBXVD17fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncHRSYW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBXVC5qc0xvYWRlZCA9ICgpID0+IHsgLy9QdWJNYXRpYyBwd3QuanMgb24gbG9hZCBjYWxsYmFjayBpcyB1c2VkIHRvIGxvYWQgR1BUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEdQVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkR1BUID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGdwdFJhbiBmbGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncHRSYW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B0UmFuID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWRzLnNyYyA9ICh1c2VTU0wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0L3RhZy9qcy9ncHQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbHNhZmUgdG8gY2FsbCBncHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEdQVCwgNTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9wd3QvMTYzMjI5LzEwMTAzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZlcnNpb25JZCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1cmwuaW5kZXhPZigncHd0dj0nKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IC9wd3R2PSguKj8pKCZ8JCkvZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHJlZ2V4cC5leGVjKHB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoID49IDIgJiYgbWF0Y2hlc1sxXS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVZlcnNpb25JZCA9ICcvJyttYXRjaGVzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3RhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dGFkcy5hc3luYyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3RhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd0YWRzLnNyYyA9IHVybCtwcm9maWxlVmVyc2lvbklkKycvcHd0LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHd0YWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICA="></tm-consent><tm-consent type="amazonadvertising" no-checkbox embed="PHNjcmlwdD4hZnVuY3Rpb24odCwkLGUscyxpLGEsbyl7JFt0XXx8KCRbdF09e2luaXQ6ZnVuY3Rpb24oKXtfKCJpIixhcmd1bWVudHMpfSxmZXRjaEJpZHM6ZnVuY3Rpb24oKXtfKCJmIixhcmd1bWVudHMpfSxzZXREaXNwbGF5QmlkczpmdW5jdGlvbigpe30sdGFyZ2V0aW5nS2V5czpmdW5jdGlvbigpe3JldHVybltdfSxfUTpbXX0sKGE9ZS5jcmVhdGVFbGVtZW50KHMpKS5hc3luYz0hMCxhLnNyYz1pLChvPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbykpO2Z1bmN0aW9uIF8oZSxzKXskW3RdLl9RLnB1c2goW2Usc10pfX0oImFwc3RhZyIsd2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCIvL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIpLGFwc3RhZy5pbml0KHtwdWJJRDoiNTEzNCIsYWRTZXJ2ZXI6Imdvb2dsZXRhZyJ9KTtjb25zdCBpbml0QW1hem9uQWRCaWRzPSh0LCQpPT57KCQmJiJ0Y2xvYWRlZCI9PT10LmV2ZW50U3RhdHVzfHwidXNlcmFjdGlvbmNvbXBsZXRlIj09PXQuZXZlbnRTdGF0dXMpJiZhcHN0YWcuZmV0Y2hCaWRzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90czpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIixzbG90TmFtZToiNTg3NzgxNjQvRGVza3RvcC1CaWxsYm9hcmQtMSIsc2l6ZXM6W1s5NjAsOTBdLFs5NzAsMjUwXSxbOTUwLDkwXSxbNzI4LDkwXSxbOTcwLDkwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLU1lZGl1bVJlY3RhbmdsZS0xIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLVNreXNjcmFwZXItMSIsc2l6ZXM6W1sxNjAsNjAwXSxbMzM2LDI4MF0sWzMwMCwyNTBdLFszMDAsNjAwXSxbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLHNpemVzOltbMzM2LDI4MF0sWzMwMCwyNTBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0yIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxbMTYwLDYwMF0sWzMwMCw2MDBdLCBbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtQmlsbGJvYXJkLTIiLHNpemVzOltbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQyODkyOTYtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1NZWRpdW1SZWN0YW5nbGUtMSIsc2l6ZXM6W1szMDAsMTAwXSxbMzAwLDI1MF0sXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTY3OTM0MTQ2ODE5My0wIixzbG90TmFtZToiNTg3NzgxNjQvTW9iaWxlLU1lZGl1bVJlY3RhbmdsZS0yIixzaXplczpbWzMwMCwgMjUwXSwgWzMyMCwgNTBdLCBbMjUwLCAyNTBdLCBbMzAwLCAxMDBdLCBbMzM2LCAyODBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQzNjkyOTQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1IYWxmcGFnZS0xIixzaXplczpbWzMwMCw2MDBdLFszMDAsMjUwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTM0NDMyODI5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9Nb2JpbGUtU3RpY2t5IixzaXplczpbWzMwMCw1MF0sWzMyMCw1MF0sXX0sXSx0aW1lb3V0OjJlM30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpe2dvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpe2Fwc3RhZy5zZXREaXNwbGF5QmlkcygpLGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCl9KX0pfTsiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7PC9zY3JpcHQ+"></tm-consent><tm-consent type="googleadvertising" no-checkbox embed="PHNjcmlwdCAgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg=="></tm-consent>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/aa69c6e9c51f1e811847082c63633956/gridview/jquery.yiigridview.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-menu.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/vendors.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmsi.akamaized.net/js/svelte-components/consent/bundle.js"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-skyscraper.min.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
	var loginUrl='/profil/login';
	var onlyDE = '';
	var onlyMobile = '';
	var onlyTablet = '';
	var getUserID = '';

    function sendIvwData(typ) {
        if(typ == 'tabelle') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_t",
"co":""
}

        }else if(typ == 'reiter') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_r",
"co":""
}

        }else if(typ == 'forum') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_forum",
"co":""
}

        }else {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_s",
"co":""
}

        }
        if(typeof IOMm === 'function') {
            IOMm('pageview', { cp: iam_data.cp, co: iam_data.co });
        }
    }
jQuery(function($) {
jQuery('#yw1').yiiGridView({'ajaxUpdate':['yw1'],'ajaxVar':'ajax','pagerClass':'pager','loadingClass':'grid\x2Dview\x2Dloading','filterClass':'filters','tableClass':'items','selectableRows':1,'enableHistory':false,'updateSelector':'\x7Bpage\x7D,\x20\x7Bsort\x7D','filterSelector':'\x7Bfilter\x7D','afterAjaxUpdate':function() {window.LazyLoadInstance.update(); tmTrackingAndAds(); trackLinks(); document.dispatchEvent(new CustomEvent("tmInitTooltip"));}});
});
/*]]>*/
</script>
</body>

</html>
  recorded_at: Sun, 31 Dec 2023 14:51:43 GMT
recorded_with: VCR 6.2.0
