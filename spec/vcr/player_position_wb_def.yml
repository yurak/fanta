---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/167491/plus/0?saison=2023
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 14:58:43 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web09
      Set-Cookie:
      - TMSESSID=52104e0f43412fdf793868e14f2705c1; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 3b94d7a16ccc58f1a6ce634d854f014e.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - "-dJUT0oR8Tt14VW7E5jNAzMcr-ZphYr65YYnMNgXTzx1AjBksP27pQ=="
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">

<head>
    
<script type="text/javascript" data-description="sourcepoint stub code">
    !function () { var e = function () { var e, t = "__tcfapiLocator", a = [], n = window; for (; n;) { try { if (n.frames[t]) { e = n; break } } catch (e) { } if (n === window.top) break; n = n.parent } e || (!function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var i = a.createElement("iframe"); i.style.cssText = "display:none", i.name = t, a.body.appendChild(i) } else setTimeout(e, 5); return !r }(), n.__tcfapi = function () { for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++)n[r] = arguments[r]; if (!n.length) return a; if ("setGdprApplies" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && "boolean" == typeof n[3] && (e = n[3], "function" == typeof n[2] && n[2]("set", !0)); else if ("ping" === n[0]) { var i = { gdprApplies: e, cmpLoaded: !1, cmpStatus: "stub" }; "function" == typeof n[2] && n[2](i) } else a.push(n) }, n.addEventListener("message", (function (e) { var t = "string" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data } catch (e) { } var n = a.__tcfapiCall; n && window.__tcfapi(n.command, n.version, (function (a, r) { var i = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId } }; t && (i = JSON.stringify(i)), e.source.postMessage(i, "*") }), n.parameter) }), !1)) }; "undefined" != typeof module ? module.exports = e : e() }();
</script>
<script data-description="sourcepoint configuration">
window._sp_ = {
    config: {"accountId":1254,"propertyId":7427,"gdpr":{"consentLanguage":"en","targetingParams":{"acps":"false"}},"baseEndpoint":"https://cdn.privacy-mgmt.com","isSPA":true,"cpPropertyId":"7a84b340"}}
</script>
<script src="https://cdn.privacy-mgmt.com/wrapperMessagingWithoutDetection.js" async></script>

<script type="text/javascript" data-description="contentpass integration">
    (function() {
        var cpBaseUrl = 'https://cp.transfermarkt.com';
        var cpController = cpBaseUrl + '/now.js';
        var cpPropertyId = '7a84b340';

        !function(C,o,n,t,P,a,s){C['CPObject']=n;C[n]||(C[n]=function(){
        (C[n].q=C[n].q||[]).push(arguments)});C[n].l=+new Date;a=o.createElement(t);
        s=o.getElementsByTagName(t)[0];a.src=P;s.parentNode.insertBefore(a,s)}
        (window,document,'cp','script',cpController);

        !function(C,o,n,t,P){if(!C[n].patched){cp('extension','authenticate');P=C[n].q.push;
        C[n].q.push=function(a){if(a[0]==='authenticate'){if((o['cookie']||'').indexOf('_cpauthhint=')===-1&&
        !(C['localStorage']||{})['_cpuser']&&C.location.href.toLowerCase().indexOf('cpauthenticated')===-1){
        t={isLoggedIn:function(){return false;},hasValidSubscription:function(){return false;}};
        (typeof a[1]==='function'&&a[1](null,t));C[n].afp=true;P.apply(C[n].q,[['authenticate',null]]);
        return t;}}P.apply(C[n].q,[a]);}}}
        (window,document,'cp',false);

        cp('create', cpPropertyId, {
        baseUrl: cpBaseUrl
        });

        cp('render', {
        onFullConsent: function() {
            console.log('[DEMO] onFullConsent');
        }
        })
    })()
</script>

<script type="text/javascript" data-description="contentpass sourcepoint fast path">
(function () {
    cp('authenticate', function(err, user) {
        if (err || (!user.isLoggedIn() && !user.hasValidSubscription())) {
        console.log('[SPCP] Taking fast path');
        (function spExecMsg() {
            if (window._sp_ && window._sp_.executeMessaging) {
            if (!window._sp_.config.isSPA) {
                console.warn('[SPCP] Sourcepoint not in SPA mode!');
            } else if (window._sp_.version) {
                console.log('[SPCP] Sourcepoint already running');
            } else {
                console.log('[SPCP] Starting Sourcepoint');
                window._sp_.executeMessaging();
            }
            } else {
            console.log('[SPCP] Sourcepoint not loaded yet. Retrying.');
            setTimeout(spExecMsg, 10);
            }
        })();
        }
    });
    })();
</script>
    <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" sizes="16x16" href="/favicon-16x16.png">
    <link rel="shortcut icon" sizes="192x192" href="/android-chrome-192x192.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=no" />
<meta name="robots" content="noindex, nofollow" />
<meta name="keywords" content="Stefano Sabelli,Genua CFC,Serie A,Italy" />
<meta name="description" content="Player stats of Stefano Sabelli (Genua CFC) ➤ Goals ➤ Assists ➤ Matches played ➤ All performance data" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://img.a.transfermarkt.technology/portrait/big/167491-1595930293.jpg?lm=1" />
<meta property="og:description" content="" />
<meta property="og:title" content="Stefano Sabelli - Stats 23/24" />
<meta property="og:url" content="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/167491/plus/0?saison=2023" />
<link hreflang="de" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="de-LU" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="de-AT" rel="alternate" href="https://www.transfermarkt.at/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="de-CH" rel="alternate" href="https://www.transfermarkt.ch/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="tr" rel="alternate" href="https://www.transfermarkt.com.tr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="it-CH" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="it" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="pl" rel="alternate" href="https://www.transfermarkt.pl/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="en-GB" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="en-IE" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-ES" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-CL" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-VE" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-EC" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-CU" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="nl" rel="alternate" href="https://www.transfermarkt.nl/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="pt" rel="alternate" href="https://www.transfermarkt.pt/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="ru" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="world" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="fr-CH" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="fr" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="fr-CA" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="fr-CI" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="fr-LU" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="fr-BE" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="pt-BR" rel="alternate" href="https://www.transfermarkt.com.br/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="en-US" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="en-CA" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="en-IN" rel="alternate" href="https://www.transfermarkt.co.in/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="en-ZA" rel="alternate" href="https://www.transfermarkt.co.za/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="x-default" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="en" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="nl-BE" rel="alternate" href="https://www.transfermarkt.be/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="ro" rel="alternate" href="https://www.transfermarkt.ro/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="el-GR" rel="alternate" href="https://www.transfermarkt.gr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="ko-KR" rel="alternate" href="https://www.transfermarkt.co.kr/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-AR" rel="alternate" href="https://www.transfermarkt.com.ar/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-MX" rel="alternate" href="https://www.transfermarkt.mx/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-CO" rel="alternate" href="https://www.transfermarkt.co/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="es-PE" rel="alternate" href="https://www.transfermarkt.pe/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="ms" rel="alternate" href="https://www.transfermarkt.my/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="ja" rel="alternate" href="https://www.transfermarkt.jp/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link hreflang="id" rel="alternate" href="https://www.transfermarkt.co.id/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/menue.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-main.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main_desktop.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/print.css?_sn=1?lm=1703164027" media="print" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/chosen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-player-profile.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/gespieltePositionen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/statistiken.css?lm=1703164027" />
<script type="text/javascript" src="https://tmssl.akamaized.net/js/vendor/jquery.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/b7c5571cf8957553f95f6d9069eaed67/jquery.ba-bbq.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.ajaxaddition.jquery.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/functions.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main_desktop.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.jquery.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
console.info("%c [TM-ADs] Initialize Ads on domain com (wettbewerbe_profile_spieler | spieler/leistungsdaten)", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle1 (div-gpt-ad-1621526463511-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle2 (div-gpt-ad-1621528018930-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraper (div-gpt-ad-1621527521939-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraperbtf (div-gpt-ad-1621528123398-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render billboard (div-gpt-ad-1621524903956-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render fullsize_contentad (div-gpt-ad-1621528173524-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] No ad configuration found for richmedia", "background: #222; color: #bada55")
    var oddsServe = function(placement,competition,match,node) {
        if (!node){
            var s=document.readyState==='loading'?document.getElementsByTagName('script'):[];
            node=s.length?s[s.length-1].parentNode:null;
        }
        oddsServe.queue.push({contentUnitId:placement,competition:competition,match:match,node:node});
    }
    
    oddsServe.onInit=function(callbacks){
        if (typeof window.__tcfapi === 'function') {
            __tcfapi('addEventListener', 2, function(tcdata, success) {
                let tcf20compatibleString;
                if(success) {
                    if (tcdata.eventStatus === 'useractioncomplete') {
                        tcf20compatibleString = tcdata.tcString;
                    } else if (tcdata.eventStatus === 'tcloaded') {
                        tcf20compatibleString = tcdata.tcString;
                    }
                    callbacks.setGdprOptions({
                        gdpr:1,
                        gdpr_pd:1,
                        gdpr_consent:tcf20compatibleString,
                    });
                }
            });
        } else {
            console.warn('E2: __tcfapi not found');
        }
    };
    oddsServe.options={gdpr_wait:true};
    oddsServe.queue=[];
console.info("%c [TM-ADs] Add initScript for slots: rectangle1 | rectangle2 | skyscraper | skyscraperbtf | billboard | fullsize_contentad", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Register slots with JS vendor lib", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render ad slots js for google", "background: #222; color: #bada55")
PWT = {};
window.googletag = window.googletag || {cmd: []};
googletag.cmd.push(() => {
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-1",
    [[960,90],[970,250],[950,90],[728,90],[970,90]],
    "div-gpt-ad-1621524903956-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-1",
    [[300,250],[336,280]],
    "div-gpt-ad-1621526463511-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-2",
    [[300,250],[336,280]],
    "div-gpt-ad-1621528018930-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-1",
    [[160,600],[336,280],[300,250],[300,600],[120, 600]],
    "div-gpt-ad-1621527521939-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-2",
    [[300,250],[336,280],[160,600],[300,600],[120, 600]],
    "div-gpt-ad-1621528123398-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-2",
    [[950,90],[970,250],[728,90],[970,90],[960,90],[300, 250]],
    "div-gpt-ad-1621528173524-0"
  ) 
.addService(googletag.pubads());
  googletag.pubads().enableLazyLoad({
    fetchMarginPercent: 500,
    renderMarginPercent: 200,
    mobileScaling: 2.0
  });
  googletag.pubads().setCentering(true);
  googletag.pubads().disableInitialLoad();
  googletag.pubads().enableSingleRequest();
  googletag.pubads().setTargeting("cg1", ["spieler"]);
  googletag.pubads().setTargeting("URL", "www.transfermarkt.com");
  googletag.enableServices();
});

console.info("%c [TM-ADs] Added external ad script(s) for vendor google", "background: #222; color: #bada55")
/*]]>*/
</script>
<title>Stefano Sabelli - Stats 23/24 | Transfermarkt</title>
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-152x152.png">
            <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/manager/base/es6/bundle.js" as="script" id="IOMmBundle">
        <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js" as="script">
        <script type="text/javascript" src="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js"></script>
    
<script type="text/javascript">
   tmData = {
       loggedIn : "0",
       tmTraffic: "0",
   };
</script>
<script>// Set to the same value as the web property used on the site
		var gaProperty = 'UA-3816204-13';

		// Disable tracking if the opt-out cookie exists.
		var disableStr = 'ga-disable-' + gaProperty;
		if (document.cookie.indexOf(disableStr + '=true') > -1) {
			window[disableStr] = true;
		}

		// Opt-out function
		function gaOptout() {
			document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
			window[disableStr] = true;
		}</script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag() { dataLayer.push(arguments); } 
   gtag('set', 'linker', { 'domains': [/^transfermarkt\.(com|de|nl|it|at|ch|es|fr|com\.tr|pt|tv|pl|co\.uk)$/]});
   gtag('js', new Date()); 
   gtag('set',
  {
    'custom_map': {
                    'dimension1': 'loggedIn',
                    'dimension2': 'tmTraffic'
                }
  });
        gtag('config', 'UA-3816204-13', {
                'anonymize_ip': true,
                'transport_type': 'beacon',
                'content_group1': 'statistik',
                'content_group2': 'spieler',
                'content_group3': 'leistungsdaten',
                'content_group4': '167491',
                'loggedIn': tmData.loggedIn,
                'tmTraffic': tmData.tmTraffic
            }); 
   function tmEvent(category, action, label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event',
                    action,
                    {
                        'event_category': category,
                        'event_label': label
                    }
                );
            }

            function tmTiming(value, name, event_category, event_label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event', 'timing_complete', {
                    name,
                    value,
                    event_category,
                    event_label
                });
            }
            
	</script>    <script type="text/javascript" src="https://tmssl.akamaized.net//ads/ads.js"></script>
    <script type="text/javascript">
        window.tmGaId = "UA-3816204-13";
    </script>

            <link rel="canonical" href="https://www.transfermarkt.com/stefano-sabelli/leistungsdaten/spieler/167491">
    <!-- no Tisoomi -->
    </head>

<body class="" itemscope itemtype="http://schema.org/WebPage" data-tm-tld="com" data-cmp-layer-id="910164">
    
                <tm-language-hint></tm-language-hint>
        <div id="main">
                <div class="werbung-skyscraper-container">
            <div class="werbung werbung-skyscraper">
  <div id="div-gpt-ad-1621527521939-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621527521939-0"); });</script>
  </div>
</div>
        </div>

        <div class="werbung-skyscraperbtf-container">
            <div class="werbung werbung-skyscraperbtf">
  <div id="div-gpt-ad-1621528123398-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528123398-0"); });</script>
  </div>
</div>
        </div>
        
        <header class="tm-header">
                            <div class="tm-header__box ">
                                            <a href="/">
                            <img class="icon-logo" src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" height="62" width="156" title="Transfermarkt" alt="Transfermarkt">
                        </a>
                                                                <tm-domainswitcher open-list="false" tld="com"></tm-domainswitcher>
                                            <div class="tm-header__social-box">
                        <a href="https://www.facebook.com/Transfermarkt.global" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Facebook');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/fb_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://twitter.com/TMuk_news" target="_blank" class="header__social-link header__social-link--twitter" onclick="tmEvent('SM-Icons_Header','click','Twitter');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/twitter.svg" width="20" height="20" class="header__icon header__icon--twitter">
                </a>
                <a href="http://instagram.com/transfermarkt_official" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Instagram');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/instagram_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="/intern/rssguide" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','RSS');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/rss_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://www.tiktok.com/@transfermarkt" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Tiktok');
">
                    <img src="https://tmsi.akamaized.net/icons/tiktokRebrush.svg" width="20" height="20" class="header__icon">
                </a>
                    </div>
                            <div class="tm-header__input-wrapper " id="schnellsuche-platz">
                            <form name="schnellsuche" id="schnellsuche" class="tm-header__form" action="/schnellsuche/ergebnis/schnellsuche">
                                <input type="text" name="query" class="tm-header__input--search-field" onClick="" placeholder="Enter your search term" autocorrect="off" spellcheck="false" value="" />
                                <input type="submit" value="" class="tm-header__input--search-send" alt="search" />
                            </form>
                            <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="tm-header__search-detail">
                                <img src="https://tmsi.akamaized.net/icons/search_icon_plus_blue_white.svg" alt="search" class="tm-header__icon-detail-search" height="26" width="26">
                            </a>
                        </div>
                                    </div>
            
            <nav class="main-navbar navihalter">
                                                                        <ul class="main-navbar__container megamenu_dark_bar megamenu_dark" itemscope="itemscope" itemtype="http://www.schema.org/SiteNavigationElement">
                    <a href="/" class="sticky-logo hide-for-small">
                <span title="Transfermarkt" class="tm_svg"></span>
            </a>
            
    <li class="main-navbar__list" data-nav-group="news">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('News','click','menu');
"
            >
            News        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="transfers">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Transfers & Gerüchte','click','menu');
"
            >
            Transfers & rumours        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="marktwerte">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Marktwerte','click','menu');
"
            >
            Market values        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list aktiv" data-nav-group="wettbewerbe">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Wettbewerbe','click','menu');
"
            >
            Competitions        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="foren">
                <a
            class="main-navbar__list-title tm-main-nav-el"
            href="/uebersicht/index/forum/com"
            onClick="tmEvent('Foren','click','menu');
"
            >
            Forums                    </a>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="meintm">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('MeinTM','click','menu');
"
            >
            My TM        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" >
                <a
            class="main-navbar__list-title tm-main-nav-el live-navilink"
            href="/ticker/index/live"
            onClick="tmEvent('Live','click','menu');
"
            >
            Live                            <tm-live-match-counter auto-request="true" content='["Live maches", "Live matches"]'></tm-live-match-counter>
                    </a>
            </li>
</ul>

                
                <form name="schnellsuche" id="schnellsuche-sticky" class="noclose sticky-suche" action="/schnellsuche/ergebnis/schnellsuche">
                    <input type="text" name="query" class="header-suche" onClick="" placeholder="Enter your search term" />
                    <input type="image" class="header-suche-abschicken" src="https://tmssl.akamaized.net//images/suchicon.png" alt="search" />
                </form>
                <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="header-suche-detailsuche">
                    <span class="icon-detailsuche"></span>
                </a>
                                    <a id="arrow-up-xy" href="#">
                        <svg style="fill: white; width: 20px; height: 20px;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                            <g>
                                <path d="M78.016,49.132L51.961,12.714c-0.471-0.66-1.233-1.049-2.043-1.051c-0.006,0-0.006,0-0.006,0
                                c-0.815,0.002-1.575,0.396-2.048,1.059L21.977,49.14c-0.546,0.767-0.616,1.776-0.183,2.612c0.426,0.835,1.292,1.361,2.236,1.361
                                h12.183l-0.001,32.709c0,1.39,1.125,2.515,2.516,2.515l22.541-0.001c1.389,0.001,2.515-1.124,2.516-2.517l0-32.705h12.187
                                c0.94,0,1.803-0.53,2.237-1.367C78.641,50.911,78.566,49.9,78.016,49.132z" />
                            </g>
                        </svg>
                    </a>
                <div class="tm-login " id="login" onClick="tmEvent('login','click','sign_in_button');
">
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     fill="#FFF" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="tm-login__image">
        <g>
            <path d="M80.161,60.441l-15.66-7.47l-6.622-3.159c2.892-1.822,5.241-4.634,6.778-8.022c1.22-2.69,1.946-5.734,1.946-8.99
                c0-1.827-0.29-3.562-0.694-5.236C63.94,19.453,57.605,13.477,50,13.477c-7.461,0-13.701,5.763-15.792,13.645
                c-0.482,1.808-0.815,3.688-0.815,5.68c0,3.459,0.808,6.684,2.181,9.489c1.587,3.254,3.94,5.937,6.804,7.662l-6.342,2.953
                l-16.168,7.53c-1.404,0.658-2.327,2.242-2.327,4.011v15.062v2.703c0,2.381,1.659,4.312,3.708,4.312h57.505
                c2.048,0,3.708-1.93,3.708-4.312v-2.703V64.446C82.46,62.683,81.552,61.114,80.161,60.441z"/>
        </g>
    </svg>
    <span class="tm-login__cta">
        Log in    </span>
</div>
            </nav>

            
            <div class="quick-select-wrapper">
    <div id="quickselect-skeleton" class="ssc" style="height: 40px;">
        <div class="ssc-wrapper flex" style="height: 100%; padding: 0">
            <div class="ssc-square quickselect-element" style="width: 40px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 171.06px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 170.84px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 138.03px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 141.5px;"></div>
        </div>
    </div>

    <tm-quick-select-bar
        default-country="75"
        default-competition="IT1"
        default-club="252"
        default-player="167491"
        dropdown-visible=""
        translations='{&quot;home&quot;:&quot;Home&quot;,&quot;country&quot;:&quot;Country&quot;,&quot;competition&quot;:&quot;Competition&quot;,&quot;club&quot;:&quot;Club&quot;,&quot;player&quot;:&quot;Player&quot;,&quot;attack&quot;:&quot;Striker&quot;,&quot;midfield&quot;:&quot;Mittelfeld&quot;,&quot;defense&quot;:&quot;Defender&quot;,&quot;goalkeeper&quot;:&quot;Goalkeeper&quot;}'
        >
    </tm-quick-select-bar>
</div>


            <div class="werbung werbung-billboard">
  <div id="div-gpt-ad-1621524903956-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621524903956-0"); });</script>
  </div>
</div>
        </header>
        <main>

            
            
    <div id="modal-1" class="modal micromodal-slide" aria-hidden="true" tabindex="1">
        <div class="modal__overlay" tabindex="-1" data-custom-close>
            <div
                class="modal__container"
                role="dialog"
                aria-modal="true"
                aria-labelledby="modal-1-title"
                data-custom-close
                >
                <header class="modal__header">
                    <button
                        class="modal__close modal__close--profile-img"
                        aria-label="Close modal"
                        data-custom-close
                        >
                    </button>
                </header>
                <div id="modal-1-content" class="modal__content">
                                        <img src='https://img.a.transfermarkt.technology/portrait/big/167491-1595930293.jpg?lm=1' alt='Stefano Sabelli' title='Stefano Sabelli' data-custom-close loading="lazy">
                </div>
            </div>
        </div>
    </div>


<header class="data-header" itemscope itemtype="https://schema.org/Person">
                    <div class="data-header__headline-container">
            <h1 class="data-header__headline-wrapper">
                                    <span class="data-header__shirt-number">
                        #20                    </span>
                                Stefano <strong>Sabelli</strong>            </h1>
                                </div>
                    <div class="data-header__badge-container">
                                                    <a href="/stefano-sabelli/erfolge/spieler/167491" title="Italienischer Zweitligameister" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/436.png?lm=1651745299" title="Italienischer Zweitligameister" alt="Italienischer Zweitligameister" class="" />                                                <span class="data-header__success-number">2</span>
                    </a>
                                    <a href="/stefano-sabelli/erfolge/spieler/167491" title="Italian Youth champion (Primavera)" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/365.png?lm=1461847499" title="Italian Youth champion (Primavera)" alt="Italian Youth champion (Primavera)" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/stefano-sabelli/erfolge/spieler/167491" title="Coppa Italia Primavera winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/276.png?lm=1461847499" title="Coppa Italia Primavera winner" alt="Coppa Italia Primavera winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                            </div>
        
                    <div class="data-header__box--big">
                                    <a href="/genoa-cfc/startseite/verein/252" class="data-header__box__club-link">
                                            <img srcset="
                            https://tmssl.akamaized.net/images/wappen/normquad/252.png?lm=1655305880 1x,
                            https://tmssl.akamaized.net/images/wappen/homepageWappen150x150/252.png?lm=1655305880 2x
                            " alt="Genoa CFC" height="100" width="100" />
                                        </a>
                                <div class="data-header__club-info">
                    <span class="data-header__club" itemprop="affiliation">
                        <a title="Genoa CFC" href="/genua-cfc/startseite/verein/252">Genoa</a>                    </span><br />                    
                                                                            <span class="data-header__league">
                                    <a class="data-header__league-link" href="/serie-a/startseite/wettbewerb/IT1">
                                        <img src="https://tmssl.akamaized.net/images/logo/verytiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" />Serie A                                    </a>
                                </span>
                                                                            <span class="data-header__label">League level:
                                <span class="data-header__content">
                                    <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />First Tier                                </span>
                            </span>
                                                                                                        <span class="data-header__label">Joined: <span class="data-header__content">Jul 20, 2021</span></span>
                            <span class="data-header__label">Contract expires: <span class="data-header__content">Jun 30, 2025</span></span>
                                                            </div>
            </div>
        
        <div class="data-header__profile-container">
                            <div class="modal-trigger" data-custom-open="modal-1" id="fotoauswahlOeffnen" style="cursor:pointer" onclick="tmEvent('spielerprofil','click','profilbild');">
            
                                <img src="https://img.a.transfermarkt.technology/portrait/header/167491-1595930293.jpg?lm=1" title="Stefano Sabelli" alt="Stefano Sabelli" class="data-header__profile-image" height="181" width="139" /><div class="bildquelle"><span title="imago images">imago images</span></div>
                                    <span class="modal-trigger-icon">+</span>
                </div>
                        </div>
        <div class="data-header__info-box ">
            <div class="data-header__details">
                <ul class="data-header__items">
                                            <li class="data-header__label">Date of birth/Age:
                            <span itemprop="birthDate" class="data-header__content">
                                Jan 13, 1993 (30)                            </span>
                        </li>

                                                    <li class="data-header__label">Place of birth:
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                <span class="data-header__content" itemprop="birthPlace">
                                    Roma                                </span>
                            </li>
                        
                                            <li class="data-header__label">Citizenship:
                            <span itemprop="nationality" class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                Italy                            </span>
                        </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li class="data-header__label">Height:
                            <span itemprop="height" class="data-header__content">
                                1,76 m                            </span>
                        </li>
                    
                    <li class="data-header__label">Position:
                        <span class="data-header__content">
                            Right-Back                        </span>
                    </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li for="" class="data-header__label">
                                                            Former International:
                                                        <span class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen flagge" /><a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>                            </span>
                        </li>
                                                    <li class="data-header__label">Caps/Goals:
                                <a class="data-header__content data-header__content--highlight" href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947">10                                </a>/
                                <a class="data-header__content data-header__content--highlight" href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947">0                                </a>
                            </li>
                                    </ul>
            </div>
        </div>
        
    
            <div class="data-header__box--small">
                <a href="/stefano-sabelli/marktwertverlauf/spieler/167491" class="data-header__market-value-wrapper"><span class="waehrung">€</span>1.50<span class="waehrung">m</span>                <p class="data-header__last-update">Last update: Dec 20, 2023</p></a>
            </div>

            
    </header>
    <div class="row hide-on-print" id="subnavi" data-season="" data-controller="spieler" data-action="leistungsdaten" data-path="player-path/leistungsdaten/spieler/167491/plus/0" data-id="167491">
        <div class="page_wrapper subnavi">
            <div class="large-12 columns">
                <div class="subnavi_box" id="subnavigation">
                    <div class="submenu-text show-for-small">
                        <a name="SubNavi" title="Navigation">
                            <span>≡ Sub navigation</span>
                        </a>
                    </div>
                    <nav>
                        <ul id="submenu">
                                                <li id="close_submenu" class="show-for-small">
                            <div id="submenu-icon">
                                <span class="clicked"></span>
                                <span class="clicked"></span>
                            </div>
                            <a>Close subnavigation</a>
                        </li>
                                                    <li id="profile" class="first-button  " data-nav-group="profile">
                                <a name="SubNavi" href="/stefano-sabelli/profil/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','profil');
">Profile</a>
                                                            </li>
                                                        <li id="stats" class="  " data-nav-group="stats">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','leistungsdaten');
">Stats</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="market-values" class="  " data-nav-group="market-values">
                                <a name="SubNavi" href="/stefano-sabelli/marktwertverlauf/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','marktwert');
">Market values</a>
                                                            </li>
                                                        <li id="transfers" class="  " data-nav-group="transfers">
                                <a name="SubNavi" href="/stefano-sabelli/transfers/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','transfers');
">Transfers</a>
                                                            </li>
                                                        <li id="rumors" class="  " data-nav-group="rumors">
                                <a name="SubNavi" href="/stefano-sabelli/geruechte/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','geruchte');
">Rumors</a>
                                                            </li>
                                                        <li id="national-team" class="  " data-nav-group="national-team">
                                <a name="SubNavi" href="/stefano-sabelli/nationalmannschaft/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','nationalmannschaft');
">National team</a>
                                                            </li>
                                                        <li id="news" class="  " data-nav-group="news">
                                <a name="SubNavi" href="/stefano-sabelli/news/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','news');
">News</a>
                                                            </li>
                                                        <li id="achievements" class="  " data-nav-group="achievements">
                                <a name="SubNavi" href="/stefano-sabelli/erfolge/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','erfolge');
">Achievements</a>
                                                            </li>
                                                        <li id="career" class="  " data-nav-group="career">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','karriere');
">Career</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="subnavi-edit" class="  subnavi-edit" data-nav-group="subnavi-edit">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','edit');
"></a>
                                <div class="dropdown_fullwidth gasthinweis" title="Log in or register now"><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                    </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <script>
        var stickySubTop = $('#subnavigation').offset().top;
        stickySubTop = stickySubTop - 60;
        var main = $("#main");
        $(document).ready(function() {
            $(window).on('scroll load', function() {
                if (!main.hasClass("stickySubnavigation")) {
                    stickySubTop = $('#subnavigation').offset().top;
                }
                if ($(window).scrollTop() > stickySubTop) {
                    main.addClass("stickySubnavigation");
                } else {
                    main.removeClass("stickySubnavigation");
                }
            });
        });
    </script>
    <style>
        .forum-anchor {
            margin-top: -80px;
        }
    </style>

                        
<div class="row">
    <div class="large-8 columns">

        <div class="box">
            <h2 class="content-box-headline">
                Stats of Stefano Sabelli            </h2>
            <p class="info-content">
                This page contains information about a player's detailed stats. In the info box, you can filter by period, club, type of league and competition. The "Detailed stats" tab shows a player's total appearances, goals, cards and cumulative minutes of play for each competition, and indicates the season in which it occurred.            </p>
            <div class="content">
                <form action="/stefano-sabelli/leistungsdaten/spieler/167491/plus/0" method="get">                <div class="row">
                    <div class="large-12 columns">
                        <table class="auflistung">
                            <tbody>
                                <tr>
                                    <td>Filter by season:</td>
                                    <td>
                                        <div class="inline-select">
                                            <select name="saison" data-placeholder="Filter by season" class="chzn-select" tabindex="0">
                                                <option value="ges">Overall balance</option>
                                                                                                    <option  selected="selected"value="2023">23/24</option>
                                                                                                    <option value="2022">22/23</option>
                                                                                                    <option value="2021">21/22</option>
                                                                                                    <option value="2020">20/21</option>
                                                                                                    <option value="2019">19/20</option>
                                                                                                    <option value="2018">18/19</option>
                                                                                                    <option value="2017">17/18</option>
                                                                                                    <option value="2016">16/17</option>
                                                                                                    <option value="2015">15/16</option>
                                                                                                    <option value="2014">14/15</option>
                                                                                                    <option value="2013">13/14</option>
                                                                                                    <option value="2012">12/13</option>
                                                                                                    <option value="2011">11/12</option>
                                                                                                    <option value="2010">10/11</option>
                                                                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="submit" class="small button" value="Show">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                </form>            </div>
        </div>
        <div class="box">
            <h2 class="content-box-headline">
                Stats 23/24            </h2>
            
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2023#gesamt"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2023/plus/1#gesamt"><div class=""><span>Detailed</span></div></a></div>
            <div class="responsive-table">
                <div id="yw1" class="grid-view">
<div class="summary"></div>
<table class="items">
<thead>
<tr>
<th colspan="2" id="yw1_c0"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/wettbewerb">Competition</a></th><th class="hide" id="yw1_c1"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/wettbewerb">wettbewerb</a></th><th class="zentriert" id="yw1_c2"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/einsaetze.desc"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></a></th><th class="zentriert" id="yw1_c3"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/tore.desc"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></a></th><th class="zentriert" id="yw1_c4"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/vorlagen.desc"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></a></th><th class="zentriert" id="yw1_c5"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/gelbe.desc"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c6"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/gelbrote.desc"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c7"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/rote.desc"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></a></th><th class="rechts" id="yw1_c8"><a class="sort-link" href="/player-path/leistungsdaten/spieler/167491/saison/2023/plus/0/sort/einsatzzeit.desc"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></a></th></tr>
</thead>
<tfoot>
<tr>
<td colspan="2" class="rechts">Total  23/24:</td><td class="hide">&nbsp;</td><td class="zentriert">17</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">1.341'</td></tr>
</tfoot>
<tbody>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" /></td><td class="hauptlink no-border-links"><a title="Serie A" href="/serie-a/startseite/wettbewerb/IT1">Serie A</a></td><td class="zentriert player-profile-performance-data"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/wettbewerb/IT1/verein/252">16</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">1.330'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cit.png?lm=1613033113" title="Italy Cup" alt="Italy Cup" class="" /></td><td class="hauptlink no-border-links"><a title="Italy Cup" href="/coppa-italia/startseite/pokalwettbewerb/CIT">Italy Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/wettbewerb/CIT/verein/252">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">11'</td></tr>
</tbody>
</table>
<div class="keys" style="display:none" title="/player-path/leistungsdaten/spieler/167491/plus/0?saison=2023"><span>Serie A</span><span>Italy Cup</span></div>
</div>            </div>
        </div>

        <div class="box">
    <div class="table-header img-vat">
        <a name="IT1" href="/serie-a/startseite/wettbewerb/IT1/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" />Serie A        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/1">1</a>
                </td>
                                    <td class="zentriert">8/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(19.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="ACF Fiorentina" href="/ac-florenz/spielplan/verein/430/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/430.png?lm=1656660160" title="ACF Fiorentina" alt="ACF Fiorentina" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="ACF Fiorentina" href="/ac-florenz/spielplan/verein/430/saison_id/2023">Fiorentina</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103475" href="/genoa-cfc_acf-fiorentina/index/spielbericht/4103475"><span class="redtext">1:4 </span></a></td>
                                    <td colspan="8" class="zentriert"><span class="icons_sprite icon-gelbekarte-table" title="Yellow card suspension">&nbsp;</span>Yellow card suspension</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/2">2</a>
                </td>
                                    <td class="zentriert">8/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(11.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SS Lazio" href="/lazio-rom/spielplan/verein/398/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/398.png?lm=1601537785" title="SS Lazio" alt="SS Lazio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="SS Lazio" href="/lazio-rom/spielplan/verein/398/saison_id/2023">Lazio</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103487" href="/ss-lazio_genoa-cfc/index/spielbericht/4103487"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">85'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/3">3</a>
                </td>
                                    <td class="zentriert">9/3/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(15.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Torino FC" href="/fc-turin/spielplan/verein/416/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/416.png?lm=1438548174" title="Torino FC" alt="Torino FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Torino FC" href="/fc-turin/spielplan/verein/416/saison_id/2023">Torino</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103500" href="/torino-fc_genoa-cfc/index/spielbericht/4103500"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">87'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">9/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(13.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SSC Napoli" href="/ssc-neapel/spielplan/verein/6195/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6195.png?lm=1688982522" title="SSC Napoli" alt="SSC Napoli" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="SSC Napoli" href="/ssc-neapel/spielplan/verein/6195/saison_id/2023">SSC Napoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(5.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103505" href="/genoa-cfc_ssc-napoli/index/spielbericht/4103505"><span class="">2:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">74'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">9/22/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(16.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="US Lecce" href="/us-lecce/spielplan/verein/1005/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1005.png?lm=1689169528" title="US Lecce" alt="US Lecce" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="US Lecce" href="/us-lecce/spielplan/verein/1005/saison_id/2023">Lecce</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103516" href="/us-lecce_genoa-cfc/index/spielbericht/4103516"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">89'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/6">6</a>
                </td>
                                    <td class="zentriert">9/28/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(11.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12.png?lm=1701079293" title="AS Roma" alt="AS Roma" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2023">AS Roma</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103525" href="/genoa-cfc_as-roma/index/spielbericht/4103525"><span class="greentext">4:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">37'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/7">7</a>
                </td>
                                    <td class="zentriert">10/1/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(14.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Udinese Calcio" href="/udinese-calcio/spielplan/verein/410/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/410.png?lm=1688982584" title="Udinese Calcio" alt="Udinese Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Udinese Calcio" href="/udinese-calcio/spielplan/verein/410/saison_id/2023">Udinese Calcio</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103541" href="/udinese-calcio_genoa-cfc/index/spielbericht/4103541"><span class="">2:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="unknown injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>unknown injury</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/8">8</a>
                </td>
                                    <td class="zentriert">10/7/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(15.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AC Milan" href="/ac-mailand/spielplan/verein/5/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/5.png?lm=1605166627" title="AC Milan" alt="AC Milan" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AC Milan" href="/ac-mailand/spielplan/verein/5/saison_id/2023">AC Milan</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103545" href="/genoa-cfc_ac-milan/index/spielbericht/4103545"><span class="redtext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">68'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/9">9</a>
                </td>
                                    <td class="zentriert">10/22/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(15.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Atalanta BC" href="/atalanta-bergamo/spielplan/verein/800/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/800.png?lm=1438547428" title="Atalanta BC" alt="Atalanta BC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Atalanta BC" href="/atalanta-bergamo/spielplan/verein/800/saison_id/2023">Atalanta BC</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103552" href="/atalanta-bc_genoa-cfc/index/spielbericht/4103552"><span class="redtext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">87'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/10">10</a>
                </td>
                                    <td class="zentriert">10/27/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(14.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="US Salernitana 1919" href="/us-salernitana-1919/spielplan/verein/380/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/380.png?lm=1601390035" title="US Salernitana 1919" alt="US Salernitana 1919" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="US Salernitana 1919" href="/us-salernitana-1919/spielplan/verein/380/saison_id/2023">Salernitana</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103564" href="/genoa-cfc_us-salernitana-1919/index/spielbericht/4103564"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/11">11</a>
                </td>
                                    <td class="zentriert">11/5/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(14.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Cagliari Calcio" href="/cagliari-calcio/spielplan/verein/1390/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1390.png?lm=1626441409" title="Cagliari Calcio" alt="Cagliari Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Cagliari Calcio" href="/cagliari-calcio/spielplan/verein/1390/saison_id/2023">Cagliari Calcio</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103574" href="/cagliari-calcio_genoa-cfc/index/spielbericht/4103574"><span class="redtext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/12">12</a>
                </td>
                                    <td class="zentriert">11/10/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(13.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Hellas Verona" href="/hellas-verona/spielplan/verein/276/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/276.png?lm=1617228746" title="Hellas Verona" alt="Hellas Verona" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Hellas Verona" href="/hellas-verona/spielplan/verein/276/saison_id/2023">Hellas Verona</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103583" href="/genoa-cfc_hellas-verona/index/spielbericht/4103583"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/13">13</a>
                </td>
                                    <td class="zentriert">11/26/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(15.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Frosinone Calcio" href="/frosinone-calcio/spielplan/verein/8970/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/8970.png?lm=1438547543" title="Frosinone Calcio" alt="Frosinone Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Frosinone Calcio" href="/frosinone-calcio/spielplan/verein/8970/saison_id/2023">Frosinone</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103596" href="/frosinone-calcio_genoa-cfc/index/spielbericht/4103596"><span class="redtext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">29'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/14">14</a>
                </td>
                                    <td class="zentriert">12/2/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(14.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="FC Empoli" href="/fc-empoli/spielplan/verein/749/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/749.png?lm=1626441481" title="FC Empoli" alt="FC Empoli" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="FC Empoli" href="/fc-empoli/spielplan/verein/749/saison_id/2023">FC Empoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103603" href="/genoa-cfc_fc-empoli/index/spielbericht/4103603"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">83'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/15">15</a>
                </td>
                                    <td class="zentriert">12/10/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(14.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AC Monza" href="/ac-monza/spielplan/verein/2919/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2919.png?lm=1562072734" title="AC Monza" alt="AC Monza" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="AC Monza" href="/ac-monza/spielplan/verein/2919/saison_id/2023">Monza</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103619" href="/ac-monza_genoa-cfc/index/spielbericht/4103619"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">88'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/16">16</a>
                </td>
                                    <td class="zentriert">12/15/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(14.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Juventus FC" href="/juventus-turin/spielplan/verein/506/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/506.png?lm=1626441487" title="Juventus FC" alt="Juventus FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Juventus FC" href="/juventus-turin/spielplan/verein/506/saison_id/2023">Juventus</a>&nbsp;&nbsp;<span class="tabellenplatz">(2.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103625" href="/genoa-cfc_juventus-fc/index/spielbericht/4103625"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">84'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/17">17</a>
                </td>
                                    <td class="zentriert">12/22/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(13.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="US Sassuolo" href="/us-sassuolo/spielplan/verein/6574/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6574.png?lm=1601389908" title="US Sassuolo" alt="US Sassuolo" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="US Sassuolo" href="/us-sassuolo/spielplan/verein/6574/saison_id/2023">Sassuolo</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103640" href="/us-sassuolo_genoa-cfc/index/spielbericht/4103640"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2023/spieltag/18">18</a>
                </td>
                                    <td class="zentriert">12/29/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(12.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46.png?lm=1618900989" title="Inter Milan" alt="Inter Milan" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2023">Inter</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4103645" href="/genoa-cfc_inter-milan/index/spielbericht/4103645"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 16,
                        Starting eleven: 16,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 1,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="CIT" href="/italy-cup/startseite/wettbewerb/CIT/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cit.png?lm=1613033113" title="Italy Cup" alt="Italy Cup" class="" />Italy Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2023/gruppe/1R">First Round</a>
                </td>
                                    <td class="zentriert">8/11/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Modena FC" href="/modena-fc-2018/spielplan/verein/1385/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1385.png?lm=1657012115" title="Modena FC" alt="Modena FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Modena FC" href="/modena-fc-2018/spielplan/verein/1385/saison_id/2023">Modena</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4137125" href="/genoa-cfc_modena-fc/index/spielbericht/4137125"><span class="greentext">4:3 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">11'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2023/gruppe/2R">Second Round</a>
                </td>
                                    <td class="zentriert">11/1/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="AC Reggiana 1919" href="/ac-reggiana-1919/spielplan/verein/5621/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/5621.png?lm=1662025461" title="AC Reggiana 1919" alt="AC Reggiana 1919" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AC Reggiana 1919" href="/ac-reggiana-1919/spielplan/verein/5621/saison_id/2023">Reggiana</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4161036" href="/genoa-cfc_ac-reggiana-1919/index/spielbericht/4161036"><span class="greentext">2:1 <span class="ergebnis_zusatz"> AET</span></span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2023/gruppe/AF">Round of 16</a>
                </td>
                                    <td class="zentriert">12/5/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="SS Lazio" href="/lazio-rom/spielplan/verein/398/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/398.png?lm=1601537785" title="SS Lazio" alt="SS Lazio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="SS Lazio" href="/lazio-rom/spielplan/verein/398/saison_id/2023">Lazio</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4221300" href="/ss-lazio_genoa-cfc/index/spielbericht/4221300"><span class="redtext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 3,
                        Starting eleven: 0,
                        Substituted in: 1,
                        On the bench: 2,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
</div>
    <div class="large-4 columns">
        <div class="werbung werbung-rectangle1">
  <div id="div-gpt-ad-1621526463511-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621526463511-0"); });</script>
  </div>
</div>
        <div class="box hide">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                                    <span class="position_5" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);box-shadow: 0px 0px 15px 9px rgba(143, 13, 16, 0.98);background-color: rgba(143, 13, 16, 0.98);font-size:12px !important" title="14.285714285714">2</span>
                                        <span class="position_8" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:22px !important" title="100">14</span>
                                </div>
        </div>
    </div>
</div>
<div class="box">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                
                    <div class="zahl-anzeige pos-box positionsbox_5" title="Right-Back">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/5">
                            <div class="text-box p-5" style="font-size:12px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                2                                <div class="zusatz-kreis">RB</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_5" title="Right-Back">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/5">
                            <div class="text-box p-5" style="font-size:12px !important;width:20px;height:20px;border-radius:10px;line-height:19px;">
                                RB                                <div class="zusatz-kreis">2</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_8" title="Right Midfield">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/8">
                            <div class="text-box p-8" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                14                                <div class="zusatz-kreis">RM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_8" title="Right Midfield">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/8">
                            <div class="text-box p-8" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                RM                                <div class="zusatz-kreis">14</div>
                            </div>
                            </a>
                        </div>
                    </div>

                                </div>
        </div>
    </div>
        <table>
        <thead>
            <tr>
                <th>Played as...</th>
                <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                        </tr>
        </thead>
        <tbody>
                        <tr>
                <td class="hauptlink"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/8">Right Midfield</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/8">14</a></td>
                                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/8">-</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/8">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/5">Right-Back</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/5">2</a></td>
                                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/5">-</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2023/pos/5">-</a></td>
                            </tr>
                        </tbody>
    </table>
</div>
        <div class="box">
    <h2 class="content-box-headline">
        Stats by club    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Club</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><a title="FC Bari 1908" href="/ssc-bari/spielplan/verein/332/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/332_1536916077.png?lm=1536916077" title="&nbsp;" alt="FC Bari 1908" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="FC Bari 1908" href="/ssc-bari/spielplan/verein/332/saison_id/2017">Bari</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/332">181</a></td>
                            <td class="zentriert">4</td>
                <td class="zentriert">13</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2018"><img src="https://tmssl.akamaized.net/images/wappen/tiny/19.png?lm=1511961167" title="Brescia Calcio" alt="Brescia Calcio" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2018">Brescia</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/19">99</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">8</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023">Genoa</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/252">58</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">6</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Roma U19" href="/as-rom-u19/spielplan/verein/11997/saison_id/2010"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11997.png?lm=1701079293" title="Roma U19" alt="Roma U19" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Roma U19" href="/as-rom-u19/spielplan/verein/11997/saison_id/2010">Roma U19</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/11997">52</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Empoli FC " href="/fc-empoli/spielplan/verein/749/saison_id/2020"><img src="https://tmssl.akamaized.net/images/wappen/tiny/749_1622183307.png?lm=1622183308" title="&nbsp;" alt="Empoli FC " class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Empoli FC " href="/fc-empoli/spielplan/verein/749/saison_id/2020">Empoli</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/749">12</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">3</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Carpi FC 1909" href="/carpi-fc-1909/spielplan/verein/4102/saison_id/2015"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4102_1631169567.png?lm=1631169567" title="&nbsp;" alt="Carpi FC 1909" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Carpi FC 1909" href="/carpi-fc-1909/spielplan/verein/4102/saison_id/2015">Carpi</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/4102">7</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Stefano Sabelli" class="content-link" href="/stefano-sabelli/leistungsdatenverein/spieler/167491">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        Performance by competition    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Competition</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it2.png?lm=1548242827" title="Serie B" alt="Serie B" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie B" href="/serie-b/startseite/wettbewerb/IT2">Serie B</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/IT2">270</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">24</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie A" href="/serie-a/startseite/wettbewerb/IT1">Serie A</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/IT1">66</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">3</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itj3.png?lm=1514453455" title="Campionato Primavera Girone C" alt="Campionato Primavera Girone C" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera C" href="/campionato-primavera-girone-c/startseite/wettbewerb/ITJ3">Primavera C</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/ITJ3/verein/11997">36</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/posb.png?lm=1548244828" title="Serie B Play-off" alt="Serie B Play-off" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie B Play-off" href="/serie-b-playoff/startseite/wettbewerb/POSB">Serie B Play-off</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/POSB">6</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itje.png?lm=1600081543" title="Campionato Primavera Fase Finale" alt="Campionato Primavera Fase Finale" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera Fase Finale" href="/campionato-primavera-finalrunde/startseite/wettbewerb/ITJE">Primavera Fase Finale</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/ITJE/verein/11997">5</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Stefano Sabelli" class="content-link" href="/stefano-sabelli/detaillierteleistungsdaten/spieler/167491">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        National team career    </h2>
    <table>
        <thead>
        <tr>
            <th class="zentriert">#</th>
            <th colspan="2" class="hide-for-small">National team</th>
            <th class="zentriert">Debut</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Matches">&nbsp;</span></th>
            <th class="zentriert"><span class="icons_sprite icon-tor-table-header"></span></th>
                    </tr>
        </thead>
        <tbody>
            <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                3
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2319493" title="UEFA European Under-21 Championship Qualifying: Italy U21 - Belgium U21 1:3">Sep 5, 2013</a>
                                </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947">10</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2579644" title="International Friendlies: Italy U20 - Türkiye U21 2:2">Sep 5, 2012</a>
                                </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21100">8</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21100/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
            <td class="zentriert">
                                    Aug 24, 2011                            </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21426">8</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21426/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/1079592" title="International Friendlies: Italy U18 - Norway U18 2:0">Feb 14, 2011</a>
                                </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21746">4</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21746/nurEinsatz/2">-</a></td>
                    </tr>
                </tbody>
    </table>
            <a title="Stefano Sabelli" class="content-link" href="/stefano-sabelli/nationalmannschaft/spieler/167491">Go to national player profile</a>    </div>
        <div class="werbung werbung-rectangle2">
  <div id="div-gpt-ad-1621528018930-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528018930-0"); });</script>
  </div>
</div>
    </div>
</div>

<script async src="/js/custom/tm-track-links.min.js" type="module"></script>
<div class="werbung werbung-fullsize_contentad">
  <div id="div-gpt-ad-1621528173524-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528173524-0"); });</script>
  </div>
</div>
        </main>

        <footer>
            <div class="tm-footer">
            <a href="/"
           class="tm-footer__logo">
          <img src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" alt="Transfermarkt" height="33" width="80"/>
        </a>
          <ul class="tm-footer__links">
    <li class="tm-footer__links-item">
      <a href="/intern/impressum">
          Legal notice      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/web/datenschutz">
          Data protection      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="javascript:void(0)" class="cmp-link">
          Privacy      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/anb">
          General conditions of use      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/tmteam">
          TM-Team      </a>
    </li>
                        <li class="tm-footer__links-item">
      <a href="/intern/faq">
          FAQ      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/fehlermelden">
          Found a mistake?      </a>
    </li>
  </ul>
</div>
        </footer>
                <div id="menue_overlay"></div>
    </div>
        <script type="text/javascript">
        var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r",
"co":""
}
    </script>
        <script type="module">
        var defaultOptions = {
            tracking: !0,
            refreshAds: !0
        };
        export var refreshAd = function() {
            var e, n;
            [ASCDP.hasOwnProperty("adS"), null === (e = ASCDP.adS) || void 0 === e ? void 0 : e.hasOwnProperty("reloadAds"), "function" == typeof(null === (n = ASCDP.adS) || void 0 === n ? void 0 : n.reloadAds)].every(function(e) {
                return e
            }) && ASCDP.adS.reloadAds()
        };
        export var TmTrackingAndAds = function(e, n) {
            void 0 === n && (n = defaultOptions);
            var r = ["tabelle", "reiter", "forum"].includes(e) ? e : "";
            n.tracking && (gtag("event", "page_view", {
                page_path: "/jsContent" + window.location.pathname
            }), sendIvwData(r)), n.refreshAds && "undefined" != typeof ASCDP && refreshAd()
        };
        window.tmTrackingAndAds = function(e, n) {
            return TmTrackingAndAds(e, n)
        };
    </script>
            <script type="text/javascript">
            const iommInterval = setInterval(() => {
                if (typeof IOMm === 'function') {
                    IOMm('configure', {
                        st: iam_data.st,
                        dn: 'data-84a0f3455d.transfermarkt.com',
                        mh: 5
                    });
                    IOMm('pageview', {
                        cp: iam_data.cp,
                        co: iam_data.co
                    });
                    clearInterval(iommInterval);
                }
            }, 250);
        </script>
    <script type="text/javascript">
	if(typeof(adet) == "boolean" && adet == false){
		img_src="/static/singlepictures/jk99hhfsdh209nbnkjldgh90sghfsdlk";
	} else {
		img_src="/static/singlepictures/jku90whjlkjbwbta1g4b8h89fh8sgh8d";
	}
	var elem = document.createElement("img");
	document.body.appendChild(elem);
	elem.src = img_src;
</script>

            <script>
            $(function() {
                var cnt = $('div.large-4.columns').length;
                if (cnt == 1) {
                    var sidebarDiv = document.querySelector('div.large-4.columns');
                    if (sidebarDiv !== null) {
                        $('#werbung_recommender_sidebar_wrapper').appendTo(sidebarDiv);
                        $('#werbung_recommender_sidebar_wrapper').show();
                    }
                }
            });
        </script>
        <div id="werbung_recommender_sidebar_wrapper" style="display: none;">
            <div 
    id="recommender_sidebar" 
    class="box"
    >
    <div class="OUTBRAIN" data-widget-id="SL_DT_SB"></div>
<tm-consent 
    no-checkbox 
    type="outbrain" 
    embed="PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jPSJhc3luYyIgc3JjPSIvL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzIj48L3NjcmlwdD4=">
</tm-consent>
</div>
        </div>
    <script type="module" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.esm.js" defer></script><script nomodule="" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.js" defer></script><tm-consent type="adition" no-checkbox embed="PHNjcmlwdCBzcmM9Imh0dHBzOi8vY3JlYXRpdmUtY2RuLm9kZHNzZXJ2ZS5jb20vbG9hZGVyLmpzP3B1Ymxpc2hlcj10bSIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4="></tm-consent><tm-consent type="googleanalytics" no-checkbox embed="PHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMzgxNjIwNC0xMyI+PC9zY3JpcHQ+"></tm-consent>
<tm-consent type="pubmatic" no-checkbox embed="PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBXVD17fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncHRSYW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBXVC5qc0xvYWRlZCA9ICgpID0+IHsgLy9QdWJNYXRpYyBwd3QuanMgb24gbG9hZCBjYWxsYmFjayBpcyB1c2VkIHRvIGxvYWQgR1BUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEdQVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkR1BUID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGdwdFJhbiBmbGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncHRSYW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B0UmFuID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWRzLnNyYyA9ICh1c2VTU0wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0L3RhZy9qcy9ncHQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbHNhZmUgdG8gY2FsbCBncHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEdQVCwgNTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9wd3QvMTYzMjI5LzEwMTAzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZlcnNpb25JZCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1cmwuaW5kZXhPZigncHd0dj0nKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IC9wd3R2PSguKj8pKCZ8JCkvZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHJlZ2V4cC5leGVjKHB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoID49IDIgJiYgbWF0Y2hlc1sxXS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVZlcnNpb25JZCA9ICcvJyttYXRjaGVzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3RhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dGFkcy5hc3luYyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3RhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd0YWRzLnNyYyA9IHVybCtwcm9maWxlVmVyc2lvbklkKycvcHd0LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHd0YWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICA="></tm-consent><tm-consent type="amazonadvertising" no-checkbox embed="PHNjcmlwdD4hZnVuY3Rpb24odCwkLGUscyxpLGEsbyl7JFt0XXx8KCRbdF09e2luaXQ6ZnVuY3Rpb24oKXtfKCJpIixhcmd1bWVudHMpfSxmZXRjaEJpZHM6ZnVuY3Rpb24oKXtfKCJmIixhcmd1bWVudHMpfSxzZXREaXNwbGF5QmlkczpmdW5jdGlvbigpe30sdGFyZ2V0aW5nS2V5czpmdW5jdGlvbigpe3JldHVybltdfSxfUTpbXX0sKGE9ZS5jcmVhdGVFbGVtZW50KHMpKS5hc3luYz0hMCxhLnNyYz1pLChvPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbykpO2Z1bmN0aW9uIF8oZSxzKXskW3RdLl9RLnB1c2goW2Usc10pfX0oImFwc3RhZyIsd2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCIvL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIpLGFwc3RhZy5pbml0KHtwdWJJRDoiNTEzNCIsYWRTZXJ2ZXI6Imdvb2dsZXRhZyJ9KTtjb25zdCBpbml0QW1hem9uQWRCaWRzPSh0LCQpPT57KCQmJiJ0Y2xvYWRlZCI9PT10LmV2ZW50U3RhdHVzfHwidXNlcmFjdGlvbmNvbXBsZXRlIj09PXQuZXZlbnRTdGF0dXMpJiZhcHN0YWcuZmV0Y2hCaWRzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90czpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIixzbG90TmFtZToiNTg3NzgxNjQvRGVza3RvcC1CaWxsYm9hcmQtMSIsc2l6ZXM6W1s5NjAsOTBdLFs5NzAsMjUwXSxbOTUwLDkwXSxbNzI4LDkwXSxbOTcwLDkwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLU1lZGl1bVJlY3RhbmdsZS0xIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLVNreXNjcmFwZXItMSIsc2l6ZXM6W1sxNjAsNjAwXSxbMzM2LDI4MF0sWzMwMCwyNTBdLFszMDAsNjAwXSxbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLHNpemVzOltbMzM2LDI4MF0sWzMwMCwyNTBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0yIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxbMTYwLDYwMF0sWzMwMCw2MDBdLCBbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtQmlsbGJvYXJkLTIiLHNpemVzOltbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQyODkyOTYtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1NZWRpdW1SZWN0YW5nbGUtMSIsc2l6ZXM6W1szMDAsMTAwXSxbMzAwLDI1MF0sXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTY3OTM0MTQ2ODE5My0wIixzbG90TmFtZToiNTg3NzgxNjQvTW9iaWxlLU1lZGl1bVJlY3RhbmdsZS0yIixzaXplczpbWzMwMCwgMjUwXSwgWzMyMCwgNTBdLCBbMjUwLCAyNTBdLCBbMzAwLCAxMDBdLCBbMzM2LCAyODBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQzNjkyOTQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1IYWxmcGFnZS0xIixzaXplczpbWzMwMCw2MDBdLFszMDAsMjUwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTM0NDMyODI5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9Nb2JpbGUtU3RpY2t5IixzaXplczpbWzMwMCw1MF0sWzMyMCw1MF0sXX0sXSx0aW1lb3V0OjJlM30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpe2dvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpe2Fwc3RhZy5zZXREaXNwbGF5QmlkcygpLGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCl9KX0pfTsiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7PC9zY3JpcHQ+"></tm-consent><tm-consent type="googleadvertising" no-checkbox embed="PHNjcmlwdCAgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg=="></tm-consent>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/aa69c6e9c51f1e811847082c63633956/gridview/jquery.yiigridview.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-menu.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/vendors.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmsi.akamaized.net/js/svelte-components/consent/bundle.js"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-skyscraper.min.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
	var loginUrl='/profil/login';
	var onlyDE = '';
	var onlyMobile = '';
	var onlyTablet = '';
	var getUserID = '';

    function sendIvwData(typ) {
        if(typ == 'tabelle') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_t",
"co":""
}

        }else if(typ == 'reiter') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_r",
"co":""
}

        }else if(typ == 'forum') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_forum",
"co":""
}

        }else {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_s",
"co":""
}

        }
        if(typeof IOMm === 'function') {
            IOMm('pageview', { cp: iam_data.cp, co: iam_data.co });
        }
    }
jQuery(function($) {
jQuery('#yw1').yiiGridView({'ajaxUpdate':['yw1'],'ajaxVar':'ajax','pagerClass':'pager','loadingClass':'grid\x2Dview\x2Dloading','filterClass':'filters','tableClass':'items','selectableRows':1,'enableHistory':false,'updateSelector':'\x7Bpage\x7D,\x20\x7Bsort\x7D','filterSelector':'\x7Bfilter\x7D','afterAjaxUpdate':function() {window.LazyLoadInstance.update(); tmTrackingAndAds(); trackLinks(); document.dispatchEvent(new CustomEvent("tmInitTooltip"));}});
});
/*]]>*/
</script>
</body>

</html>
  recorded_at: Sun, 31 Dec 2023 14:58:43 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/167491/plus/0?saison=2022
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 14:58:44 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web02
      Set-Cookie:
      - TMSESSID=9582380b6f5b047c7efe3a88952008d0; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 9ce5a2f082cd268feb50cb923d761742.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - DyTXwJAJfVYKMEAg7UIA9RfIlUmNIbeG7InoqpfZNCSoF2Fv-VHetw==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">

<head>
    
<script type="text/javascript" data-description="sourcepoint stub code">
    !function () { var e = function () { var e, t = "__tcfapiLocator", a = [], n = window; for (; n;) { try { if (n.frames[t]) { e = n; break } } catch (e) { } if (n === window.top) break; n = n.parent } e || (!function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var i = a.createElement("iframe"); i.style.cssText = "display:none", i.name = t, a.body.appendChild(i) } else setTimeout(e, 5); return !r }(), n.__tcfapi = function () { for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++)n[r] = arguments[r]; if (!n.length) return a; if ("setGdprApplies" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && "boolean" == typeof n[3] && (e = n[3], "function" == typeof n[2] && n[2]("set", !0)); else if ("ping" === n[0]) { var i = { gdprApplies: e, cmpLoaded: !1, cmpStatus: "stub" }; "function" == typeof n[2] && n[2](i) } else a.push(n) }, n.addEventListener("message", (function (e) { var t = "string" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data } catch (e) { } var n = a.__tcfapiCall; n && window.__tcfapi(n.command, n.version, (function (a, r) { var i = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId } }; t && (i = JSON.stringify(i)), e.source.postMessage(i, "*") }), n.parameter) }), !1)) }; "undefined" != typeof module ? module.exports = e : e() }();
</script>
<script data-description="sourcepoint configuration">
window._sp_ = {
    config: {"accountId":1254,"propertyId":7427,"gdpr":{"consentLanguage":"en","targetingParams":{"acps":"false"}},"baseEndpoint":"https://cdn.privacy-mgmt.com","isSPA":true,"cpPropertyId":"7a84b340"}}
</script>
<script src="https://cdn.privacy-mgmt.com/wrapperMessagingWithoutDetection.js" async></script>

<script type="text/javascript" data-description="contentpass integration">
    (function() {
        var cpBaseUrl = 'https://cp.transfermarkt.com';
        var cpController = cpBaseUrl + '/now.js';
        var cpPropertyId = '7a84b340';

        !function(C,o,n,t,P,a,s){C['CPObject']=n;C[n]||(C[n]=function(){
        (C[n].q=C[n].q||[]).push(arguments)});C[n].l=+new Date;a=o.createElement(t);
        s=o.getElementsByTagName(t)[0];a.src=P;s.parentNode.insertBefore(a,s)}
        (window,document,'cp','script',cpController);

        !function(C,o,n,t,P){if(!C[n].patched){cp('extension','authenticate');P=C[n].q.push;
        C[n].q.push=function(a){if(a[0]==='authenticate'){if((o['cookie']||'').indexOf('_cpauthhint=')===-1&&
        !(C['localStorage']||{})['_cpuser']&&C.location.href.toLowerCase().indexOf('cpauthenticated')===-1){
        t={isLoggedIn:function(){return false;},hasValidSubscription:function(){return false;}};
        (typeof a[1]==='function'&&a[1](null,t));C[n].afp=true;P.apply(C[n].q,[['authenticate',null]]);
        return t;}}P.apply(C[n].q,[a]);}}}
        (window,document,'cp',false);

        cp('create', cpPropertyId, {
        baseUrl: cpBaseUrl
        });

        cp('render', {
        onFullConsent: function() {
            console.log('[DEMO] onFullConsent');
        }
        })
    })()
</script>

<script type="text/javascript" data-description="contentpass sourcepoint fast path">
(function () {
    cp('authenticate', function(err, user) {
        if (err || (!user.isLoggedIn() && !user.hasValidSubscription())) {
        console.log('[SPCP] Taking fast path');
        (function spExecMsg() {
            if (window._sp_ && window._sp_.executeMessaging) {
            if (!window._sp_.config.isSPA) {
                console.warn('[SPCP] Sourcepoint not in SPA mode!');
            } else if (window._sp_.version) {
                console.log('[SPCP] Sourcepoint already running');
            } else {
                console.log('[SPCP] Starting Sourcepoint');
                window._sp_.executeMessaging();
            }
            } else {
            console.log('[SPCP] Sourcepoint not loaded yet. Retrying.');
            setTimeout(spExecMsg, 10);
            }
        })();
        }
    });
    })();
</script>
    <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" sizes="16x16" href="/favicon-16x16.png">
    <link rel="shortcut icon" sizes="192x192" href="/android-chrome-192x192.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=no" />
<meta name="robots" content="noindex, nofollow" />
<meta name="keywords" content="Stefano Sabelli,Genua CFC,Serie A,Italy" />
<meta name="description" content="Player stats of Stefano Sabelli (Genua CFC) ➤ Goals ➤ Assists ➤ Matches played ➤ All performance data" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://img.a.transfermarkt.technology/portrait/big/167491-1595930293.jpg?lm=1" />
<meta property="og:description" content="" />
<meta property="og:title" content="Stefano Sabelli - Stats 22/23" />
<meta property="og:url" content="https://www.transfermarkt.com/stefano-sabelli/leistungsdaten/spieler/167491/plus/0?saison=2022" />
<link hreflang="de" rel="alternate" href="https://www.transfermarkt.de/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="de-LU" rel="alternate" href="https://www.transfermarkt.de/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="de-AT" rel="alternate" href="https://www.transfermarkt.at/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="de-CH" rel="alternate" href="https://www.transfermarkt.ch/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="tr" rel="alternate" href="https://www.transfermarkt.com.tr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="it-CH" rel="alternate" href="https://www.transfermarkt.it/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="it" rel="alternate" href="https://www.transfermarkt.it/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="pl" rel="alternate" href="https://www.transfermarkt.pl/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="en-GB" rel="alternate" href="https://www.transfermarkt.co.uk/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="en-IE" rel="alternate" href="https://www.transfermarkt.co.uk/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es" rel="alternate" href="https://www.transfermarkt.es/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-ES" rel="alternate" href="https://www.transfermarkt.es/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-CL" rel="alternate" href="https://www.transfermarkt.es/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-VE" rel="alternate" href="https://www.transfermarkt.es/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-EC" rel="alternate" href="https://www.transfermarkt.es/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-CU" rel="alternate" href="https://www.transfermarkt.es/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="nl" rel="alternate" href="https://www.transfermarkt.nl/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="pt" rel="alternate" href="https://www.transfermarkt.pt/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="ru" rel="alternate" href="https://www.transfermarkt.world/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="world" rel="alternate" href="https://www.transfermarkt.world/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="fr-CH" rel="alternate" href="https://www.transfermarkt.fr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="fr" rel="alternate" href="https://www.transfermarkt.fr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="fr-CA" rel="alternate" href="https://www.transfermarkt.fr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="fr-CI" rel="alternate" href="https://www.transfermarkt.fr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="fr-LU" rel="alternate" href="https://www.transfermarkt.fr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="fr-BE" rel="alternate" href="https://www.transfermarkt.fr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="pt-BR" rel="alternate" href="https://www.transfermarkt.com.br/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="en-US" rel="alternate" href="https://www.transfermarkt.us/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="en-CA" rel="alternate" href="https://www.transfermarkt.us/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="en-IN" rel="alternate" href="https://www.transfermarkt.co.in/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="en-ZA" rel="alternate" href="https://www.transfermarkt.co.za/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="x-default" rel="alternate" href="https://www.transfermarkt.com/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="en" rel="alternate" href="https://www.transfermarkt.com/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="nl-BE" rel="alternate" href="https://www.transfermarkt.be/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="ro" rel="alternate" href="https://www.transfermarkt.ro/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="el-GR" rel="alternate" href="https://www.transfermarkt.gr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="ko-KR" rel="alternate" href="https://www.transfermarkt.co.kr/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-AR" rel="alternate" href="https://www.transfermarkt.com.ar/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-MX" rel="alternate" href="https://www.transfermarkt.mx/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-CO" rel="alternate" href="https://www.transfermarkt.co/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="es-PE" rel="alternate" href="https://www.transfermarkt.pe/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="ms" rel="alternate" href="https://www.transfermarkt.my/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="ja" rel="alternate" href="https://www.transfermarkt.jp/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link hreflang="id" rel="alternate" href="https://www.transfermarkt.co.id/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/menue.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-main.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main_desktop.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/print.css?_sn=1?lm=1703164027" media="print" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/chosen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-player-profile.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/gespieltePositionen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/statistiken.css?lm=1703164027" />
<script type="text/javascript" src="https://tmssl.akamaized.net/js/vendor/jquery.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/b7c5571cf8957553f95f6d9069eaed67/jquery.ba-bbq.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.ajaxaddition.jquery.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/functions.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main_desktop.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.jquery.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
console.info("%c [TM-ADs] Initialize Ads on domain com (wettbewerbe_profile_spieler | spieler/leistungsdaten)", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle1 (div-gpt-ad-1621526463511-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle2 (div-gpt-ad-1621528018930-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraper (div-gpt-ad-1621527521939-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraperbtf (div-gpt-ad-1621528123398-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render billboard (div-gpt-ad-1621524903956-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render fullsize_contentad (div-gpt-ad-1621528173524-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] No ad configuration found for richmedia", "background: #222; color: #bada55")
    var oddsServe = function(placement,competition,match,node) {
        if (!node){
            var s=document.readyState==='loading'?document.getElementsByTagName('script'):[];
            node=s.length?s[s.length-1].parentNode:null;
        }
        oddsServe.queue.push({contentUnitId:placement,competition:competition,match:match,node:node});
    }
    
    oddsServe.onInit=function(callbacks){
        if (typeof window.__tcfapi === 'function') {
            __tcfapi('addEventListener', 2, function(tcdata, success) {
                let tcf20compatibleString;
                if(success) {
                    if (tcdata.eventStatus === 'useractioncomplete') {
                        tcf20compatibleString = tcdata.tcString;
                    } else if (tcdata.eventStatus === 'tcloaded') {
                        tcf20compatibleString = tcdata.tcString;
                    }
                    callbacks.setGdprOptions({
                        gdpr:1,
                        gdpr_pd:1,
                        gdpr_consent:tcf20compatibleString,
                    });
                }
            });
        } else {
            console.warn('E2: __tcfapi not found');
        }
    };
    oddsServe.options={gdpr_wait:true};
    oddsServe.queue=[];
console.info("%c [TM-ADs] Add initScript for slots: rectangle1 | rectangle2 | skyscraper | skyscraperbtf | billboard | fullsize_contentad", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Register slots with JS vendor lib", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render ad slots js for google", "background: #222; color: #bada55")
PWT = {};
window.googletag = window.googletag || {cmd: []};
googletag.cmd.push(() => {
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-1",
    [[960,90],[970,250],[950,90],[728,90],[970,90]],
    "div-gpt-ad-1621524903956-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-1",
    [[300,250],[336,280]],
    "div-gpt-ad-1621526463511-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-2",
    [[300,250],[336,280]],
    "div-gpt-ad-1621528018930-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-1",
    [[160,600],[336,280],[300,250],[300,600],[120, 600]],
    "div-gpt-ad-1621527521939-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-2",
    [[300,250],[336,280],[160,600],[300,600],[120, 600]],
    "div-gpt-ad-1621528123398-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-2",
    [[950,90],[970,250],[728,90],[970,90],[960,90],[300, 250]],
    "div-gpt-ad-1621528173524-0"
  ) 
.addService(googletag.pubads());
  googletag.pubads().enableLazyLoad({
    fetchMarginPercent: 500,
    renderMarginPercent: 200,
    mobileScaling: 2.0
  });
  googletag.pubads().setCentering(true);
  googletag.pubads().disableInitialLoad();
  googletag.pubads().enableSingleRequest();
  googletag.pubads().setTargeting("cg1", ["spieler"]);
  googletag.pubads().setTargeting("URL", "www.transfermarkt.com");
  googletag.enableServices();
});

console.info("%c [TM-ADs] Added external ad script(s) for vendor google", "background: #222; color: #bada55")
/*]]>*/
</script>
<title>Stefano Sabelli - Stats 22/23 | Transfermarkt</title>
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-152x152.png">
            <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/manager/base/es6/bundle.js" as="script" id="IOMmBundle">
        <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js" as="script">
        <script type="text/javascript" src="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js"></script>
    
<script type="text/javascript">
   tmData = {
       loggedIn : "0",
       tmTraffic: "0",
   };
</script>
<script>// Set to the same value as the web property used on the site
		var gaProperty = 'UA-3816204-13';

		// Disable tracking if the opt-out cookie exists.
		var disableStr = 'ga-disable-' + gaProperty;
		if (document.cookie.indexOf(disableStr + '=true') > -1) {
			window[disableStr] = true;
		}

		// Opt-out function
		function gaOptout() {
			document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
			window[disableStr] = true;
		}</script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag() { dataLayer.push(arguments); } 
   gtag('set', 'linker', { 'domains': [/^transfermarkt\.(com|de|nl|it|at|ch|es|fr|com\.tr|pt|tv|pl|co\.uk)$/]});
   gtag('js', new Date()); 
   gtag('set',
  {
    'custom_map': {
                    'dimension1': 'loggedIn',
                    'dimension2': 'tmTraffic'
                }
  });
        gtag('config', 'UA-3816204-13', {
                'anonymize_ip': true,
                'transport_type': 'beacon',
                'content_group1': 'statistik',
                'content_group2': 'spieler',
                'content_group3': 'leistungsdaten',
                'content_group4': '167491',
                'loggedIn': tmData.loggedIn,
                'tmTraffic': tmData.tmTraffic
            }); 
   function tmEvent(category, action, label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event',
                    action,
                    {
                        'event_category': category,
                        'event_label': label
                    }
                );
            }

            function tmTiming(value, name, event_category, event_label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event', 'timing_complete', {
                    name,
                    value,
                    event_category,
                    event_label
                });
            }
            
	</script>    <script type="text/javascript" src="https://tmssl.akamaized.net//ads/ads.js"></script>
    <script type="text/javascript">
        window.tmGaId = "UA-3816204-13";
    </script>

            <link rel="canonical" href="https://www.transfermarkt.com/stefano-sabelli/leistungsdaten/spieler/167491">
    <!-- no Tisoomi -->
    </head>

<body class="" itemscope itemtype="http://schema.org/WebPage" data-tm-tld="com" data-cmp-layer-id="910164">
    
                <tm-language-hint></tm-language-hint>
        <div id="main">
                <div class="werbung-skyscraper-container">
            <div class="werbung werbung-skyscraper">
  <div id="div-gpt-ad-1621527521939-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621527521939-0"); });</script>
  </div>
</div>
        </div>

        <div class="werbung-skyscraperbtf-container">
            <div class="werbung werbung-skyscraperbtf">
  <div id="div-gpt-ad-1621528123398-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528123398-0"); });</script>
  </div>
</div>
        </div>
        
        <header class="tm-header">
                            <div class="tm-header__box ">
                                            <a href="/">
                            <img class="icon-logo" src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" height="62" width="156" title="Transfermarkt" alt="Transfermarkt">
                        </a>
                                                                <tm-domainswitcher open-list="false" tld="com"></tm-domainswitcher>
                                            <div class="tm-header__social-box">
                        <a href="https://www.facebook.com/Transfermarkt.global" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Facebook');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/fb_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://twitter.com/TMuk_news" target="_blank" class="header__social-link header__social-link--twitter" onclick="tmEvent('SM-Icons_Header','click','Twitter');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/twitter.svg" width="20" height="20" class="header__icon header__icon--twitter">
                </a>
                <a href="http://instagram.com/transfermarkt_official" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Instagram');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/instagram_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="/intern/rssguide" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','RSS');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/rss_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://www.tiktok.com/@transfermarkt" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Tiktok');
">
                    <img src="https://tmsi.akamaized.net/icons/tiktokRebrush.svg" width="20" height="20" class="header__icon">
                </a>
                    </div>
                            <div class="tm-header__input-wrapper " id="schnellsuche-platz">
                            <form name="schnellsuche" id="schnellsuche" class="tm-header__form" action="/schnellsuche/ergebnis/schnellsuche">
                                <input type="text" name="query" class="tm-header__input--search-field" onClick="" placeholder="Enter your search term" autocorrect="off" spellcheck="false" value="" />
                                <input type="submit" value="" class="tm-header__input--search-send" alt="search" />
                            </form>
                            <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="tm-header__search-detail">
                                <img src="https://tmsi.akamaized.net/icons/search_icon_plus_blue_white.svg" alt="search" class="tm-header__icon-detail-search" height="26" width="26">
                            </a>
                        </div>
                                    </div>
            
            <nav class="main-navbar navihalter">
                                                                        <ul class="main-navbar__container megamenu_dark_bar megamenu_dark" itemscope="itemscope" itemtype="http://www.schema.org/SiteNavigationElement">
                    <a href="/" class="sticky-logo hide-for-small">
                <span title="Transfermarkt" class="tm_svg"></span>
            </a>
            
    <li class="main-navbar__list" data-nav-group="news">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('News','click','menu');
"
            >
            News        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="transfers">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Transfers & Gerüchte','click','menu');
"
            >
            Transfers & rumours        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="marktwerte">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Marktwerte','click','menu');
"
            >
            Market values        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list aktiv" data-nav-group="wettbewerbe">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Wettbewerbe','click','menu');
"
            >
            Competitions        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="foren">
                <a
            class="main-navbar__list-title tm-main-nav-el"
            href="/uebersicht/index/forum/com"
            onClick="tmEvent('Foren','click','menu');
"
            >
            Forums                    </a>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="meintm">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('MeinTM','click','menu');
"
            >
            My TM        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" >
                <a
            class="main-navbar__list-title tm-main-nav-el live-navilink"
            href="/ticker/index/live"
            onClick="tmEvent('Live','click','menu');
"
            >
            Live                            <tm-live-match-counter auto-request="true" content='["Live maches", "Live matches"]'></tm-live-match-counter>
                    </a>
            </li>
</ul>

                
                <form name="schnellsuche" id="schnellsuche-sticky" class="noclose sticky-suche" action="/schnellsuche/ergebnis/schnellsuche">
                    <input type="text" name="query" class="header-suche" onClick="" placeholder="Enter your search term" />
                    <input type="image" class="header-suche-abschicken" src="https://tmssl.akamaized.net//images/suchicon.png" alt="search" />
                </form>
                <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="header-suche-detailsuche">
                    <span class="icon-detailsuche"></span>
                </a>
                                    <a id="arrow-up-xy" href="#">
                        <svg style="fill: white; width: 20px; height: 20px;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                            <g>
                                <path d="M78.016,49.132L51.961,12.714c-0.471-0.66-1.233-1.049-2.043-1.051c-0.006,0-0.006,0-0.006,0
                                c-0.815,0.002-1.575,0.396-2.048,1.059L21.977,49.14c-0.546,0.767-0.616,1.776-0.183,2.612c0.426,0.835,1.292,1.361,2.236,1.361
                                h12.183l-0.001,32.709c0,1.39,1.125,2.515,2.516,2.515l22.541-0.001c1.389,0.001,2.515-1.124,2.516-2.517l0-32.705h12.187
                                c0.94,0,1.803-0.53,2.237-1.367C78.641,50.911,78.566,49.9,78.016,49.132z" />
                            </g>
                        </svg>
                    </a>
                <div class="tm-login " id="login" onClick="tmEvent('login','click','sign_in_button');
">
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     fill="#FFF" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="tm-login__image">
        <g>
            <path d="M80.161,60.441l-15.66-7.47l-6.622-3.159c2.892-1.822,5.241-4.634,6.778-8.022c1.22-2.69,1.946-5.734,1.946-8.99
                c0-1.827-0.29-3.562-0.694-5.236C63.94,19.453,57.605,13.477,50,13.477c-7.461,0-13.701,5.763-15.792,13.645
                c-0.482,1.808-0.815,3.688-0.815,5.68c0,3.459,0.808,6.684,2.181,9.489c1.587,3.254,3.94,5.937,6.804,7.662l-6.342,2.953
                l-16.168,7.53c-1.404,0.658-2.327,2.242-2.327,4.011v15.062v2.703c0,2.381,1.659,4.312,3.708,4.312h57.505
                c2.048,0,3.708-1.93,3.708-4.312v-2.703V64.446C82.46,62.683,81.552,61.114,80.161,60.441z"/>
        </g>
    </svg>
    <span class="tm-login__cta">
        Log in    </span>
</div>
            </nav>

            
            <div class="quick-select-wrapper">
    <div id="quickselect-skeleton" class="ssc" style="height: 40px;">
        <div class="ssc-wrapper flex" style="height: 100%; padding: 0">
            <div class="ssc-square quickselect-element" style="width: 40px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 171.06px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 170.84px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 138.03px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 141.5px;"></div>
        </div>
    </div>

    <tm-quick-select-bar
        default-country="75"
        default-competition="IT1"
        default-club="252"
        default-player="167491"
        dropdown-visible=""
        translations='{&quot;home&quot;:&quot;Home&quot;,&quot;country&quot;:&quot;Country&quot;,&quot;competition&quot;:&quot;Competition&quot;,&quot;club&quot;:&quot;Club&quot;,&quot;player&quot;:&quot;Player&quot;,&quot;attack&quot;:&quot;Striker&quot;,&quot;midfield&quot;:&quot;Mittelfeld&quot;,&quot;defense&quot;:&quot;Defender&quot;,&quot;goalkeeper&quot;:&quot;Goalkeeper&quot;}'
        >
    </tm-quick-select-bar>
</div>


            <div class="werbung werbung-billboard">
  <div id="div-gpt-ad-1621524903956-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621524903956-0"); });</script>
  </div>
</div>
        </header>
        <main>

            
            
    <div id="modal-1" class="modal micromodal-slide" aria-hidden="true" tabindex="1">
        <div class="modal__overlay" tabindex="-1" data-custom-close>
            <div
                class="modal__container"
                role="dialog"
                aria-modal="true"
                aria-labelledby="modal-1-title"
                data-custom-close
                >
                <header class="modal__header">
                    <button
                        class="modal__close modal__close--profile-img"
                        aria-label="Close modal"
                        data-custom-close
                        >
                    </button>
                </header>
                <div id="modal-1-content" class="modal__content">
                                        <img src='https://img.a.transfermarkt.technology/portrait/big/167491-1595930293.jpg?lm=1' alt='Stefano Sabelli' title='Stefano Sabelli' data-custom-close loading="lazy">
                </div>
            </div>
        </div>
    </div>


<header class="data-header" itemscope itemtype="https://schema.org/Person">
                    <div class="data-header__headline-container">
            <h1 class="data-header__headline-wrapper">
                                    <span class="data-header__shirt-number">
                        #20                    </span>
                                Stefano <strong>Sabelli</strong>            </h1>
                                </div>
                    <div class="data-header__badge-container">
                                                    <a href="/stefano-sabelli/erfolge/spieler/167491" title="Italienischer Zweitligameister" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/436.png?lm=1651745299" title="Italienischer Zweitligameister" alt="Italienischer Zweitligameister" class="" />                                                <span class="data-header__success-number">2</span>
                    </a>
                                    <a href="/stefano-sabelli/erfolge/spieler/167491" title="Italian Youth champion (Primavera)" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/365.png?lm=1461847499" title="Italian Youth champion (Primavera)" alt="Italian Youth champion (Primavera)" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/stefano-sabelli/erfolge/spieler/167491" title="Coppa Italia Primavera winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/276.png?lm=1461847499" title="Coppa Italia Primavera winner" alt="Coppa Italia Primavera winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                            </div>
        
                    <div class="data-header__box--big">
                                    <a href="/genoa-cfc/startseite/verein/252" class="data-header__box__club-link">
                                            <img srcset="
                            https://tmssl.akamaized.net/images/wappen/normquad/252.png?lm=1655305880 1x,
                            https://tmssl.akamaized.net/images/wappen/homepageWappen150x150/252.png?lm=1655305880 2x
                            " alt="Genoa CFC" height="100" width="100" />
                                        </a>
                                <div class="data-header__club-info">
                    <span class="data-header__club" itemprop="affiliation">
                        <a title="Genoa CFC" href="/genua-cfc/startseite/verein/252">Genoa</a>                    </span><br />                    
                                                                            <span class="data-header__league">
                                    <a class="data-header__league-link" href="/serie-a/startseite/wettbewerb/IT1">
                                        <img src="https://tmssl.akamaized.net/images/logo/verytiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" />Serie A                                    </a>
                                </span>
                                                                            <span class="data-header__label">League level:
                                <span class="data-header__content">
                                    <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />First Tier                                </span>
                            </span>
                                                                                                        <span class="data-header__label">Joined: <span class="data-header__content">Jul 20, 2021</span></span>
                            <span class="data-header__label">Contract expires: <span class="data-header__content">Jun 30, 2025</span></span>
                                                            </div>
            </div>
        
        <div class="data-header__profile-container">
                            <div class="modal-trigger" data-custom-open="modal-1" id="fotoauswahlOeffnen" style="cursor:pointer" onclick="tmEvent('spielerprofil','click','profilbild');">
            
                                <img src="https://img.a.transfermarkt.technology/portrait/header/167491-1595930293.jpg?lm=1" title="Stefano Sabelli" alt="Stefano Sabelli" class="data-header__profile-image" height="181" width="139" /><div class="bildquelle"><span title="imago images">imago images</span></div>
                                    <span class="modal-trigger-icon">+</span>
                </div>
                        </div>
        <div class="data-header__info-box ">
            <div class="data-header__details">
                <ul class="data-header__items">
                                            <li class="data-header__label">Date of birth/Age:
                            <span itemprop="birthDate" class="data-header__content">
                                Jan 13, 1993 (30)                            </span>
                        </li>

                                                    <li class="data-header__label">Place of birth:
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                <span class="data-header__content" itemprop="birthPlace">
                                    Roma                                </span>
                            </li>
                        
                                            <li class="data-header__label">Citizenship:
                            <span itemprop="nationality" class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                Italy                            </span>
                        </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li class="data-header__label">Height:
                            <span itemprop="height" class="data-header__content">
                                1,76 m                            </span>
                        </li>
                    
                    <li class="data-header__label">Position:
                        <span class="data-header__content">
                            Right-Back                        </span>
                    </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li for="" class="data-header__label">
                                                            Former International:
                                                        <span class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen flagge" /><a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>                            </span>
                        </li>
                                                    <li class="data-header__label">Caps/Goals:
                                <a class="data-header__content data-header__content--highlight" href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947">10                                </a>/
                                <a class="data-header__content data-header__content--highlight" href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947">0                                </a>
                            </li>
                                    </ul>
            </div>
        </div>
        
    
            <div class="data-header__box--small">
                <a href="/stefano-sabelli/marktwertverlauf/spieler/167491" class="data-header__market-value-wrapper"><span class="waehrung">€</span>1.50<span class="waehrung">m</span>                <p class="data-header__last-update">Last update: Dec 20, 2023</p></a>
            </div>

            
    </header>
    <div class="row hide-on-print" id="subnavi" data-season="" data-controller="spieler" data-action="leistungsdaten" data-path="stefano-sabelli/leistungsdaten/spieler/167491/plus/0" data-id="167491">
        <div class="page_wrapper subnavi">
            <div class="large-12 columns">
                <div class="subnavi_box" id="subnavigation">
                    <div class="submenu-text show-for-small">
                        <a name="SubNavi" title="Navigation">
                            <span>≡ Sub navigation</span>
                        </a>
                    </div>
                    <nav>
                        <ul id="submenu">
                                                <li id="close_submenu" class="show-for-small">
                            <div id="submenu-icon">
                                <span class="clicked"></span>
                                <span class="clicked"></span>
                            </div>
                            <a>Close subnavigation</a>
                        </li>
                                                    <li id="profile" class="first-button  " data-nav-group="profile">
                                <a name="SubNavi" href="/stefano-sabelli/profil/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','profil');
">Profile</a>
                                                            </li>
                                                        <li id="stats" class="  " data-nav-group="stats">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','leistungsdaten');
">Stats</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="market-values" class="  " data-nav-group="market-values">
                                <a name="SubNavi" href="/stefano-sabelli/marktwertverlauf/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','marktwert');
">Market values</a>
                                                            </li>
                                                        <li id="transfers" class="  " data-nav-group="transfers">
                                <a name="SubNavi" href="/stefano-sabelli/transfers/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','transfers');
">Transfers</a>
                                                            </li>
                                                        <li id="rumors" class="  " data-nav-group="rumors">
                                <a name="SubNavi" href="/stefano-sabelli/geruechte/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','geruchte');
">Rumors</a>
                                                            </li>
                                                        <li id="national-team" class="  " data-nav-group="national-team">
                                <a name="SubNavi" href="/stefano-sabelli/nationalmannschaft/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','nationalmannschaft');
">National team</a>
                                                            </li>
                                                        <li id="news" class="  " data-nav-group="news">
                                <a name="SubNavi" href="/stefano-sabelli/news/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','news');
">News</a>
                                                            </li>
                                                        <li id="achievements" class="  " data-nav-group="achievements">
                                <a name="SubNavi" href="/stefano-sabelli/erfolge/spieler/167491" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','erfolge');
">Achievements</a>
                                                            </li>
                                                        <li id="career" class="  " data-nav-group="career">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','karriere');
">Career</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="subnavi-edit" class="  subnavi-edit" data-nav-group="subnavi-edit">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','edit');
"></a>
                                <div class="dropdown_fullwidth gasthinweis" title="Log in or register now"><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                    </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <script>
        var stickySubTop = $('#subnavigation').offset().top;
        stickySubTop = stickySubTop - 60;
        var main = $("#main");
        $(document).ready(function() {
            $(window).on('scroll load', function() {
                if (!main.hasClass("stickySubnavigation")) {
                    stickySubTop = $('#subnavigation').offset().top;
                }
                if ($(window).scrollTop() > stickySubTop) {
                    main.addClass("stickySubnavigation");
                } else {
                    main.removeClass("stickySubnavigation");
                }
            });
        });
    </script>
    <style>
        .forum-anchor {
            margin-top: -80px;
        }
    </style>

                        
<div class="row">
    <div class="large-8 columns">

        <div class="box">
            <h2 class="content-box-headline">
                Stats of Stefano Sabelli            </h2>
            <p class="info-content">
                This page contains information about a player's detailed stats. In the info box, you can filter by period, club, type of league and competition. The "Detailed stats" tab shows a player's total appearances, goals, cards and cumulative minutes of play for each competition, and indicates the season in which it occurred.            </p>
            <div class="content">
                <form action="/stefano-sabelli/leistungsdaten/spieler/167491/plus/0" method="get">                <div class="row">
                    <div class="large-12 columns">
                        <table class="auflistung">
                            <tbody>
                                <tr>
                                    <td>Filter by season:</td>
                                    <td>
                                        <div class="inline-select">
                                            <select name="saison" data-placeholder="Filter by season" class="chzn-select" tabindex="0">
                                                <option value="ges">Overall balance</option>
                                                                                                    <option value="2023">23/24</option>
                                                                                                    <option  selected="selected"value="2022">22/23</option>
                                                                                                    <option value="2021">21/22</option>
                                                                                                    <option value="2020">20/21</option>
                                                                                                    <option value="2019">19/20</option>
                                                                                                    <option value="2018">18/19</option>
                                                                                                    <option value="2017">17/18</option>
                                                                                                    <option value="2016">16/17</option>
                                                                                                    <option value="2015">15/16</option>
                                                                                                    <option value="2014">14/15</option>
                                                                                                    <option value="2013">13/14</option>
                                                                                                    <option value="2012">12/13</option>
                                                                                                    <option value="2011">11/12</option>
                                                                                                    <option value="2010">10/11</option>
                                                                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="submit" class="small button" value="Show">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                </form>            </div>
        </div>
        <div class="box">
            <h2 class="content-box-headline">
                Stats 22/23            </h2>
            
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022#gesamt"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/1#gesamt"><div class=""><span>Detailed</span></div></a></div>
            <div class="responsive-table">
                <div id="yw1" class="grid-view">
<div class="summary"></div>
<table class="items">
<thead>
<tr>
<th colspan="2" id="yw1_c0"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/wettbewerb">Competition</a></th><th class="hide" id="yw1_c1"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/wettbewerb">wettbewerb</a></th><th class="zentriert" id="yw1_c2"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/einsaetze.desc"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></a></th><th class="zentriert" id="yw1_c3"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/tore.desc"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></a></th><th class="zentriert" id="yw1_c4"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/vorlagen.desc"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></a></th><th class="zentriert" id="yw1_c5"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/gelbe.desc"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c6"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/gelbrote.desc"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c7"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/rote.desc"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></a></th><th class="rechts" id="yw1_c8"><a class="sort-link" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/0/sort/einsatzzeit.desc"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></a></th></tr>
</thead>
<tfoot>
<tr>
<td colspan="2" class="rechts">Total  22/23:</td><td class="hide">&nbsp;</td><td class="zentriert">32</td><td class="zentriert">1</td><td class="zentriert">6</td><td class="zentriert">10</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">2.679'</td></tr>
</tfoot>
<tbody>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it2.png?lm=1548242827" title="Serie B" alt="Serie B" class="" /></td><td class="hauptlink no-border-links"><a title="Serie B" href="/serie-b/startseite/wettbewerb/IT2">Serie B</a></td><td class="zentriert player-profile-performance-data"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/wettbewerb/IT2/verein/252">30</a></td><td class="zentriert">1</td><td class="zentriert">5</td><td class="zentriert">10</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">2.523'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cit.png?lm=1613033113" title="Italy Cup" alt="Italy Cup" class="" /></td><td class="hauptlink no-border-links"><a title="Italy Cup" href="/coppa-italia/startseite/pokalwettbewerb/CIT">Italy Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/wettbewerb/CIT/verein/252">2</a></td><td class="zentriert">-</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">156'</td></tr>
</tbody>
</table>
<div class="keys" style="display:none" title="/stefano-sabelli/leistungsdaten/spieler/167491/plus/0?saison=2022"><span>Serie B</span><span>Italy Cup</span></div>
</div>            </div>
        </div>

        <div class="box">
    <div class="table-header img-vat">
        <a name="CIT" href="/italy-cup/startseite/wettbewerb/CIT/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cit.png?lm=1613033113" title="Italy Cup" alt="Italy Cup" class="" />Italy Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2022/gruppe/1R">First Round</a>
                </td>
                                    <td class="zentriert">8/8/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Benevento Calcio" href="/benevento-calcio/spielplan/verein/4171/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4171.png?lm=1434444046" title="Benevento Calcio" alt="Benevento Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Benevento Calcio" href="/benevento-calcio/spielplan/verein/4171/saison_id/2022">Benevento</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3865513" href="/genoa-cfc_benevento-calcio/index/spielbericht/3865513"><span class="greentext">3:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">66'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2022/gruppe/2R">Second Round</a>
                </td>
                                    <td class="zentriert">10/18/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="SPAL" href="/spal/spielplan/verein/2722/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2722.png?lm=1626441491" title="SPAL" alt="SPAL" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="SPAL" href="/spal/spielplan/verein/2722/saison_id/2022">SPAL</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3898454" href="/genoa-cfc_spal/index/spielbericht/3898454"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2022/gruppe/AF">Round of 16</a>
                </td>
                                    <td class="zentriert">1/12/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                    <td class="no-border-links "><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022">AS Roma</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3947774" href="/as-roma_genoa-cfc/index/spielbericht/3947774"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 3,
                        Starting eleven: 2,
                        Substituted in: 0,
                        On the bench: 1,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="IT2" href="/serie-b/startseite/wettbewerb/IT2/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/it2.png?lm=1548242827" title="Serie B" alt="Serie B" class="" />Serie B        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/stefano-sabelli/leistungsdaten/spieler/167491/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/1">1</a>
                </td>
                                    <td class="zentriert">8/14/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(7.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Venezia FC" href="/venezia-fc/spielplan/verein/607/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/607.png?lm=1657392944" title="Venezia FC" alt="Venezia FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Venezia FC" href="/venezia-fc/spielplan/verein/607/saison_id/2022">Venezia</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873445" href="/venezia-fc_genoa-cfc/index/spielbericht/3873445"><span class="greentext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/2">2</a>
                </td>
                                    <td class="zentriert">8/20/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Benevento Calcio" href="/benevento-calcio/spielplan/verein/4171/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4171.png?lm=1434444046" title="Benevento Calcio" alt="Benevento Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Benevento Calcio" href="/benevento-calcio/spielplan/verein/4171/saison_id/2022">Benevento</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873460" href="/genoa-cfc_benevento-calcio/index/spielbericht/3873460"><span class="">0:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/3">3</a>
                </td>
                                    <td class="zentriert">8/28/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Pisa Sporting Club" href="/ac-pisa-1909/spielplan/verein/4172/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4172.png?lm=1693294828" title="Pisa Sporting Club" alt="Pisa Sporting Club" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Pisa Sporting Club" href="/ac-pisa-1909/spielplan/verein/4172/saison_id/2022">Pisa</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873472" href="/pisa-sporting-club_genoa-cfc/index/spielbericht/3873472"><span class="greentext">0:1 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">9/3/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Parma Calcio 1913" href="/parma-calcio-1913/spielplan/verein/130/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/130.png?lm=1530945992" title="Parma Calcio 1913" alt="Parma Calcio 1913" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Parma Calcio 1913" href="/parma-calcio-1913/spielplan/verein/130/saison_id/2022">Parma</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873515" href="/genoa-cfc_parma-calcio-1913/index/spielbericht/3873515"><span class="">3:3 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">9/9/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(12.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Palermo FC" href="/palermo-fc/spielplan/verein/458/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/458.png?lm=1701339000" title="Palermo FC" alt="Palermo FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Palermo FC" href="/palermo-fc/spielplan/verein/458/saison_id/2022">Palermo</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873558" href="/palermo-fc_genoa-cfc/index/spielbericht/3873558"><span class="redtext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/6">6</a>
                </td>
                                    <td class="zentriert">9/17/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Modena FC" href="/modena-fc-2018/spielplan/verein/1385/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1385.png?lm=1657012115" title="Modena FC" alt="Modena FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Modena FC" href="/modena-fc-2018/spielplan/verein/1385/saison_id/2022">Modena</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873933" href="/genoa-cfc_modena-fc/index/spielbericht/3873933"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/7">7</a>
                </td>
                                    <td class="zentriert">10/1/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SPAL" href="/spal/spielplan/verein/2722/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2722.png?lm=1626441491" title="SPAL" alt="SPAL" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="SPAL" href="/spal/spielplan/verein/2722/saison_id/2022">SPAL</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873947" href="/spal_genoa-cfc/index/spielbericht/3873947"><span class="greentext">0:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">72'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/8">8</a>
                </td>
                                    <td class="zentriert">10/7/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Cagliari Calcio" href="/cagliari-calcio/spielplan/verein/1390/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1390.png?lm=1626441409" title="Cagliari Calcio" alt="Cagliari Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Cagliari Calcio" href="/cagliari-calcio/spielplan/verein/1390/saison_id/2022">Cagliari Calcio</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873952" href="/genoa-cfc_cagliari-calcio/index/spielbericht/3873952"><span class="">0:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/9">9</a>
                </td>
                                    <td class="zentriert">10/15/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Cosenza Calcio" href="/cosenza-calcio/spielplan/verein/4031/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4031.png?lm=1531570178" title="Cosenza Calcio" alt="Cosenza Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Cosenza Calcio" href="/cosenza-calcio/spielplan/verein/4031/saison_id/2022">Cosenza</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873962" href="/cosenza-calcio_genoa-cfc/index/spielbericht/3873962"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/10">10</a>
                </td>
                                    <td class="zentriert">10/22/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Ternana Calcio" href="/ternana-calcio/spielplan/verein/1103/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1103.png?lm=1532531645" title="Ternana Calcio" alt="Ternana Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Ternana Calcio" href="/ternana-calcio/spielplan/verein/1103/saison_id/2022">Ternana</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3873977" href="/ternana-calcio_genoa-cfc/index/spielbericht/3873977"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/11">11</a>
                </td>
                                    <td class="zentriert">10/29/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/19.png?lm=1511961167" title="Brescia Calcio" alt="Brescia Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2022">Brescia</a>&nbsp;&nbsp;<span class="tabellenplatz">(5.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874022" href="/genoa-cfc_brescia-calcio/index/spielbericht/3874022"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/12">12</a>
                </td>
                                    <td class="zentriert">11/7/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Reggina 1914" href="/reggina-1914/spielplan/verein/1386/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1386_1695137166.png?lm=1695137167" title="&nbsp;" alt="Reggina 1914" class="" /></a></td>
                    <td class="no-border-links "><a title="Reggina 1914" href="/reggina-1914/spielplan/verein/1386/saison_id/2022">Reggina</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874035" href="/reggina-1914_genoa-cfc/index/spielbericht/3874035"><span class="redtext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert">40'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/13">13</a>
                </td>
                                    <td class="zentriert">11/13/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Como 1907" href="/como-1907/spielplan/verein/1047/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1047.png?lm=1565704078" title="Como 1907" alt="Como 1907" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Como 1907" href="/como-1907/spielplan/verein/1047/saison_id/2022">Como</a>&nbsp;&nbsp;<span class="tabellenplatz">(18.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874042" href="/genoa-cfc_como-1907/index/spielbericht/3874042"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">65'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/14">14</a>
                </td>
                                    <td class="zentriert">11/27/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AC Perugia Calcio" href="/ac-perugia-calcio/spielplan/verein/839/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/839.png?lm=1438548482" title="AC Perugia Calcio" alt="AC Perugia Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="AC Perugia Calcio" href="/ac-perugia-calcio/spielplan/verein/839/saison_id/2022">Perugia</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874054" href="/ac-perugia-calcio_genoa-cfc/index/spielbericht/3874054"><span class="redtext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">78'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/15">15</a>
                </td>
                                    <td class="zentriert">12/4/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AS Cittadella" href="/as-cittadella/spielplan/verein/4084/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4084_1687772033.png?lm=1687772033" title="&nbsp;" alt="AS Cittadella" class="" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AS Cittadella" href="/as-cittadella/spielplan/verein/4084/saison_id/2022">Cittadella</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874124" href="/genoa-cfc_as-cittadella/index/spielbericht/3874124"><span class="redtext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">87'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/16">16</a>
                </td>
                                    <td class="zentriert">12/8/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="FC Südtirol" href="/fc-sudtirol/spielplan/verein/4554/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4554.png?lm=1465161205" title="FC Südtirol" alt="FC Südtirol" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="FC Südtirol" href="/fc-sudtirol/spielplan/verein/4554/saison_id/2022">Südtirol</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874070" href="/genoa-cfc_fc-sudtirol/index/spielbericht/3874070"><span class="greentext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">52'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/17">17</a>
                </td>
                                    <td class="zentriert">12/11/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Ascoli Calcio" href="/ascoli-calcio/spielplan/verein/408/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/408.png?lm=1534435837" title="Ascoli Calcio" alt="Ascoli Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Ascoli Calcio" href="/ascoli-calcio/spielplan/verein/408/saison_id/2022">Ascoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874078" href="/ascoli-calcio_genoa-cfc/index/spielbericht/3874078"><span class="">0:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/18">18</a>
                </td>
                                    <td class="zentriert">12/18/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Frosinone Calcio" href="/frosinone-calcio/spielplan/verein/8970/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/8970.png?lm=1438547543" title="Frosinone Calcio" alt="Frosinone Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Frosinone Calcio" href="/frosinone-calcio/spielplan/verein/8970/saison_id/2022">Frosinone</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874090" href="/genoa-cfc_frosinone-calcio/index/spielbericht/3874090"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/19">19</a>
                </td>
                                    <td class="zentriert">12/26/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SSC Bari" href="/ssc-bari/spielplan/verein/332/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/332.png?lm=1536916058" title="SSC Bari" alt="SSC Bari" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="SSC Bari" href="/ssc-bari/spielplan/verein/332/saison_id/2022">Bari</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874099" href="/ssc-bari_genoa-cfc/index/spielbericht/3874099"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">76'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/20">20</a>
                </td>
                                    <td class="zentriert">1/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Venezia FC" href="/venezia-fc/spielplan/verein/607/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/607.png?lm=1657392944" title="Venezia FC" alt="Venezia FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Venezia FC" href="/venezia-fc/spielplan/verein/607/saison_id/2022">Venezia</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874112" href="/genoa-cfc_venezia-fc/index/spielbericht/3874112"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">90 + 3'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/21">21</a>
                </td>
                                    <td class="zentriert">1/21/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Benevento Calcio" href="/benevento-calcio/spielplan/verein/4171/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4171.png?lm=1434444046" title="Benevento Calcio" alt="Benevento Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Benevento Calcio" href="/benevento-calcio/spielplan/verein/4171/saison_id/2022">Benevento</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874133" href="/benevento-calcio_genoa-cfc/index/spielbericht/3874133"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert">50'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/22">22</a>
                </td>
                                    <td class="zentriert">1/28/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Pisa Sporting Club" href="/ac-pisa-1909/spielplan/verein/4172/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4172.png?lm=1693294828" title="Pisa Sporting Club" alt="Pisa Sporting Club" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Pisa Sporting Club" href="/ac-pisa-1909/spielplan/verein/4172/saison_id/2022">Pisa</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874145" href="/genoa-cfc_pisa-sporting-club/index/spielbericht/3874145"><span class="">0:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span class="icons_sprite icon-gelbekarte-table" title="Yellow card suspension">&nbsp;</span>Yellow card suspension</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/23">23</a>
                </td>
                                    <td class="zentriert">2/5/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Parma Calcio 1913" href="/parma-calcio-1913/spielplan/verein/130/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/130.png?lm=1530945992" title="Parma Calcio 1913" alt="Parma Calcio 1913" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Parma Calcio 1913" href="/parma-calcio-1913/spielplan/verein/130/saison_id/2022">Parma</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874153" href="/parma-calcio-1913_genoa-cfc/index/spielbericht/3874153"><span class="redtext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">25'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/24">24</a>
                </td>
                                    <td class="zentriert">2/10/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Palermo FC" href="/palermo-fc/spielplan/verein/458/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/458.png?lm=1701339000" title="Palermo FC" alt="Palermo FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Palermo FC" href="/palermo-fc/spielplan/verein/458/saison_id/2022">Palermo</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874163" href="/genoa-cfc_palermo-fc/index/spielbericht/3874163"><span class="greentext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">31'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/25">25</a>
                </td>
                                    <td class="zentriert">2/19/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Modena FC" href="/modena-fc-2018/spielplan/verein/1385/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1385.png?lm=1657012115" title="Modena FC" alt="Modena FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Modena FC" href="/modena-fc-2018/spielplan/verein/1385/saison_id/2022">Modena</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874173" href="/modena-fc_genoa-cfc/index/spielbericht/3874173"><span class="">2:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">82'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/26">26</a>
                </td>
                                    <td class="zentriert">2/25/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SPAL" href="/spal/spielplan/verein/2722/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2722.png?lm=1626441491" title="SPAL" alt="SPAL" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="SPAL" href="/spal/spielplan/verein/2722/saison_id/2022">SPAL</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874187" href="/genoa-cfc_spal/index/spielbericht/3874187"><span class="greentext">3:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right-Back">RB</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">66'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/27">27</a>
                </td>
                                    <td class="zentriert">3/1/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Cagliari Calcio" href="/cagliari-calcio/spielplan/verein/1390/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1390.png?lm=1626441409" title="Cagliari Calcio" alt="Cagliari Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Cagliari Calcio" href="/cagliari-calcio/spielplan/verein/1390/saison_id/2022">Cagliari Calcio</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874192" href="/cagliari-calcio_genoa-cfc/index/spielbericht/3874192"><span class="">0:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">48'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/28">28</a>
                </td>
                                    <td class="zentriert">3/6/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Cosenza Calcio" href="/cosenza-calcio/spielplan/verein/4031/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4031.png?lm=1531570178" title="Cosenza Calcio" alt="Cosenza Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Cosenza Calcio" href="/cosenza-calcio/spielplan/verein/4031/saison_id/2022">Cosenza</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874202" href="/genoa-cfc_cosenza-calcio/index/spielbericht/3874202"><span class="greentext">4:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">72'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/29">29</a>
                </td>
                                    <td class="zentriert">3/12/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Ternana Calcio" href="/ternana-calcio/spielplan/verein/1103/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1103.png?lm=1532531645" title="Ternana Calcio" alt="Ternana Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Ternana Calcio" href="/ternana-calcio/spielplan/verein/1103/saison_id/2022">Ternana</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874217" href="/genoa-cfc_ternana-calcio/index/spielbericht/3874217"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/30">30</a>
                </td>
                                    <td class="zentriert">3/18/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/19.png?lm=1511961167" title="Brescia Calcio" alt="Brescia Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2022">Brescia</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874222" href="/brescia-calcio_genoa-cfc/index/spielbericht/3874222"><span class="greentext">0:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">76'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/31">31</a>
                </td>
                                    <td class="zentriert">3/31/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Reggina 1914" href="/reggina-1914/spielplan/verein/1386/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1386_1695137166.png?lm=1695137167" title="&nbsp;" alt="Reggina 1914" class="" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Reggina 1914" href="/reggina-1914/spielplan/verein/1386/saison_id/2022">Reggina</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874235" href="/genoa-cfc_reggina-1914/index/spielbericht/3874235"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/32">32</a>
                </td>
                                    <td class="zentriert">4/10/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Como 1907" href="/como-1907/spielplan/verein/1047/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1047.png?lm=1565704078" title="Como 1907" alt="Como 1907" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Como 1907" href="/como-1907/spielplan/verein/1047/saison_id/2022">Como</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874242" href="/como-1907_genoa-cfc/index/spielbericht/3874242"><span class="">2:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/33">33</a>
                </td>
                                    <td class="zentriert">4/15/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AC Perugia Calcio" href="/ac-perugia-calcio/spielplan/verein/839/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/839.png?lm=1438548482" title="AC Perugia Calcio" alt="AC Perugia Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AC Perugia Calcio" href="/ac-perugia-calcio/spielplan/verein/839/saison_id/2022">Perugia</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874254" href="/genoa-cfc_ac-perugia-calcio/index/spielbericht/3874254"><span class="greentext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Midfield">LM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/34">34</a>
                </td>
                                    <td class="zentriert">4/22/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AS Cittadella" href="/as-cittadella/spielplan/verein/4084/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4084_1687772033.png?lm=1687772033" title="&nbsp;" alt="AS Cittadella" class="" /></a></td>
                    <td class="no-border-links "><a title="AS Cittadella" href="/as-cittadella/spielplan/verein/4084/saison_id/2022">Cittadella</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874264" href="/as-cittadella_genoa-cfc/index/spielbericht/3874264"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Midfield">RM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/35">35</a>
                </td>
                                    <td class="zentriert">5/1/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="FC Südtirol" href="/fc-sudtirol/spielplan/verein/4554/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4554.png?lm=1465161205" title="FC Südtirol" alt="FC Südtirol" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="FC Südtirol" href="/fc-sudtirol/spielplan/verein/4554/saison_id/2022">Südtirol</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874270" href="/fc-sudtirol_genoa-cfc/index/spielbericht/3874270"><span class="">0:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/36">36</a>
                </td>
                                    <td class="zentriert">5/6/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Ascoli Calcio" href="/ascoli-calcio/spielplan/verein/408/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/408.png?lm=1534435837" title="Ascoli Calcio" alt="Ascoli Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Ascoli Calcio" href="/ascoli-calcio/spielplan/verein/408/saison_id/2022">Ascoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874278" href="/genoa-cfc_ascoli-calcio/index/spielbericht/3874278"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Midfield">LM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">76'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">82'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/37">37</a>
                </td>
                                    <td class="zentriert">5/13/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Frosinone Calcio" href="/frosinone-calcio/spielplan/verein/8970/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/8970.png?lm=1438547543" title="Frosinone Calcio" alt="Frosinone Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Frosinone Calcio" href="/frosinone-calcio/spielplan/verein/8970/saison_id/2022">Frosinone</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874290" href="/frosinone-calcio_genoa-cfc/index/spielbericht/3874290"><span class="redtext">3:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Midfield">LM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-b/spieltag/wettbewerb/IT2/saison_id/2022/spieltag/38">38</a>
                </td>
                                    <td class="zentriert">5/19/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SSC Bari" href="/ssc-bari/spielplan/verein/332/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/332.png?lm=1536916058" title="SSC Bari" alt="SSC Bari" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="SSC Bari" href="/ssc-bari/spielplan/verein/332/saison_id/2022">Bari</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3874299" href="/genoa-cfc_ssc-bari/index/spielbericht/3874299"><span class="greentext">4:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left-Back">LB</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert">77'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">78'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 37,
                        Starting eleven: 29,
                        Substituted in: 1,
                        On the bench: 7,
                        Suspended: 1,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
</div>
    <div class="large-4 columns">
        <div class="werbung werbung-rectangle1">
  <div id="div-gpt-ad-1621526463511-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621526463511-0"); });</script>
  </div>
</div>
        <div class="box hide">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                                    <span class="position_9" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);background-color: rgba(167, 27, 30, 0.98);font-size:16px !important" title="30">3</span>
                                        <span class="position_4" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:20px !important" title="90">9</span>
                                        <span class="position_8" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:20px !important" title="90">9</span>
                                        <span class="position_5" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:22px !important" title="100">10</span>
                                </div>
        </div>
    </div>
</div>
<div class="box">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                
                    <div class="zahl-anzeige pos-box positionsbox_9" title="Left Midfield">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/9">
                            <div class="text-box p-9" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                3                                <div class="zusatz-kreis">LM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_9" title="Left Midfield">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/9">
                            <div class="text-box p-9" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                LM                                <div class="zusatz-kreis">3</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_4" title="Left-Back">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/4">
                            <div class="text-box p-4" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                9                                <div class="zusatz-kreis">LB</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_4" title="Left-Back">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/4">
                            <div class="text-box p-4" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                LB                                <div class="zusatz-kreis">9</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_8" title="Right Midfield">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/8">
                            <div class="text-box p-8" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                9                                <div class="zusatz-kreis">RM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_8" title="Right Midfield">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/8">
                            <div class="text-box p-8" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                RM                                <div class="zusatz-kreis">9</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_5" title="Right-Back">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/5">
                            <div class="text-box p-5" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                10                                <div class="zusatz-kreis">RB</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_5" title="Right-Back">
                        <div class="aussen">
                            <a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/5">
                            <div class="text-box p-5" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                RB                                <div class="zusatz-kreis">10</div>
                            </div>
                            </a>
                        </div>
                    </div>

                                </div>
        </div>
    </div>
        <table>
        <thead>
            <tr>
                <th>Played as...</th>
                <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                        </tr>
        </thead>
        <tbody>
                        <tr>
                <td class="hauptlink"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/5">Right-Back</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/5">10</a></td>
                                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/5">-</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/5">2</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/8">Right Midfield</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/8">9</a></td>
                                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/8">-</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/8">1</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/4">Left-Back</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/4">9</a></td>
                                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/4">1</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/4">2</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/9">Left Midfield</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/9">3</a></td>
                                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/9">-</a></td>
                <td class="zentriert"><a href="/stefano-sabelli/leistungsdatendetails/spieler/167491/saison/2022/pos/9">1</a></td>
                            </tr>
                        </tbody>
    </table>
</div>
        <div class="box">
    <h2 class="content-box-headline">
        Stats by club    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Club</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><a title="FC Bari 1908" href="/ssc-bari/spielplan/verein/332/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/332_1536916077.png?lm=1536916077" title="&nbsp;" alt="FC Bari 1908" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="FC Bari 1908" href="/ssc-bari/spielplan/verein/332/saison_id/2017">Bari</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/332">181</a></td>
                            <td class="zentriert">4</td>
                <td class="zentriert">13</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2018"><img src="https://tmssl.akamaized.net/images/wappen/tiny/19.png?lm=1511961167" title="Brescia Calcio" alt="Brescia Calcio" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Brescia Calcio" href="/brescia-calcio/spielplan/verein/19/saison_id/2018">Brescia</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/19">99</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">8</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2023">Genoa</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/252">58</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">6</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Roma U19" href="/as-rom-u19/spielplan/verein/11997/saison_id/2010"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11997.png?lm=1701079293" title="Roma U19" alt="Roma U19" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Roma U19" href="/as-rom-u19/spielplan/verein/11997/saison_id/2010">Roma U19</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/11997">52</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Empoli FC " href="/fc-empoli/spielplan/verein/749/saison_id/2020"><img src="https://tmssl.akamaized.net/images/wappen/tiny/749_1622183307.png?lm=1622183308" title="&nbsp;" alt="Empoli FC " class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Empoli FC " href="/fc-empoli/spielplan/verein/749/saison_id/2020">Empoli</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/749">12</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">3</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Carpi FC 1909" href="/carpi-fc-1909/spielplan/verein/4102/saison_id/2015"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4102_1631169567.png?lm=1631169567" title="&nbsp;" alt="Carpi FC 1909" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Carpi FC 1909" href="/carpi-fc-1909/spielplan/verein/4102/saison_id/2015">Carpi</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/verein/4102">7</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Stefano Sabelli" class="content-link" href="/stefano-sabelli/leistungsdatenverein/spieler/167491">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        Performance by competition    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Competition</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it2.png?lm=1548242827" title="Serie B" alt="Serie B" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie B" href="/serie-b/startseite/wettbewerb/IT2">Serie B</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/IT2">270</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">24</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie A" href="/serie-a/startseite/wettbewerb/IT1">Serie A</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/IT1">66</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">3</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itj3.png?lm=1514453455" title="Campionato Primavera Girone C" alt="Campionato Primavera Girone C" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera C" href="/campionato-primavera-girone-c/startseite/wettbewerb/ITJ3">Primavera C</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/ITJ3/verein/11997">36</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/posb.png?lm=1548244828" title="Serie B Play-off" alt="Serie B Play-off" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie B Play-off" href="/serie-b-playoff/startseite/wettbewerb/POSB">Serie B Play-off</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/POSB">6</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itje.png?lm=1600081543" title="Campionato Primavera Fase Finale" alt="Campionato Primavera Fase Finale" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera Fase Finale" href="/campionato-primavera-finalrunde/startseite/wettbewerb/ITJE">Primavera Fase Finale</a></td>
            <td class="zentriert"><a title="Stefano Sabelli" href="/stefano-sabelli/leistungsdatendetails/spieler/167491/wettbewerb/ITJE/verein/11997">5</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Stefano Sabelli" class="content-link" href="/stefano-sabelli/detaillierteleistungsdaten/spieler/167491">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        National team career    </h2>
    <table>
        <thead>
        <tr>
            <th class="zentriert">#</th>
            <th colspan="2" class="hide-for-small">National team</th>
            <th class="zentriert">Debut</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Matches">&nbsp;</span></th>
            <th class="zentriert"><span class="icons_sprite icon-tor-table-header"></span></th>
                    </tr>
        </thead>
        <tbody>
            <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                3
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2319493" title="UEFA European Under-21 Championship Qualifying: Italy U21 - Belgium U21 1:3">Sep 5, 2013</a>
                                </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947">10</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/11947/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2579644" title="International Friendlies: Italy U20 - Türkiye U21 2:2">Sep 5, 2012</a>
                                </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21100">8</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21100/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
            <td class="zentriert">
                                    Aug 24, 2011                            </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21426">8</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21426/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/1079592" title="International Friendlies: Italy U18 - Norway U18 2:0">Feb 14, 2011</a>
                                </td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21746">4</a></td>
            <td class="zentriert"><a href="/stefano-sabelli/nationalmannschaft/spieler/167491/verein_id/21746/nurEinsatz/2">-</a></td>
                    </tr>
                </tbody>
    </table>
            <a title="Stefano Sabelli" class="content-link" href="/stefano-sabelli/nationalmannschaft/spieler/167491">Go to national player profile</a>    </div>
        <div class="werbung werbung-rectangle2">
  <div id="div-gpt-ad-1621528018930-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528018930-0"); });</script>
  </div>
</div>
    </div>
</div>

<script async src="/js/custom/tm-track-links.min.js" type="module"></script>
<div class="werbung werbung-fullsize_contentad">
  <div id="div-gpt-ad-1621528173524-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528173524-0"); });</script>
  </div>
</div>
        </main>

        <footer>
            <div class="tm-footer">
            <a href="/"
           class="tm-footer__logo">
          <img src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" alt="Transfermarkt" height="33" width="80"/>
        </a>
          <ul class="tm-footer__links">
    <li class="tm-footer__links-item">
      <a href="/intern/impressum">
          Legal notice      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/web/datenschutz">
          Data protection      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="javascript:void(0)" class="cmp-link">
          Privacy      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/anb">
          General conditions of use      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/tmteam">
          TM-Team      </a>
    </li>
                        <li class="tm-footer__links-item">
      <a href="/intern/faq">
          FAQ      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/fehlermelden">
          Found a mistake?      </a>
    </li>
  </ul>
</div>
        </footer>
                <div id="menue_overlay"></div>
    </div>
        <script type="text/javascript">
        var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r",
"co":""
}
    </script>
        <script type="module">
        var defaultOptions = {
            tracking: !0,
            refreshAds: !0
        };
        export var refreshAd = function() {
            var e, n;
            [ASCDP.hasOwnProperty("adS"), null === (e = ASCDP.adS) || void 0 === e ? void 0 : e.hasOwnProperty("reloadAds"), "function" == typeof(null === (n = ASCDP.adS) || void 0 === n ? void 0 : n.reloadAds)].every(function(e) {
                return e
            }) && ASCDP.adS.reloadAds()
        };
        export var TmTrackingAndAds = function(e, n) {
            void 0 === n && (n = defaultOptions);
            var r = ["tabelle", "reiter", "forum"].includes(e) ? e : "";
            n.tracking && (gtag("event", "page_view", {
                page_path: "/jsContent" + window.location.pathname
            }), sendIvwData(r)), n.refreshAds && "undefined" != typeof ASCDP && refreshAd()
        };
        window.tmTrackingAndAds = function(e, n) {
            return TmTrackingAndAds(e, n)
        };
    </script>
            <script type="text/javascript">
            const iommInterval = setInterval(() => {
                if (typeof IOMm === 'function') {
                    IOMm('configure', {
                        st: iam_data.st,
                        dn: 'data-84a0f3455d.transfermarkt.com',
                        mh: 5
                    });
                    IOMm('pageview', {
                        cp: iam_data.cp,
                        co: iam_data.co
                    });
                    clearInterval(iommInterval);
                }
            }, 250);
        </script>
    <script type="text/javascript">
	if(typeof(adet) == "boolean" && adet == false){
		img_src="/static/singlepictures/jk99hhfsdh209nbnkjldgh90sghfsdlk";
	} else {
		img_src="/static/singlepictures/jku90whjlkjbwbta1g4b8h89fh8sgh8d";
	}
	var elem = document.createElement("img");
	document.body.appendChild(elem);
	elem.src = img_src;
</script>

            <script>
            $(function() {
                var cnt = $('div.large-4.columns').length;
                if (cnt == 1) {
                    var sidebarDiv = document.querySelector('div.large-4.columns');
                    if (sidebarDiv !== null) {
                        $('#werbung_recommender_sidebar_wrapper').appendTo(sidebarDiv);
                        $('#werbung_recommender_sidebar_wrapper').show();
                    }
                }
            });
        </script>
        <div id="werbung_recommender_sidebar_wrapper" style="display: none;">
            <div 
    id="recommender_sidebar" 
    class="box"
    >
    <div class="OUTBRAIN" data-widget-id="SL_DT_SB"></div>
<tm-consent 
    no-checkbox 
    type="outbrain" 
    embed="PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jPSJhc3luYyIgc3JjPSIvL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzIj48L3NjcmlwdD4=">
</tm-consent>
</div>
        </div>
    <script type="module" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.esm.js" defer></script><script nomodule="" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.js" defer></script><tm-consent type="adition" no-checkbox embed="PHNjcmlwdCBzcmM9Imh0dHBzOi8vY3JlYXRpdmUtY2RuLm9kZHNzZXJ2ZS5jb20vbG9hZGVyLmpzP3B1Ymxpc2hlcj10bSIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4="></tm-consent><tm-consent type="googleanalytics" no-checkbox embed="PHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMzgxNjIwNC0xMyI+PC9zY3JpcHQ+"></tm-consent>
<tm-consent type="pubmatic" no-checkbox embed="PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBXVD17fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncHRSYW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBXVC5qc0xvYWRlZCA9ICgpID0+IHsgLy9QdWJNYXRpYyBwd3QuanMgb24gbG9hZCBjYWxsYmFjayBpcyB1c2VkIHRvIGxvYWQgR1BUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEdQVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkR1BUID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGdwdFJhbiBmbGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncHRSYW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B0UmFuID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWRzLnNyYyA9ICh1c2VTU0wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0L3RhZy9qcy9ncHQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbHNhZmUgdG8gY2FsbCBncHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEdQVCwgNTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9wd3QvMTYzMjI5LzEwMTAzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZlcnNpb25JZCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1cmwuaW5kZXhPZigncHd0dj0nKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IC9wd3R2PSguKj8pKCZ8JCkvZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHJlZ2V4cC5leGVjKHB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoID49IDIgJiYgbWF0Y2hlc1sxXS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVZlcnNpb25JZCA9ICcvJyttYXRjaGVzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3RhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dGFkcy5hc3luYyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3RhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd0YWRzLnNyYyA9IHVybCtwcm9maWxlVmVyc2lvbklkKycvcHd0LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHd0YWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICA="></tm-consent><tm-consent type="amazonadvertising" no-checkbox embed="PHNjcmlwdD4hZnVuY3Rpb24odCwkLGUscyxpLGEsbyl7JFt0XXx8KCRbdF09e2luaXQ6ZnVuY3Rpb24oKXtfKCJpIixhcmd1bWVudHMpfSxmZXRjaEJpZHM6ZnVuY3Rpb24oKXtfKCJmIixhcmd1bWVudHMpfSxzZXREaXNwbGF5QmlkczpmdW5jdGlvbigpe30sdGFyZ2V0aW5nS2V5czpmdW5jdGlvbigpe3JldHVybltdfSxfUTpbXX0sKGE9ZS5jcmVhdGVFbGVtZW50KHMpKS5hc3luYz0hMCxhLnNyYz1pLChvPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbykpO2Z1bmN0aW9uIF8oZSxzKXskW3RdLl9RLnB1c2goW2Usc10pfX0oImFwc3RhZyIsd2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCIvL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIpLGFwc3RhZy5pbml0KHtwdWJJRDoiNTEzNCIsYWRTZXJ2ZXI6Imdvb2dsZXRhZyJ9KTtjb25zdCBpbml0QW1hem9uQWRCaWRzPSh0LCQpPT57KCQmJiJ0Y2xvYWRlZCI9PT10LmV2ZW50U3RhdHVzfHwidXNlcmFjdGlvbmNvbXBsZXRlIj09PXQuZXZlbnRTdGF0dXMpJiZhcHN0YWcuZmV0Y2hCaWRzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90czpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIixzbG90TmFtZToiNTg3NzgxNjQvRGVza3RvcC1CaWxsYm9hcmQtMSIsc2l6ZXM6W1s5NjAsOTBdLFs5NzAsMjUwXSxbOTUwLDkwXSxbNzI4LDkwXSxbOTcwLDkwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLU1lZGl1bVJlY3RhbmdsZS0xIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLVNreXNjcmFwZXItMSIsc2l6ZXM6W1sxNjAsNjAwXSxbMzM2LDI4MF0sWzMwMCwyNTBdLFszMDAsNjAwXSxbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLHNpemVzOltbMzM2LDI4MF0sWzMwMCwyNTBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0yIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxbMTYwLDYwMF0sWzMwMCw2MDBdLCBbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtQmlsbGJvYXJkLTIiLHNpemVzOltbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQyODkyOTYtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1NZWRpdW1SZWN0YW5nbGUtMSIsc2l6ZXM6W1szMDAsMTAwXSxbMzAwLDI1MF0sXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTY3OTM0MTQ2ODE5My0wIixzbG90TmFtZToiNTg3NzgxNjQvTW9iaWxlLU1lZGl1bVJlY3RhbmdsZS0yIixzaXplczpbWzMwMCwgMjUwXSwgWzMyMCwgNTBdLCBbMjUwLCAyNTBdLCBbMzAwLCAxMDBdLCBbMzM2LCAyODBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQzNjkyOTQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1IYWxmcGFnZS0xIixzaXplczpbWzMwMCw2MDBdLFszMDAsMjUwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTM0NDMyODI5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9Nb2JpbGUtU3RpY2t5IixzaXplczpbWzMwMCw1MF0sWzMyMCw1MF0sXX0sXSx0aW1lb3V0OjJlM30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpe2dvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpe2Fwc3RhZy5zZXREaXNwbGF5QmlkcygpLGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCl9KX0pfTsiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7PC9zY3JpcHQ+"></tm-consent><tm-consent type="googleadvertising" no-checkbox embed="PHNjcmlwdCAgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg=="></tm-consent>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/aa69c6e9c51f1e811847082c63633956/gridview/jquery.yiigridview.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-menu.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/vendors.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmsi.akamaized.net/js/svelte-components/consent/bundle.js"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-skyscraper.min.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
	var loginUrl='/profil/login';
	var onlyDE = '';
	var onlyMobile = '';
	var onlyTablet = '';
	var getUserID = '';

    function sendIvwData(typ) {
        if(typ == 'tabelle') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_t",
"co":""
}

        }else if(typ == 'reiter') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_r",
"co":""
}

        }else if(typ == 'forum') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_forum",
"co":""
}

        }else {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_s",
"co":""
}

        }
        if(typeof IOMm === 'function') {
            IOMm('pageview', { cp: iam_data.cp, co: iam_data.co });
        }
    }
jQuery(function($) {
jQuery('#yw1').yiiGridView({'ajaxUpdate':['yw1'],'ajaxVar':'ajax','pagerClass':'pager','loadingClass':'grid\x2Dview\x2Dloading','filterClass':'filters','tableClass':'items','selectableRows':1,'enableHistory':false,'updateSelector':'\x7Bpage\x7D,\x20\x7Bsort\x7D','filterSelector':'\x7Bfilter\x7D','afterAjaxUpdate':function() {window.LazyLoadInstance.update(); tmTrackingAndAds(); trackLinks(); document.dispatchEvent(new CustomEvent("tmInitTooltip"));}});
});
/*]]>*/
</script>
</body>

</html>
  recorded_at: Sun, 31 Dec 2023 14:58:44 GMT
recorded_with: VCR 6.2.0
