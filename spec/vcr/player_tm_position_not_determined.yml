---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/14555/plus/0?saison=2023
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 02 Jun 2024 15:04:30 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web05
      Set-Cookie:
      - TMSESSID=e896fbe465647058639c44ec1022aabd; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Last-Modified:
      - Sun, 02 Jun 2024 15:04:29 GMT
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 e464e3198927238582342df50c58a9a6.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - 4z8XyeyaR_FIZ7nZ6QHQYvsyx0yN1A0sWul0E7eNIa_0IuZix8H57g==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 02 Jun 2024 15:04:30 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/14555/plus/0?saison=2022
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 02 Jun 2024 15:04:31 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - prod-tm-web-server-1238
      Set-Cookie:
      - TMSESSID=249ddad156a8cb668518c9748337a024; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Last-Modified:
      - Sun, 02 Jun 2024 15:04:30 GMT
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 679258c30ef7c38f3429c59125b5f03c.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - KcfvInKXTbj8vbgjC4nkCjaUqCcN-Jc41xksxrSppPROz-vvCYzE4A==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KCjxoZWFkPgogICAgCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBkYXRhLWRlc2NyaXB0aW9uPSJzb3VyY2Vwb2ludCBzdHViIGNvZGUiPgogICAgIWZ1bmN0aW9uICgpIHsgdmFyIGUgPSBmdW5jdGlvbiAoKSB7IHZhciBlLCB0ID0gIl9fdGNmYXBpTG9jYXRvciIsIGEgPSBbXSwgbiA9IHdpbmRvdzsgZm9yICg7IG47KSB7IHRyeSB7IGlmIChuLmZyYW1lc1t0XSkgeyBlID0gbjsgYnJlYWsgfSB9IGNhdGNoIChlKSB7IH0gaWYgKG4gPT09IHdpbmRvdy50b3ApIGJyZWFrOyBuID0gbi5wYXJlbnQgfSBlIHx8ICghZnVuY3Rpb24gZSgpIHsgdmFyIGEgPSBuLmRvY3VtZW50LCByID0gISFuLmZyYW1lc1t0XTsgaWYgKCFyKSBpZiAoYS5ib2R5KSB7IHZhciBpID0gYS5jcmVhdGVFbGVtZW50KCJpZnJhbWUiKTsgaS5zdHlsZS5jc3NUZXh0ID0gImRpc3BsYXk6bm9uZSIsIGkubmFtZSA9IHQsIGEuYm9keS5hcHBlbmRDaGlsZChpKSB9IGVsc2Ugc2V0VGltZW91dChlLCA1KTsgcmV0dXJuICFyIH0oKSwgbi5fX3RjZmFwaSA9IGZ1bmN0aW9uICgpIHsgZm9yICh2YXIgZSwgdCA9IGFyZ3VtZW50cy5sZW5ndGgsIG4gPSBuZXcgQXJyYXkodCksIHIgPSAwOyByIDwgdDsgcisrKW5bcl0gPSBhcmd1bWVudHNbcl07IGlmICghbi5sZW5ndGgpIHJldHVybiBhOyBpZiAoInNldEdkcHJBcHBsaWVzIiA9PT0gblswXSkgbi5sZW5ndGggPiAzICYmIDIgPT09IHBhcnNlSW50KG5bMV0sIDEwKSAmJiAiYm9vbGVhbiIgPT0gdHlwZW9mIG5bM10gJiYgKGUgPSBuWzNdLCAiZnVuY3Rpb24iID09IHR5cGVvZiBuWzJdICYmIG5bMl0oInNldCIsICEwKSk7IGVsc2UgaWYgKCJwaW5nIiA9PT0gblswXSkgeyB2YXIgaSA9IHsgZ2RwckFwcGxpZXM6IGUsIGNtcExvYWRlZDogITEsIGNtcFN0YXR1czogInN0dWIiIH07ICJmdW5jdGlvbiIgPT0gdHlwZW9mIG5bMl0gJiYgblsyXShpKSB9IGVsc2UgYS5wdXNoKG4pIH0sIG4uYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsIChmdW5jdGlvbiAoZSkgeyB2YXIgdCA9ICJzdHJpbmciID09IHR5cGVvZiBlLmRhdGEsIGEgPSB7fTsgdHJ5IHsgYSA9IHQgPyBKU09OLnBhcnNlKGUuZGF0YSkgOiBlLmRhdGEgfSBjYXRjaCAoZSkgeyB9IHZhciBuID0gYS5fX3RjZmFwaUNhbGw7IG4gJiYgd2luZG93Ll9fdGNmYXBpKG4uY29tbWFuZCwgbi52ZXJzaW9uLCAoZnVuY3Rpb24gKGEsIHIpIHsgdmFyIGkgPSB7IF9fdGNmYXBpUmV0dXJuOiB7IHJldHVyblZhbHVlOiBhLCBzdWNjZXNzOiByLCBjYWxsSWQ6IG4uY2FsbElkIH0gfTsgdCAmJiAoaSA9IEpTT04uc3RyaW5naWZ5KGkpKSwgZS5zb3VyY2UucG9zdE1lc3NhZ2UoaSwgIioiKSB9KSwgbi5wYXJhbWV0ZXIpIH0pLCAhMSkpIH07ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBtb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA9IGUgOiBlKCkgfSgpOwo8L3NjcmlwdD4KPHNjcmlwdCBkYXRhLWRlc2NyaXB0aW9uPSJzb3VyY2Vwb2ludCBjb25maWd1cmF0aW9uIj4Kd2luZG93Ll9zcF8gPSB7CiAgICBjb25maWc6IHsiYWNjb3VudElkIjoxMjU0LCJwcm9wZXJ0eUlkIjo3NDI3LCJnZHByIjp7ImNvbnNlbnRMYW5ndWFnZSI6ImVuIiwidGFyZ2V0aW5nUGFyYW1zIjp7ImFjcHMiOiJmYWxzZSJ9fSwiYmFzZUVuZHBvaW50IjoiaHR0cHM6Ly9jZG4ucHJpdmFjeS1tZ210LmNvbSIsImlzU1BBIjp0cnVlLCJjcFByb3BlcnR5SWQiOiI3YTg0YjM0MCJ9fQo8L3NjcmlwdD4KPHNjcmlwdCBzcmM9Imh0dHBzOi8vY2RuLnByaXZhY3ktbWdtdC5jb20vd3JhcHBlck1lc3NhZ2luZ1dpdGhvdXREZXRlY3Rpb24uanMiIGFzeW5jPjwvc2NyaXB0PgoKPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGRhdGEtZGVzY3JpcHRpb249ImNvbnRlbnRwYXNzIGludGVncmF0aW9uIj4KICAgIChmdW5jdGlvbigpIHsKICAgICAgICB2YXIgY3BCYXNlVXJsID0gJ2h0dHBzOi8vY3AudHJhbnNmZXJtYXJrdC5jb20nOwogICAgICAgIHZhciBjcENvbnRyb2xsZXIgPSBjcEJhc2VVcmwgKyAnL25vdy5qcyc7CiAgICAgICAgdmFyIGNwUHJvcGVydHlJZCA9ICc3YTg0YjM0MCc7CgogICAgICAgICFmdW5jdGlvbihDLG8sbix0LFAsYSxzKXtDWydDUE9iamVjdCddPW47Q1tuXXx8KENbbl09ZnVuY3Rpb24oKXsKICAgICAgICAoQ1tuXS5xPUNbbl0ucXx8W10pLnB1c2goYXJndW1lbnRzKX0pO0Nbbl0ubD0rbmV3IERhdGU7YT1vLmNyZWF0ZUVsZW1lbnQodCk7CiAgICAgICAgcz1vLmdldEVsZW1lbnRzQnlUYWdOYW1lKHQpWzBdO2Euc3JjPVA7cy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLHMpfQogICAgICAgICh3aW5kb3csZG9jdW1lbnQsJ2NwJywnc2NyaXB0JyxjcENvbnRyb2xsZXIpOwoKICAgICAgICAhZnVuY3Rpb24oQyxvLG4sdCxQKXtpZighQ1tuXS5wYXRjaGVkKXtjcCgnZXh0ZW5zaW9uJywnYXV0aGVudGljYXRlJyk7UD1DW25dLnEucHVzaDsKICAgICAgICBDW25dLnEucHVzaD1mdW5jdGlvbihhKXtpZihhWzBdPT09J2F1dGhlbnRpY2F0ZScpe2lmKChvWydjb29raWUnXXx8JycpLmluZGV4T2YoJ19jcGF1dGhoaW50PScpPT09LTEmJgogICAgICAgICEoQ1snbG9jYWxTdG9yYWdlJ118fHt9KVsnX2NwdXNlciddJiZDLmxvY2F0aW9uLmhyZWYudG9Mb3dlckNhc2UoKS5pbmRleE9mKCdjcGF1dGhlbnRpY2F0ZWQnKT09PS0xKXsKICAgICAgICB0PXtpc0xvZ2dlZEluOmZ1bmN0aW9uKCl7cmV0dXJuIGZhbHNlO30saGFzVmFsaWRTdWJzY3JpcHRpb246ZnVuY3Rpb24oKXtyZXR1cm4gZmFsc2U7fX07CiAgICAgICAgKHR5cGVvZiBhWzFdPT09J2Z1bmN0aW9uJyYmYVsxXShudWxsLHQpKTtDW25dLmFmcD10cnVlO1AuYXBwbHkoQ1tuXS5xLFtbJ2F1dGhlbnRpY2F0ZScsbnVsbF1dKTsKICAgICAgICByZXR1cm4gdDt9fVAuYXBwbHkoQ1tuXS5xLFthXSk7fX19CiAgICAgICAgKHdpbmRvdyxkb2N1bWVudCwnY3AnLGZhbHNlKTsKCiAgICAgICAgY3AoJ2NyZWF0ZScsIGNwUHJvcGVydHlJZCwgewogICAgICAgIGJhc2VVcmw6IGNwQmFzZVVybAogICAgICAgIH0pOwoKICAgICAgICBjcCgncmVuZGVyJywgewogICAgICAgIG9uRnVsbENvbnNlbnQ6IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBjb25zb2xlLmxvZygnW0RFTU9dIG9uRnVsbENvbnNlbnQnKTsKICAgICAgICB9CiAgICAgICAgfSkKICAgIH0pKCkKPC9zY3JpcHQ+Cgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgZGF0YS1kZXNjcmlwdGlvbj0iY29udGVudHBhc3Mgc291cmNlcG9pbnQgZmFzdCBwYXRoIj4KKGZ1bmN0aW9uICgpIHsKICAgIGNwKCdhdXRoZW50aWNhdGUnLCBmdW5jdGlvbihlcnIsIHVzZXIpIHsKICAgICAgICBpZiAoZXJyIHx8ICghdXNlci5pc0xvZ2dlZEluKCkgJiYgIXVzZXIuaGFzVmFsaWRTdWJzY3JpcHRpb24oKSkpIHsKICAgICAgICAvLyBjb25zb2xlLmxvZygnW1NQQ1BdIFRha2luZyBmYXN0IHBhdGgnKTsKICAgICAgICAoZnVuY3Rpb24gc3BFeGVjTXNnKCkgewogICAgICAgICAgICBpZiAod2luZG93Ll9zcF8gJiYgd2luZG93Ll9zcF8uZXhlY3V0ZU1lc3NhZ2luZykgewogICAgICAgICAgICBpZiAoIXdpbmRvdy5fc3BfLmNvbmZpZy5pc1NQQSkgewogICAgICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKCdbU1BDUF0gU291cmNlcG9pbnQgbm90IGluIFNQQSBtb2RlIScpOwogICAgICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5fc3BfLnZlcnNpb24pIHsKICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdbU1BDUF0gU291cmNlcG9pbnQgYWxyZWFkeSBydW5uaW5nJyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnW1NQQ1BdIFN0YXJ0aW5nIFNvdXJjZXBvaW50Jyk7CiAgICAgICAgICAgICAgICB3aW5kb3cuX3NwXy5leGVjdXRlTWVzc2FnaW5nKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ1tTUENQXSBTb3VyY2Vwb2ludCBub3QgbG9hZGVkIHlldC4gUmV0cnlpbmcuJyk7CiAgICAgICAgICAgIHNldFRpbWVvdXQoc3BFeGVjTXNnLCAxMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9KSgpOwogICAgICAgIH0KICAgIH0pOwogICAgfSkoKTsKPC9zY3JpcHQ+CiAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCIgLz4KICAgICAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9mYXZpY29uLmljbyIgdHlwZT0iaW1hZ2UveC1pY29uIiAvPgogICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiBzaXplcz0iMTZ4MTYiIGhyZWY9Ii9mYXZpY29uLTE2eDE2LnBuZyI+CiAgICA8bGluayByZWw9InNob3J0Y3V0IGljb24iIHNpemVzPSIxOTJ4MTkyIiBocmVmPSIvYW5kcm9pZC1jaHJvbWUtMTkyeDE5Mi5wbmciPgogICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xLjAsIG1heGltdW0tc2NhbGU9Mi4wLCB1c2VyLXNjYWxhYmxlPW5vIiAvPgo8bWV0YSBuYW1lPSJyb2JvdHMiIGNvbnRlbnQ9Im5vaW5kZXgsIG5vZm9sbG93IiAvPgo8bWV0YSBuYW1lPSJrZXl3b3JkcyIgY29udGVudD0iU2NvdHQgQ2Fyc29uLE1hbmNoZXN0ZXIgQ2l0eSxQcmVtaWVyIExlYWd1ZSxFbmdsYW5kIiAvPgo8bWV0YSBuYW1lPSJkZXNjcmlwdGlvbiIgY29udGVudD0iUGxheWVyIHN0YXRzIG9mIFNjb3R0IENhcnNvbiAoTWFuY2hlc3RlciBDaXR5KSDinqQgR29hbHMg4p6kIEFzc2lzdHMg4p6kIE1hdGNoZXMgcGxheWVkIOKepCBBbGwgcGVyZm9ybWFuY2UgZGF0YSIgLz4KPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9ImFydGljbGUiIC8+CjxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaHR0cHM6Ly9pbWcuYS50cmFuc2Zlcm1hcmt0LnRlY2hub2xvZ3kvcG9ydHJhaXQvYmlnLzE0NTU1LTE2NjY3MzM2MjIuanBnP2xtPTEiIC8+CjxtZXRhIHByb3BlcnR5PSJvZzpkZXNjcmlwdGlvbiIgY29udGVudD0iIiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9IlNjb3R0IENhcnNvbiAtIFN0YXRzIDIyLzIzIiAvPgo8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvbS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3BsdXMvMD9zYWlzb249MjAyMiIgLz4KPGxpbmsgaHJlZmxhbmc9ImRlIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5kZS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImRlLUxVIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5kZS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImRlLUFUIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5hdC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImRlLUNIIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jaC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9InRyIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jb20udHIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJpdC1DSCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuaXQvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJpdCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuaXQvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJwbCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QucGwvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlbi1HQiIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY28udWsvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlbi1JRSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY28udWsvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcyIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1FUyIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1DTCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1WRSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1FQyIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlcy1DVSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZXMvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJubCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QubmwvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJwdCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QucHQvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJydSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3Qud29ybGQvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmci1DSCIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmciIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmci1DQSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmci1DSSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmci1MVSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJmci1CRSIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuZnIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJwdC1CUiIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY29tLmJyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZW4tVVMiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LnVzL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZW4tQ0EiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LnVzL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZW4tSU4iIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvLmluL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZW4tWkEiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvLnphL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0ieC1kZWZhdWx0IiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jb20vcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAiIC8+CjxsaW5rIGhyZWZsYW5nPSJlbiIgcmVsPSJhbHRlcm5hdGUiIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY29tL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0ibmwtQkUiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmJlL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0icm8iIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LnJvL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZWwtR1IiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmdyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0ia28tS1IiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvLmtyL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wIiAvPgo8bGluayBocmVmbGFuZz0iZXMtQVIiIHJlbD0iYWx0ZXJuYXRlIiBocmVmPSJodHRwczovL3d3dy50cmFuc2Zlcm1hcmt0LmNvbS5hci9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVzLU1YIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5teC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVzLUNPIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jby9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImVzLVBFIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5wZS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9Im1zIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5teS9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImphIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5qcC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgaHJlZmxhbmc9ImlkIiByZWw9ImFsdGVybmF0ZSIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jby5pZC9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMCIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9zdHlsZXNoZWV0cy9tZW51ZS5jc3M/bG09MTcxNzA3ODE3NSIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L3N0eWxlcy90bS1tYWluLm1pbi5jc3M/bG09MTcxNzA3ODE0NCIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9zdHlsZXNoZWV0cy9tYWluX2Rlc2t0b3AuY3NzP2xtPTE3MTcwNzgxNzUiIC8+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9jc3MvcHJpbnQuY3NzP19zbj0xP2xtPTE3MTcwNzgxNzUiIG1lZGlhPSJwcmludCIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9jaG9zZW4uY3NzP2xtPTE3MTcwNzgxNzUiIC8+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9jc3Mvc3R5bGVzaGVldHMvbWFpbi5jc3M/bG09MTcxNzA3ODE3NSIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L3N0eWxlcy90bS1wbGF5ZXItcHJvZmlsZS5taW4uY3NzP2xtPTE3MTcwNzgxNDQiIC8+CjxsaW5rIHJlbD0ic3R5bGVzaGVldCIgdHlwZT0idGV4dC9jc3MiIGhyZWY9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9jc3MvZ2VzcGllbHRlUG9zaXRpb25lbi5jc3M/bG09MTcxNzA3ODE3NSIgLz4KPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiB0eXBlPSJ0ZXh0L2NzcyIgaHJlZj0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Nzcy9zdGF0aXN0aWtlbi5jc3M/bG09MTcxNzA3ODE3NSIgLz4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL3ZlbmRvci9qcXVlcnkubWluLmpzP2xtPTE3MTcwNzgxNTYiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvYXNzZXRzL2I3YzU1NzFjZjg5NTc1NTNmOTVmNmQ5MDY5ZWFlZDY3L2pxdWVyeS5iYS1iYnEubWluLmpzP2xtPTE3MTcwNzgxNTgiPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvYWRzL3Rpc29vbWkuY29tLm1pbi5qcz9sbT0xNzE3MzQwNDAxIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL21haW4uanM/bG09MTcxNzA3ODE1NyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9qcy9jaG9zZW4uYWpheGFkZGl0aW9uLmpxdWVyeS5qcz9sbT0xNzE3MDc4MTU3Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL2Z1bmN0aW9ucy5qcz9sbT0xNzE3MDc4MTU3Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL21haW5fZGVza3RvcC5qcz9sbT0xNzE3MDc4MTU2Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL2Nob3Nlbi5qcXVlcnkuanM/bG09MTcxNzA3ODE1NyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4KLyo8IVtDREFUQVsqLwpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIEluaXRpYWxpemUgQWRzIG9uIGRvbWFpbiAuY29tIChzcGllbGVyL2xlaXN0dW5nc2RhdGVuKSIsICJiYWNrZ3JvdW5kOiAjMjgyODI4OyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gVGlzb29taSBpcyBhY3RpdmUgLT4gYWRkIFRpc29vbWkgc2NyaXB0IiwgImJhY2tncm91bmQ6ICMyODI4Mjg7IGNvbG9yOiAjYmFkYTU1IikKY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBSZW5kZXIgc2xvdCByZWN0YW5nbGUxICgvNTg3NzgxNjRkX3NpZGVfMSkgZm9yIGdvb2dsZSIsICJiYWNrZ3JvdW5kOiAjMjgyODI4OyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gV3JhcCBhZCBjb250YWluZXIgd2l0aCBUaXNvb21pIGZvciBmb3JtYXQgcmVjdGFuZ2xlMSIsICJiYWNrZ3JvdW5kOiAjMjgyODI4OyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gUmVuZGVyIHNsb3QgcmVjdGFuZ2xlMiAoLzU4Nzc4MTY0ZF9zaWRlXzIpIGZvciBnb29nbGUiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIFdyYXAgYWQgY29udGFpbmVyIHdpdGggVGlzb29taSBmb3IgZm9ybWF0IHJlY3RhbmdsZTIiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIFJlbmRlciBzbG90IHNreXNjcmFwZXIgKC81ODc3ODE2NGRfcmlnaHRfMSkgZm9yIGdvb2dsZSIsICJiYWNrZ3JvdW5kOiAjMjgyODI4OyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gV3JhcCBhZCBjb250YWluZXIgd2l0aCBUaXNvb21pIGZvciBmb3JtYXQgc2t5c2NyYXBlciIsICJiYWNrZ3JvdW5kOiAjMjgyODI4OyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gUmVuZGVyIHNsb3QgYmlsbGJvYXJkICgvNTg3NzgxNjRkX3RvcF8xKSBmb3IgZ29vZ2xlIiwgImJhY2tncm91bmQ6ICMyODI4Mjg7IGNvbG9yOiAjYmFkYTU1IikKY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBXcmFwIGFkIGNvbnRhaW5lciB3aXRoIFRpc29vbWkgZm9yIGZvcm1hdCBiaWxsYm9hcmQiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIFJlbmRlciBzbG90IGZ1bGxzaXplX2NvbnRlbnRhZCAoLzU4Nzc4MTY0ZF9ib3R0b21fMSkgZm9yIGdvb2dsZSIsICJiYWNrZ3JvdW5kOiAjMjgyODI4OyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gV3JhcCBhZCBjb250YWluZXIgd2l0aCBUaXNvb21pIGZvciBmb3JtYXQgZnVsbHNpemVfY29udGVudGFkIiwgImJhY2tncm91bmQ6ICMyODI4Mjg7IGNvbG9yOiAjYmFkYTU1IikKICAgIHZhciBvZGRzU2VydmUgPSBmdW5jdGlvbihwbGFjZW1lbnQsY29tcGV0aXRpb24sbWF0Y2gsbm9kZSkgewogICAgICAgIGlmICghbm9kZSl7CiAgICAgICAgICAgIHZhciBzPWRvY3VtZW50LnJlYWR5U3RhdGU9PT0nbG9hZGluZyc/ZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpOltdOwogICAgICAgICAgICBub2RlPXMubGVuZ3RoP3Nbcy5sZW5ndGgtMV0ucGFyZW50Tm9kZTpudWxsOwogICAgICAgIH0KICAgICAgICBvZGRzU2VydmUucXVldWUucHVzaCh7Y29udGVudFVuaXRJZDpwbGFjZW1lbnQsY29tcGV0aXRpb246Y29tcGV0aXRpb24sbWF0Y2g6bWF0Y2gsbm9kZTpub2RlfSk7CiAgICB9CiAgICAKICAgIG9kZHNTZXJ2ZS5vbkluaXQ9ZnVuY3Rpb24oY2FsbGJhY2tzKXsKICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5fX3RjZmFwaSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICBfX3RjZmFwaSgnYWRkRXZlbnRMaXN0ZW5lcicsIDIsIGZ1bmN0aW9uKHRjZGF0YSwgc3VjY2VzcykgewogICAgICAgICAgICAgICAgbGV0IHRjZjIwY29tcGF0aWJsZVN0cmluZzsKICAgICAgICAgICAgICAgIGlmKHN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICBpZiAodGNkYXRhLmV2ZW50U3RhdHVzID09PSAndXNlcmFjdGlvbmNvbXBsZXRlJykgewogICAgICAgICAgICAgICAgICAgICAgICB0Y2YyMGNvbXBhdGlibGVTdHJpbmcgPSB0Y2RhdGEudGNTdHJpbmc7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Y2RhdGEuZXZlbnRTdGF0dXMgPT09ICd0Y2xvYWRlZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGNmMjBjb21wYXRpYmxlU3RyaW5nID0gdGNkYXRhLnRjU3RyaW5nOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc2V0R2Rwck9wdGlvbnMoewogICAgICAgICAgICAgICAgICAgICAgICBnZHByOjEsCiAgICAgICAgICAgICAgICAgICAgICAgIGdkcHJfcGQ6MSwKICAgICAgICAgICAgICAgICAgICAgICAgZ2Rwcl9jb25zZW50OnRjZjIwY29tcGF0aWJsZVN0cmluZywKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCdFMjogX190Y2ZhcGkgbm90IGZvdW5kJyk7CiAgICAgICAgfQogICAgfTsKICAgIG9kZHNTZXJ2ZS5vcHRpb25zPXtnZHByX3dhaXQ6dHJ1ZX07CiAgICBvZGRzU2VydmUucXVldWU9W107CmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gQWRkIGFkc2xvdCBjb25maWd1cmF0aW9uIGZvciByZWN0YW5nbGUxIHwgcmVjdGFuZ2xlMiB8IHNreXNjcmFwZXIgfCBiaWxsYm9hcmQgfCBmdWxsc2l6ZV9jb250ZW50YWQiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIEFkc2xvdHMgd2l0aG91dCBjb25maWd1cmF0aW9uOiBza3lzY3JhcGVyLWxlZnQtYm91bmQgfCBza3lzY3JhcGVyYnRmIHwgcmljaG1lZGlhIiwgImJhY2tncm91bmQ6ICMyODI4Mjg7IGNvbG9yOiAjYmFkYTU1IikKY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBSZWdpc3RlciBzbG90cyB3aXRoIEpTIHZlbmRvciBsaWIiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQpQV1QgPSB7fTsKd2luZG93Lmdvb2dsZXRhZyA9IHdpbmRvdy5nb29nbGV0YWcgfHwge2NtZDogW119Owpnb29nbGV0YWcuY21kLnB1c2goKCkgPT4gewogIHZhciBzbG90ID0gZ29vZ2xldGFnLmRlZmluZU91dE9mUGFnZVNsb3QoIi81ODc3ODE2NC90cmFuc2Zlcm1hcmt0LmNvbS90cmFuc2Zlcm1hcmt0LmNvbV9kX2ludGVyc3RpdGlhbCIsIGdvb2dsZXRhZy5lbnVtcy5PdXRPZlBhZ2VGb3JtYXQuSU5URVJTVElUSUFMKTsKICBpZiAoc2xvdCkgeyBzbG90LmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKX0KICB3aW5kb3cuYWRfZF90b3BfMSA9IGdvb2dsZXRhZy5kZWZpbmVTbG90KAogICAgIi81ODc3ODE2NC90cmFuc2Zlcm1hcmt0LmNvbS90cmFuc2Zlcm1hcmt0LmNvbV9kX3RvcF8xIiwKICAgIFtbMTAyNCwgMjUwXSwgWzk3MCwgMjUwXSwgWzk4MCwgOTBdLCBbOTcwLCA5MF0sIFs5NjAsIDkwXSwgWzk1MCwgOTBdLCBbODAwLCAyNTBdLCBbNzUwLCAxMDBdLCBbNzUwLCAyMDBdLCBbNzI4LCA5MF0sICJmbHVpZCJdLAogICAgImRfdG9wXzEiCiAgKSAKICAuc2V0VGFyZ2V0aW5nKCJsb2FkaW5nIiwgIm5vcm1hbCIpCiAgLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsKICB3aW5kb3cuYWRfZF9zaWRlXzEgPSBnb29nbGV0YWcuZGVmaW5lU2xvdCgKICAgICIvNTg3NzgxNjQvdHJhbnNmZXJtYXJrdC5jb20vdHJhbnNmZXJtYXJrdC5jb21fZF9zaWRlXzEiLAogICAgW1szMzYsIDI4MF0sIFszMDAsIDI1MF0sIFsyNTAsIDI1MF0sICJmbHVpZCJdLAogICAgImRfc2lkZV8xIgogICkgCiAgLnNldFRhcmdldGluZygibG9hZGluZyIsICJub3JtYWwiKQogIC5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7CiAgd2luZG93LmFkX2Rfc2lkZV8yID0gZ29vZ2xldGFnLmRlZmluZVNsb3QoCiAgICAiLzU4Nzc4MTY0L3RyYW5zZmVybWFya3QuY29tL3RyYW5zZmVybWFya3QuY29tX2Rfc2lkZV8yIiwKICAgIFtbMzM2LCAyODBdLCBbMzAwLCAyNTBdLCBbMjUwLCAyNTBdLCAiZmx1aWQiXSwKICAgICJkX3NpZGVfMiIKICApIAogIC5zZXRUYXJnZXRpbmcoImxvYWRpbmciLCAibGF6eSIpCiAgLmFkZFNlcnZpY2UoZ29vZ2xldGFnLnB1YmFkcygpKTsKICB3aW5kb3cuYWRfZF9yaWdodF8xID0gZ29vZ2xldGFnLmRlZmluZVNsb3QoCiAgICAiLzU4Nzc4MTY0L3RyYW5zZmVybWFya3QuY29tL3RyYW5zZmVybWFya3QuY29tX2RfcmlnaHRfMSIsCiAgICBbWzMwMCwgNjAwXSwgWzMzNiwgMjgwXSwgWzMyMCwgNDgwXSwgWzMwMCwgMjUwXSwgWzI0MCwgNDAwXSwgWzIwMCwgNjAwXSwgWzE2MCwgNjAwXSwgWzEyMCwgNjAwXV0sCiAgICAiZF9yaWdodF8xIgogICkgCiAgLnNldFRhcmdldGluZygibG9hZGluZyIsICJub3JtYWwiKQogIC5hZGRTZXJ2aWNlKGdvb2dsZXRhZy5wdWJhZHMoKSk7CiAgd2luZG93LmFkX2RfYm90dG9tXzEgPSBnb29nbGV0YWcuZGVmaW5lU2xvdCgKICAgICIvNTg3NzgxNjQvdHJhbnNmZXJtYXJrdC5jb20vdHJhbnNmZXJtYXJrdC5jb21fZF9ib3R0b21fMSIsCiAgICBbWzEwMjQsIDI1MF0sIFs5NzAsIDI1MF0sIFs5ODAsIDkwXSwgWzk3MCwgOTBdLCBbOTYwLCA5MF0sIFs5NTAsIDkwXSwgWzgwMCwgMjUwXSwgWzc1MCwgMTAwXSwgWzc1MCwgMjAwXSwgWzcyOCwgOTBdLCAiZmx1aWQiXSwKICAgICJkX2JvdHRvbV8xIgogICkgCiAgLnNldFRhcmdldGluZygibG9hZGluZyIsICJsYXp5IikKICAuYWRkU2VydmljZShnb29nbGV0YWcucHViYWRzKCkpOwogIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRDZW50ZXJpbmcodHJ1ZSk7CiAgZ29vZ2xldGFnLnB1YmFkcygpLmRpc2FibGVJbml0aWFsTG9hZCgpOwogIGdvb2dsZXRhZy5wdWJhZHMoKS5zZXRUYXJnZXRpbmcoImNnMSIsIFsic3BpZWxlciJdKTsKICBnb29nbGV0YWcucHViYWRzKCkuc2V0VGFyZ2V0aW5nKCJVUkwiLCBbInd3dy50cmFuc2Zlcm1hcmt0LmNvbSJdKTsKICBnb29nbGV0YWcuZW5hYmxlU2VydmljZXMoKTsKICBnb29nbGV0YWcuZGlzcGxheShzbG90KTsKfSk7CiFmdW5jdGlvbih0LCQsZSxzLGksYSxvKXskW3RdfHwoJFt0XT17aW5pdDpmdW5jdGlvbigpe18oImkiLGFyZ3VtZW50cyl9LGZldGNoQmlkczpmdW5jdGlvbigpe18oImYiLGFyZ3VtZW50cyl9LHNldERpc3BsYXlCaWRzOmZ1bmN0aW9uKCl7fSx0YXJnZXRpbmdLZXlzOmZ1bmN0aW9uKCl7cmV0dXJuW119LF9ROltdfSwoYT1lLmNyZWF0ZUVsZW1lbnQocykpLmFzeW5jPSEwLGEuc3JjPWksKG89ZS5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSkucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxvKSk7ZnVuY3Rpb24gXyhlLHMpeyRbdF0uX1EucHVzaChbZSxzXSl9fSgiYXBzdGFnIix3aW5kb3csZG9jdW1lbnQsInNjcmlwdCIsIi8vYy5hbWF6b24tYWRzeXN0ZW0uY29tL2FheDIvYXBzdGFnLmpzIiksYXBzdGFnLmluaXQoe3B1YklEOiI1MTM0IixhZFNlcnZlcjoiZ29vZ2xldGFnIn0pO2NvbnN0IGluaXRBbWF6b25BZEJpZHM9KHQsJCk9PnsoJCYmInRjbG9hZGVkIj09PXQuZXZlbnRTdGF0dXN8fCJ1c2VyYWN0aW9uY29tcGxldGUiPT09dC5ldmVudFN0YXR1cykmJmFwc3RhZy5mZXRjaEJpZHMoCiAge3Nsb3RzOlsKICAgIHsKICAgICAgc2xvdE5hbWU6Ii81ODc3ODE2NC90cmFuc2Zlcm1hcmt0LmNvbS90cmFuc2Zlcm1hcmt0LmNvbV9kX3RvcF8xIiwKICAgICAgc2xvdElEOiJkX3RvcF8xIiwKICAgICAgc2l6ZXM6W1sxMDI0LCAyNTBdLCBbOTcwLCAyNTBdLCBbOTgwLCA5MF0sIFs5NzAsIDkwXSwgWzk2MCwgOTBdLCBbOTUwLCA5MF0sIFs4MDAsIDI1MF0sIFs3NTAsIDEwMF0sIFs3NTAsIDIwMF0sIFs3MjgsIDkwXV0sCiAgICB9LAogICAgewogICAgICBzbG90TmFtZToiLzU4Nzc4MTY0L3RyYW5zZmVybWFya3QuY29tL3RyYW5zZmVybWFya3QuY29tX2Rfc2lkZV8xIiwKICAgICAgc2xvdElEOiJkX3NpZGVfMSIsCiAgICAgIHNpemVzOltbMzM2LCAyODBdLCBbMzAwLCAyNTBdLCBbMjUwLCAyNTBdXSwKICAgIH0sCiAgICB7CiAgICAgIHNsb3ROYW1lOiIvNTg3NzgxNjQvdHJhbnNmZXJtYXJrdC5jb20vdHJhbnNmZXJtYXJrdC5jb21fZF9zaWRlXzIiLAogICAgICBzbG90SUQ6ImRfc2lkZV8yIiwKICAgICAgc2l6ZXM6W1szMzYsIDI4MF0sIFszMDAsIDI1MF0sIFsyNTAsIDI1MF1dLAogICAgfSwKICAgIHsKICAgICAgc2xvdE5hbWU6Ii81ODc3ODE2NC90cmFuc2Zlcm1hcmt0LmNvbS90cmFuc2Zlcm1hcmt0LmNvbV9kX3JpZ2h0XzEiLAogICAgICBzbG90SUQ6ImRfcmlnaHRfMSIsCiAgICAgIHNpemVzOltbMzAwLCA2MDBdLCBbMzM2LCAyODBdLCBbMzIwLCA0ODBdLCBbMzAwLCAyNTBdLCBbMjQwLCA0MDBdLCBbMjAwLCA2MDBdLCBbMTYwLCA2MDBdLCBbMTIwLCA2MDBdXSwKICAgIH0sCiAgICB7CiAgICAgIHNsb3ROYW1lOiIvNTg3NzgxNjQvdHJhbnNmZXJtYXJrdC5jb20vdHJhbnNmZXJtYXJrdC5jb21fZF9ib3R0b21fMSIsCiAgICAgIHNsb3RJRDoiZF9ib3R0b21fMSIsCiAgICAgIHNpemVzOltbMTAyNCwgMjUwXSwgWzk3MCwgMjUwXSwgWzk4MCwgOTBdLCBbOTcwLCA5MF0sIFs5NjAsIDkwXSwgWzk1MCwgOTBdLCBbODAwLCAyNTBdLCBbNzUwLCAxMDBdLCBbNzUwLCAyMDBdLCBbNzI4LCA5MF1dLAogICAgfSwKICBdLAogIHRpbWVvdXQ6MmUzfSwKICBmdW5jdGlvbih0KXtnb29nbGV0YWcuY21kLnB1c2goZnVuY3Rpb24oKXthcHN0YWcuc2V0RGlzcGxheUJpZHMoKX0pfSl9OwoiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7Cgpkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCJET01Db250ZW50TG9hZGVkIiwgKCkgPT4gewogIGNvbnN0IGNsb3NlQnV0dG9uU3RpY2t5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoInN0aWNreS1hZC1jbG9zZS1idXR0b24iKTsKICBpZihjbG9zZUJ1dHRvblN0aWNreSkgewogICAgY2xvc2VCdXR0b25TdGlja3kuYWRkRXZlbnRMaXN0ZW5lcigidG91Y2hzdGFydCIsIGZ1bmN0aW9uKCkgewogICAgICB0bUV2ZW50KCJ3ZXJidW5nIiwgImNsb3NlIiwgImdvb2dsZS1zZXR1cC1tb2JpbGUtc3RpY2t5LWNsb3NlLWJ1dHRvbiIpOwogICAgICB2YXIgZWxlbSA9IHRoaXMucGFyZW50Tm9kZTsKICAgICAgcmV0dXJuIGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbGVtKTsKICAgIH0sIHtwYXNzaXZlOiB0cnVlfSk7CiAgfQp9KTsKCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gUmVuZGVyIGFkIHNsb3RzIGpzIGZvciBnb29nbGUiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQpjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIHNraXAgZXh0ZXJuYWwgc2NyaXB0IGh0dHBzOi8vd2lkZ2V0cy5vdXRicmFpbi5jb20vb3V0YnJhaW4uanMgZm9yIG91dGJyYWluIG9uIHdldHRiZXdlcmJlX3Byb2ZpbGVfc3BpZWxlciIsICJiYWNrZ3JvdW5kOiAjMjgyODI4OyBjb2xvcjogI2JhZGE1NSIpCmNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gQWRkZWQgZXh0ZXJuYWwgYWQgc2NyaXB0KHMpIGZvciB2ZW5kb3IgZ29vZ2xlIiwgImJhY2tncm91bmQ6ICMyODI4Mjg7IGNvbG9yOiAjYmFkYTU1IikKLypdXT4qLwo8L3NjcmlwdD4KPHRpdGxlPlNjb3R0IENhcnNvbiAtIFN0YXRzIDIyLzIzIHwgVHJhbnNmZXJtYXJrdDwvdGl0bGU+CiAgICA8bGluayByZWw9ImFwcGxlLXRvdWNoLWljb24tcHJlY29tcG9zZWQiIGhyZWY9Ii9hcHBsZS10b3VjaC1pY29uLTE1MngxNTIucG5nIj4KICAgIAo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgIHRtRGF0YSA9IHsKICAgICAgIGxvZ2dlZEluIDogIjAiLAogICAgICAgdG1UcmFmZmljOiAiMCIsCiAgIH07Cjwvc2NyaXB0Pgo8c2NyaXB0PgogICAgY29uc3QgdXJsUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyh3aW5kb3cubG9jYXRpb24uc2VhcmNoKTsKICAgIGxldCB1dG1WYXJzID0gewogICAgICAgIGVWYXIxOiB1cmxQYXJhbXMuZ2V0KCd1dG1fY2FtcGFpZ24nKSwKICAgICAgICBlVmFyNjogdXJsUGFyYW1zLmdldCgndXRtX3NvdXJjZScpLAogICAgICAgIGVWYXIyNDogdXJsUGFyYW1zLmdldCgndXRtX21lZGl1bScpCiAgICB9OwogICAgT2JqZWN0LmtleXModXRtVmFycykuZm9yRWFjaCgoaykgPT4gdXRtVmFyc1trXSA9PSBudWxsICYmIGRlbGV0ZSB1dG1WYXJzW2tdKTsKCiAgICB3aW5kb3cudG1BbmFseXRpY3NEYXRhTGF5ZXIgPSB3aW5kb3cudG1BbmFseXRpY3NEYXRhTGF5ZXIgfHwgW107CiAgICB3aW5kb3cudG1BbmFseXRpY3MgPSB7CiAgICAgICAgZGltZW5zaW9uczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZVZhcjI3OiAnU2NvdHQgQ2Fyc29uJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVWYXIzOiAnTWFuY2hlc3RlciBDaXR5JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVWYXI0OiAnUHJlbWllciBMZWFndWUnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZVZhcjU6ICdFbmdsYW5kJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVWYXIxMDogJ2h0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY29tL3Njb3R0LWNhcnNvbi9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1JywKICAgICAgICAgICAgICAgICAgICAgICAgLi4udXRtVmFycwogICAgICAgIH0sCiAgICAgICAgcHJvcGVydGllczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDE6ICdmYWxzZScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wMjogJ3N0YXRpc3RpaycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wMzogJ3NwaWVsZXInLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDQ6ICdsZWlzdHVuZ3NkYXRlbicsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wNTogJzE0NTU1JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3AxMTogJzE0NTU1JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3AxNDogJ3N0YXRpc3Rpa19zcGllbGVyX2xlaXN0dW5nc2RhdGVuXzE0NTU1JywKICAgICAgICAgICAgICAgICAgICAgICAgcHJvcDk6IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSwKICAgICAgICAgICAgcHJvcDEwOiB3aW5kb3cubG9jYXRpb24uaHJlZiwKICAgICAgICB9LAogICAgICAgIHBhZ2VEZXRhaWxzOiB7CiAgICAgICAgICAgIHBhZ2VWaWV3czogewogICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXNFcnJvclBhZ2U6ICdmYWxzZScsCiAgICAgICAgICAgIGlzSG9tZXBhZ2U6ICdmYWxzZScsCiAgICAgICAgICAgIG5hbWU6ICdTY290dCBDYXJzb24gLSBTdGF0cyAyMi8yMyB8IFRyYW5zZmVybWFya3QnLAogICAgICAgICAgICBVUkw6IHdpbmRvdy5sb2NhdGlvbi5ocmVmCiAgICAgICAgfSwKICAgIH07CgogICAgZnVuY3Rpb24gdG1FdmVudChjYXRlZ29yeSwgYWN0aW9uLCBsYWJlbCkgewogICAgaWYgKHR5cGVvZiBndGFnID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgZ3RhZygnZXZlbnQnLAogICAgICAgICAgICBhY3Rpb24sCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICdldmVudF9jYXRlZ29yeSc6IGNhdGVnb3J5LAogICAgICAgICAgICAgICAgJ2V2ZW50X2xhYmVsJzogbGFiZWwKICAgICAgICAgICAgfQogICAgICAgICk7CiAgICB9CgogICAgdG1BbmFseXRpY3NEYXRhTGF5ZXIucHVzaCh7CiAgICAgICAgZXZlbnQ6ICd0bUV2ZW50JywKICAgICAgICB0bUV2ZW50OiB7CiAgICAgICAgICAgIGN1c3RvbURpbWVuc2lvbnM6IHsKICAgICAgICAgICAgICAgIGVWYXJzOiB7CiAgICAgICAgICAgICAgICAgICAgLi4udG1BbmFseXRpY3MuZGltZW5zaW9ucwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHByb3BzOiB7CiAgICAgICAgICAgICAgICAgICAgcHJvcDY6IGNhdGVnb3J5LAogICAgICAgICAgICAgICAgICAgIHByb3A3OiBhY3Rpb24sCiAgICAgICAgICAgICAgICAgICAgcHJvcDg6IGxhYmVsLAogICAgICAgICAgICAgICAgICAgIC4uLnRtQW5hbHl0aWNzLnByb3BlcnRpZXMKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXZlbnQxdG8xMDA6IHsKICAgICAgICAgICAgICAgIGV2ZW50NzogewogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXZlbnQ4OiBudWxsLAogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXNzaW9uOiB7CiAgICAgICAgICAgICAgICB3ZWI6IHsKICAgICAgICAgICAgICAgICAgICB3ZWJJbnRlcmFjdGlvbjogewogICAgICAgICAgICAgICAgICAgICAgICBsaW5rQ2xpY2tzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB3ZWJQYWdlRGV0YWlsczogewogICAgICAgICAgICAgICAgICAgICAgICAuLi50bUFuYWx5dGljcy5wYWdlRGV0YWlscywKICAgICAgICAgICAgICAgICAgICAgICAgLi4uewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFnZVZpZXdzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0pOwogICAgdG1BbmFseXRpY3NEYXRhTGF5ZXIucHVzaChmdW5jdGlvbiAoZGwpIHsKICAgICAgICBjb25zdCBzdGF0ZSA9IGRsLmdldFN0YXRlKCk7CiAgICB9KTsKfQogICAgZnVuY3Rpb24gdG1UcmFja2luZ0FuZEFkcygpIHsKICAgIGlmICh0eXBlb2YgZ3RhZyA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgIGd0YWcoImV2ZW50IiwgInBhZ2VfdmlldyIsIHsKICAgICAgICAgICAgcGFnZV9wYXRoOiAiL2pzQ29udGVudCIgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUKICAgICAgICB9KTsKICAgIH0KCiAgICB0bUFuYWx5dGljc0RhdGFMYXllci5wdXNoKHsKICAgICAgICBldmVudDogJ3RtVHJhY2tpbmdBbmRBZHMnLAogICAgICAgIHRtVHJhY2tpbmdBbmRBZHM6IHsKICAgICAgICAgICAgY3VzdG9tRGltZW5zaW9uczogewogICAgICAgICAgICAgICAgZVZhcnM6IHRtQW5hbHl0aWNzLmRpbWVuc2lvbnMsCiAgICAgICAgICAgICAgICBwcm9wczogdG1BbmFseXRpY3MucHJvcGVydGllcwogICAgICAgICAgICB9LAogICAgICAgICAgICBldmVudDF0bzEwMDogewogICAgICAgICAgICAgICAgZXZlbnQ3OiBudWxsLAogICAgICAgICAgICAgICAgZXZlbnQ4OiB7CiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDEKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2Vzc2lvbjogewogICAgICAgICAgICAgICAgd2ViOiB7CiAgICAgICAgICAgICAgICAgICAgd2ViSW50ZXJhY3Rpb246IHsKICAgICAgICAgICAgICAgICAgICAgICAgbGlua0NsaWNrczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG51bGwKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgd2ViUGFnZURldGFpbHM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgLi4udG1BbmFseXRpY3MucGFnZURldGFpbHMsCiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VWaWV3czogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKICAgIHRtQW5hbHl0aWNzRGF0YUxheWVyLnB1c2goZnVuY3Rpb24gKGRsKSB7CiAgICAgICAgY29uc3Qgc3RhdGUgPSBkbC5nZXRTdGF0ZSgpOwogICAgfSk7Cn0KICAgIGZ1bmN0aW9uIHRtVGltaW5nKHZhbHVlLCBuYW1lLCBldmVudF9jYXRlZ29yeSwgZXZlbnRfbGFiZWwpIHsKICAgIGNvbnNvbGUubG9nKCd0bVRpbWluZycsIHZhbHVlLCBuYW1lLCBldmVudF9jYXRlZ29yeSwgZXZlbnRfbGFiZWwpOwp9CgogICAgICAgICAgICAhZnVuY3Rpb24oZSxhLG4sdCl7dmFyIGk9ZS5oZWFkO2lmKGkpewogICAgICAgIGlmIChhKSByZXR1cm47CiAgICAgICAgdmFyIG89ZS5jcmVhdGVFbGVtZW50KCJzdHlsZSIpOwogICAgICAgIG8uaWQ9ImFsbG95LXByZWhpZGluZyIsby5pbm5lclRleHQ9bixpLmFwcGVuZENoaWxkKG8pLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtvLnBhcmVudE5vZGUmJm8ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChvKX0sdCl9fQogICAgKGRvY3VtZW50LCBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLmluZGV4T2YoImFkb2JlX2F1dGhvcmluZ19lbmFibGVkIikgIT09IC0xLCAiLnBlcnNvbmFsaXphdGlvbi1jb250YWluZXIgeyBvcGFjaXR5OiAwICFpbXBvcnRhbnQgfSIsIDMwMDApOwoKICAgICAgICAgICAgIWZ1bmN0aW9uKG4sbyl7by5mb3JFYWNoKGZ1bmN0aW9uKG8pe25bb118fCgobi5fX2FsbG95TlM9bi5fX2FsbG95TlN8fAogICAgICAgIFtdKS5wdXNoKG8pLG5bb109ZnVuY3Rpb24oKXt2YXIgdT1hcmd1bWVudHM7cmV0dXJuIG5ldyBQcm9taXNlKAogICAgICAgIGZ1bmN0aW9uKGksbCl7bltvXS5xLnB1c2goW2ksbCx1XSl9KX0sbltvXS5xPVtdKX0pfQogICAgKHdpbmRvdyxbImFsbG95Il0pOwo8L3NjcmlwdD4KPHRtLWNvbnNlbnQKICAgIHR5cGU9ImFkb2JlIgogICAgbm8tY2hlY2tib3gKICAgIGVtYmVkPSJQSE5qY21sd2RDQmhjM2x1WXlCemNtTTlJbWgwZEhCek9pOHZZWE56WlhSekxtRmtiMkpsWkhSdExtTnZiUzgzWTJGa1kyRTVOV1JrT1dFdlkyUTBZV0k0T0RSa01qTXhMMnhoZFc1amFDMHdNVEkzTW1JME1EQmpOalV1YldsdUxtcHpJajQ4TDNOamNtbHdkRDQ9Ij4KPC90bS1jb25zZW50PgoKICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC8vYWRzL2Fkcy5qcyI+PC9zY3JpcHQ+CiAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgd2luZG93LnRtR2FJZCA9ICJVQS0zODE2MjA0LTEzIjsKICAgICAgICBmdW5jdGlvbiBzZW5kSXZ3RGF0YSgpIHt9CgoKICAgIDwvc2NyaXB0PgogICAgICAgICAgICA8bGluayByZWw9ImNhbm9uaWNhbCIgaHJlZj0iaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jb20vc2NvdHQtY2Fyc29uL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUiPiAgICA8L2hlYWQ+Cgo8Ym9keSBjbGFzcz0iIiBpdGVtc2NvcGUgaXRlbXR5cGU9Imh0dHA6Ly9zY2hlbWEub3JnL1dlYlBhZ2UiIGRhdGEtdG0tdGxkPSJjb20iIGRhdGEtY21wLWxheWVyLWlkPSI5MTAxNjQiPgogICAgCiAgICAgICAgICAgICAgICA8dG0tbGFuZ3VhZ2UtaGludD48L3RtLWxhbmd1YWdlLWhpbnQ+CiAgICAgICAgPGRpdiBpZD0ibWFpbiI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3ZXJidW5nLXNreXNjcmFwZXItbGVmdC1ib3VuZC1jb250YWluZXIiPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0id2VyYnVuZy1za3lzY3JhcGVyLWNvbnRhaW5lciI+CiAgICAgICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4vL1JXR3p6dFYoInNreXNjcmFwZXIiKTwvc2NyaXB0Pgo8ZGl2IGNsYXNzPSJ3ZXJidW5nIGFkLXBsYWNlbWVudC1ub3RlIHdlcmJ1bmctc2t5c2NyYXBlciIgZGF0YS1hZC1wbGFjZW1lbnQtbm90ZT0iQWR2ZXJ0aXNlbWVudCI+CiAgPGRpdiBpZD0iZF9yaWdodF8xIiBzdHlsZT0ibWluLXdpZHRoOiAzMDBweDsgbWluLWhlaWdodDogNjAwcHg7Ij4KICAgIDxzY3JpcHQ+CiAgICAgIGdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7CiAgICAgICAgZ29vZ2xldGFnLmRpc3BsYXkoImRfcmlnaHRfMSIpOwogICAgICAgIGxldCBoYXNfZF9yaWdodF8xX3JlZnJlc2hlZCA9IGZhbHNlOwogICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4gewogICAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHsKICAgICAgICAgICAgaWYoZW50cnkuaXNJbnRlcnNlY3RpbmcgPT09IHRydWUgJiYgIWhhc19kX3JpZ2h0XzFfcmVmcmVzaGVkKSB7CiAgICAgICAgICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKCgpID0+IHsKICAgICAgICAgICAgICAgIGNvbnNvbGUuaW5mbygiJWMgW1RNLUFEc10gSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgcmVuZGVycyBkX3JpZ2h0XzEiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQogICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnJlZnJlc2goW2FkX2RfcmlnaHRfMV0pOwogICAgICAgICAgICAgICAgaGFzX2RfcmlnaHRfMV9yZWZyZXNoZWQgPSB0cnVlOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9LCB7IHRocmVzaG9sZDogWzBdLCByb290TWFyZ2luOiAiMHB4IDBweCAwcHggMHB4IiB9KTsKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjZF9yaWdodF8xIikpOwogICAgICB9KTsKICAgIDwvc2NyaXB0PgogIDwvZGl2Pgo8L2Rpdj4KCjxzcGFuIGNsYXNzPSJSV0d6enRWX2VuZCI+PC9zcGFuPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJ3ZXJidW5nLXNreXNjcmFwZXJidGYtY29udGFpbmVyIj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICA8aGVhZGVyIGNsYXNzPSJ0bS1oZWFkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idG0taGVhZGVyX19ib3ggIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgY2xhc3M9Imljb24tbG9nbyIgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9oZWFkL3RyYW5zZmVybWFya3RfbG9nby5zdmciIGhlaWdodD0iNjIiIHdpZHRoPSIxNTYiIHRpdGxlPSJUcmFuc2Zlcm1hcmt0IiBhbHQ9IlRyYW5zZmVybWFya3QiPgogICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dG0tZG9tYWluc3dpdGNoZXIgb3Blbi1saXN0PSJmYWxzZSIgdGxkPSJjb20iPjwvdG0tZG9tYWluc3dpdGNoZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idG0taGVhZGVyX19zb2NpYWwtYm94Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL1RyYW5zZmVybWFya3QuZ2xvYmFsIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImhlYWRlcl9fc29jaWFsLWxpbmsiIG9uY2xpY2s9InRtRXZlbnQoJ1NNLUljb25zX0hlYWRlcicsJ2NsaWNrJywnRmFjZWJvb2snKTsKIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvc29jaWFsTWVkaWEvZmJfaWNvbl9ob3Zlci5zdmciIHdpZHRoPSIyMCIgaGVpZ2h0PSIyMCIgY2xhc3M9ImhlYWRlcl9faWNvbiI+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL1RNdWtfbmV3cyIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJoZWFkZXJfX3NvY2lhbC1saW5rIGhlYWRlcl9fc29jaWFsLWxpbmstLXR3aXR0ZXIiIG9uY2xpY2s9InRtRXZlbnQoJ1NNLUljb25zX0hlYWRlcicsJ2NsaWNrJywnVHdpdHRlcicpOwoiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy9zb2NpYWxNZWRpYS90d2l0dGVyLnN2ZyIgd2lkdGg9IjIwIiBoZWlnaHQ9IjIwIiBjbGFzcz0iaGVhZGVyX19pY29uIGhlYWRlcl9faWNvbi0tdHdpdHRlciI+CiAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwOi8vaW5zdGFncmFtLmNvbS90cmFuc2Zlcm1hcmt0X29mZmljaWFsIiB0YXJnZXQ9Il9ibGFuayIgY2xhc3M9ImhlYWRlcl9fc29jaWFsLWxpbmsiIG9uY2xpY2s9InRtRXZlbnQoJ1NNLUljb25zX0hlYWRlcicsJ2NsaWNrJywnSW5zdGFncmFtJyk7CiI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3NvY2lhbE1lZGlhL2luc3RhZ3JhbV9pY29uX2hvdmVyLnN2ZyIgd2lkdGg9IjIwIiBoZWlnaHQ9IjIwIiBjbGFzcz0iaGVhZGVyX19pY29uIj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9pbnRlcm4vcnNzZ3VpZGUiIHRhcmdldD0iX2JsYW5rIiBjbGFzcz0iaGVhZGVyX19zb2NpYWwtbGluayIgb25jbGljaz0idG1FdmVudCgnU00tSWNvbnNfSGVhZGVyJywnY2xpY2snLCdSU1MnKTsKIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvc29jaWFsTWVkaWEvcnNzX2ljb25faG92ZXIuc3ZnIiB3aWR0aD0iMjAiIGhlaWdodD0iMjAiIGNsYXNzPSJoZWFkZXJfX2ljb24iPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly93d3cudGlrdG9rLmNvbS9AdHJhbnNmZXJtYXJrdCIgdGFyZ2V0PSJfYmxhbmsiIGNsYXNzPSJoZWFkZXJfX3NvY2lhbC1saW5rIiBvbmNsaWNrPSJ0bUV2ZW50KCdTTS1JY29uc19IZWFkZXInLCdjbGljaycsJ1Rpa3RvaycpOwoiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy90aWt0b2tSZWJydXNoLnN2ZyIgd2lkdGg9IjIwIiBoZWlnaHQ9IjIwIiBjbGFzcz0iaGVhZGVyX19pY29uIj4KICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRtLWhlYWRlcl9faW5wdXQtd3JhcHBlciAiIGlkPSJzY2huZWxsc3VjaGUtcGxhdHoiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZvcm0gbmFtZT0ic2NobmVsbHN1Y2hlIiBpZD0ic2NobmVsbHN1Y2hlIiBjbGFzcz0idG0taGVhZGVyX19mb3JtIiBhY3Rpb249Ii9zY2huZWxsc3VjaGUvZXJnZWJuaXMvc2NobmVsbHN1Y2hlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgbmFtZT0icXVlcnkiIGNsYXNzPSJ0bS1oZWFkZXJfX2lucHV0LS1zZWFyY2gtZmllbGQiIG9uQ2xpY2s9IiIgcGxhY2Vob2xkZXI9IkVudGVyIHlvdXIgc2VhcmNoIHRlcm0iIGF1dG9jb3JyZWN0PSJvZmYiIHNwZWxsY2hlY2s9ImZhbHNlIiB2YWx1ZT0iIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIHZhbHVlPSIiIGNsYXNzPSJ0bS1oZWFkZXJfX2lucHV0LS1zZWFyY2gtc2VuZCIgYWx0PSJzZWFyY2giIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGV0YWlsc3VjaGUvc3BpZWxlcmRldGFpbC9zdWNoZSIgdGl0bGU9InRvIGRldGFpbGVkIHBsYXllciBzZWFyY2giIGlkPSJkZXRhaWxzdWNoZS1oZWFkIiBjbGFzcz0idG0taGVhZGVyX19zZWFyY2gtZGV0YWlsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvc2VhcmNoX2ljb25fcGx1c19ibHVlX3doaXRlLnN2ZyIgYWx0PSJzZWFyY2giIGNsYXNzPSJ0bS1oZWFkZXJfX2ljb24tZGV0YWlsLXNlYXJjaCIgaGVpZ2h0PSIyNiIgd2lkdGg9IjI2Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAKICAgICAgICAgICAgPG5hdiBjbGFzcz0ibWFpbi1uYXZiYXIgbmF2aWhhbHRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0ibWFpbi1uYXZiYXJfX2NvbnRhaW5lciBtZWdhbWVudV9kYXJrX2JhciBtZWdhbWVudV9kYXJrIiBpdGVtc2NvcGU9Iml0ZW1zY29wZSIgaXRlbXR5cGU9Imh0dHA6Ly93d3cuc2NoZW1hLm9yZy9TaXRlTmF2aWdhdGlvbkVsZW1lbnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii8iIGNsYXNzPSJzdGlja3ktbG9nbyBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iVHJhbnNmZXJtYXJrdCIgY2xhc3M9InRtX3N2ZyI+PC9zcGFuPgogICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIAogICAgPGxpIGNsYXNzPSJtYWluLW5hdmJhcl9fbGlzdCIgZGF0YS1uYXYtZ3JvdXA9Im5ld3MiPgogICAgICAgICAgICAgICAgPHNwYW4KICAgICAgICAgICAgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0LXRpdGxlIHRtLW1haW4tbmF2LWVsIgogICAgICAgICAgICBvbkNsaWNrPSJ0bUV2ZW50KCdOZXdzJywnY2xpY2snLCdtZW51Jyk7CiIKICAgICAgICAgICAgPgogICAgICAgICAgICBOZXdzICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbi1uYXZiYXJfX2Ryb3AtZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy90bV9zcGlubmVyX2ludmVydGVkLm1pbi5zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgY2xhc3M9Im5hdmlnYXRpb24tbG9hZGluZy1zcGlubmVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8bGkgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0IiBkYXRhLW5hdi1ncm91cD0idHJhbnNmZXJzIj4KICAgICAgICAgICAgICAgIDxzcGFuCiAgICAgICAgICAgIGNsYXNzPSJtYWluLW5hdmJhcl9fbGlzdC10aXRsZSB0bS1tYWluLW5hdi1lbCIKICAgICAgICAgICAgb25DbGljaz0idG1FdmVudCgnVHJhbnNmZXJzICYgR2Vyw7xjaHRlJywnY2xpY2snLCdtZW51Jyk7CiIKICAgICAgICAgICAgPgogICAgICAgICAgICBUcmFuc2ZlcnMgJiBydW1vdXJzICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbi1uYXZiYXJfX2Ryb3AtZG93biI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc2kuYWthbWFpemVkLm5ldC9pY29ucy90bV9zcGlubmVyX2ludmVydGVkLm1pbi5zdmciIHdpZHRoPSI0MCIgaGVpZ2h0PSI0MCIgY2xhc3M9Im5hdmlnYXRpb24tbG9hZGluZy1zcGlubmVyIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgCiAgICA8bGkgY2xhc3M9Im1haW4tbmF2YmFyX19saXN0IiBkYXRhLW5hdi1ncm91cD0ibWFya3R3ZXJ0ZSI+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QtdGl0bGUgdG0tbWFpbi1uYXYtZWwiCiAgICAgICAgICAgIG9uQ2xpY2s9InRtRXZlbnQoJ01hcmt0d2VydGUnLCdjbGljaycsJ21lbnUnKTsKIgogICAgICAgICAgICA+CiAgICAgICAgICAgIE1hcmtldCB2YWx1ZXMgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLW5hdmJhcl9fZHJvcC1kb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3RtX3NwaW5uZXJfaW52ZXJ0ZWQubWluLnN2ZyIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBjbGFzcz0ibmF2aWdhdGlvbi1sb2FkaW5nLXNwaW5uZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDxsaSBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QgYWt0aXYiIGRhdGEtbmF2LWdyb3VwPSJ3ZXR0YmV3ZXJiZSI+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QtdGl0bGUgdG0tbWFpbi1uYXYtZWwiCiAgICAgICAgICAgIG9uQ2xpY2s9InRtRXZlbnQoJ1dldHRiZXdlcmJlJywnY2xpY2snLCdtZW51Jyk7CiIKICAgICAgICAgICAgPgogICAgICAgICAgICBDb21wZXRpdGlvbnMgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLW5hdmJhcl9fZHJvcC1kb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3RtX3NwaW5uZXJfaW52ZXJ0ZWQubWluLnN2ZyIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBjbGFzcz0ibmF2aWdhdGlvbi1sb2FkaW5nLXNwaW5uZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDxsaSBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QiIGRhdGEtbmF2LWdyb3VwPSJmb3JlbiI+CiAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QtdGl0bGUgdG0tbWFpbi1uYXYtZWwiCiAgICAgICAgICAgIGhyZWY9Ii91ZWJlcnNpY2h0L2luZGV4L2ZvcnVtL2NvbSIKICAgICAgICAgICAgb25DbGljaz0idG1FdmVudCgnRm9yZW4nLCdjbGljaycsJ21lbnUnKTsKIgogICAgICAgICAgICA+CiAgICAgICAgICAgIEZvcnVtcyAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4tbmF2YmFyX19kcm9wLWRvd24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvaWNvbnMvdG1fc3Bpbm5lcl9pbnZlcnRlZC5taW4uc3ZnIiB3aWR0aD0iNDAiIGhlaWdodD0iNDAiIGNsYXNzPSJuYXZpZ2F0aW9uLWxvYWRpbmctc3Bpbm5lciIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIAogICAgPGxpIGNsYXNzPSJtYWluLW5hdmJhcl9fbGlzdCIgZGF0YS1uYXYtZ3JvdXA9Im1laW50bSI+CiAgICAgICAgICAgICAgICA8c3BhbgogICAgICAgICAgICBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QtdGl0bGUgdG0tbWFpbi1uYXYtZWwiCiAgICAgICAgICAgIG9uQ2xpY2s9InRtRXZlbnQoJ01laW5UTScsJ2NsaWNrJywnbWVudScpOwoiCiAgICAgICAgICAgID4KICAgICAgICAgICAgTXkgVE0gICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluLW5hdmJhcl9fZHJvcC1kb3duIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2ljb25zL3RtX3NwaW5uZXJfaW52ZXJ0ZWQubWluLnN2ZyIgd2lkdGg9IjQwIiBoZWlnaHQ9IjQwIiBjbGFzcz0ibmF2aWdhdGlvbi1sb2FkaW5nLXNwaW5uZXIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgIDxsaSBjbGFzcz0ibWFpbi1uYXZiYXJfX2xpc3QiID4KICAgICAgICAgICAgICAgIDxhCiAgICAgICAgICAgIGNsYXNzPSJtYWluLW5hdmJhcl9fbGlzdC10aXRsZSB0bS1tYWluLW5hdi1lbCBsaXZlLW5hdmlsaW5rIgogICAgICAgICAgICBocmVmPSIvdGlja2VyL2luZGV4L2xpdmUiCiAgICAgICAgICAgIG9uQ2xpY2s9InRtRXZlbnQoJ0xpdmUnLCdjbGljaycsJ21lbnUnKTsKIgogICAgICAgICAgICA+CiAgICAgICAgICAgIExpdmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRtLWxpdmUtbWF0Y2gtY291bnRlciBhdXRvLXJlcXVlc3Q9InRydWUiIGNvbnRlbnQ9J1siTGl2ZSBtYWNoZXMiLCAiTGl2ZSBtYXRjaGVzIl0nPjwvdG0tbGl2ZS1tYXRjaC1jb3VudGVyPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9saT4KPC91bD4KCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIDxmb3JtIG5hbWU9InNjaG5lbGxzdWNoZSIgaWQ9InNjaG5lbGxzdWNoZS1zdGlja3kiIGNsYXNzPSJub2Nsb3NlIHN0aWNreS1zdWNoZSIgYWN0aW9uPSIvc2NobmVsbHN1Y2hlL2VyZ2VibmlzL3NjaG5lbGxzdWNoZSI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIG5hbWU9InF1ZXJ5IiBjbGFzcz0iaGVhZGVyLXN1Y2hlIiBvbkNsaWNrPSIiIHBsYWNlaG9sZGVyPSJFbnRlciB5b3VyIHNlYXJjaCB0ZXJtIiAvPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJpbWFnZSIgY2xhc3M9ImhlYWRlci1zdWNoZS1hYnNjaGlja2VuIiBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC8vaW1hZ2VzL3N1Y2hpY29uLnBuZyIgYWx0PSJzZWFyY2giIC8+CiAgICAgICAgICAgICAgICA8L2Zvcm0+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIvZGV0YWlsc3VjaGUvc3BpZWxlcmRldGFpbC9zdWNoZSIgdGl0bGU9InRvIGRldGFpbGVkIHBsYXllciBzZWFyY2giIGlkPSJkZXRhaWxzdWNoZS1oZWFkIiBjbGFzcz0iaGVhZGVyLXN1Y2hlLWRldGFpbHN1Y2hlIj4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iaWNvbi1kZXRhaWxzdWNoZSI+PC9zcGFuPgogICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iYXJyb3ctdXAteHkiIGhyZWY9IiMiPgogICAgICAgICAgICAgICAgICAgICAgICA8c3ZnIHN0eWxlPSJmaWxsOiB3aGl0ZTsgd2lkdGg6IDIwcHg7IGhlaWdodDogMjBweDsiIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IiB3aWR0aD0iMTAwcHgiIGhlaWdodD0iMTAwcHgiIHZpZXdCb3g9IjAgMCAxMDAgMTAwIiBlbmFibGUtYmFja2dyb3VuZD0ibmV3IDAgMCAxMDAgMTAwIiB4bWw6c3BhY2U9InByZXNlcnZlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRoIGQ9Ik03OC4wMTYsNDkuMTMyTDUxLjk2MSwxMi43MTRjLTAuNDcxLTAuNjYtMS4yMzMtMS4wNDktMi4wNDMtMS4wNTFjLTAuMDA2LDAtMC4wMDYsMC0wLjAwNiwwCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy0wLjgxNSwwLjAwMi0xLjU3NSwwLjM5Ni0yLjA0OCwxLjA1OUwyMS45NzcsNDkuMTRjLTAuNTQ2LDAuNzY3LTAuNjE2LDEuNzc2LTAuMTgzLDIuNjEyYzAuNDI2LDAuODM1LDEuMjkyLDEuMzYxLDIuMjM2LDEuMzYxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaDEyLjE4M2wtMC4wMDEsMzIuNzA5YzAsMS4zOSwxLjEyNSwyLjUxNSwyLjUxNiwyLjUxNWwyMi41NDEtMC4wMDFjMS4zODksMC4wMDEsMi41MTUtMS4xMjQsMi41MTYtMi41MTdsMC0zMi43MDVoMTIuMTg3CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzAuOTQsMCwxLjgwMy0wLjUzLDIuMjM3LTEuMzY3Qzc4LjY0MSw1MC45MTEsNzguNTY2LDQ5LjksNzguMDE2LDQ5LjEzMnoiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2c+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3ZnPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRtLWxvZ2luICIgaWQ9ImxvZ2luIiBvbkNsaWNrPSJ0bUV2ZW50KCdsb2dpbicsJ2NsaWNrJywnc2lnbl9pbl9idXR0b24nKTsKIj4KICAgIDxzdmcgdmVyc2lvbj0iMS4xIiBpZD0iTGF5ZXJfMSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB4bWxuczp4bGluaz0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIgeD0iMHB4IiB5PSIwcHgiCiAgICAgZmlsbD0iI0ZGRiIgd2lkdGg9IjEwMHB4IiBoZWlnaHQ9IjEwMHB4IiB2aWV3Qm94PSIwIDAgMTAwIDEwMCIgZW5hYmxlLWJhY2tncm91bmQ9Im5ldyAwIDAgMTAwIDEwMCIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSIgY2xhc3M9InRtLWxvZ2luX19pbWFnZSI+CiAgICAgICAgPGc+CiAgICAgICAgICAgIDxwYXRoIGQ9Ik04MC4xNjEsNjAuNDQxbC0xNS42Ni03LjQ3bC02LjYyMi0zLjE1OWMyLjg5Mi0xLjgyMiw1LjI0MS00LjYzNCw2Ljc3OC04LjAyMmMxLjIyLTIuNjksMS45NDYtNS43MzQsMS45NDYtOC45OQogICAgICAgICAgICAgICAgYzAtMS44MjctMC4yOS0zLjU2Mi0wLjY5NC01LjIzNkM2My45NCwxOS40NTMsNTcuNjA1LDEzLjQ3Nyw1MCwxMy40NzdjLTcuNDYxLDAtMTMuNzAxLDUuNzYzLTE1Ljc5MiwxMy42NDUKICAgICAgICAgICAgICAgIGMtMC40ODIsMS44MDgtMC44MTUsMy42ODgtMC44MTUsNS42OGMwLDMuNDU5LDAuODA4LDYuNjg0LDIuMTgxLDkuNDg5YzEuNTg3LDMuMjU0LDMuOTQsNS45MzcsNi44MDQsNy42NjJsLTYuMzQyLDIuOTUzCiAgICAgICAgICAgICAgICBsLTE2LjE2OCw3LjUzYy0xLjQwNCwwLjY1OC0yLjMyNywyLjI0Mi0yLjMyNyw0LjAxMXYxNS4wNjJ2Mi43MDNjMCwyLjM4MSwxLjY1OSw0LjMxMiwzLjcwOCw0LjMxMmg1Ny41MDUKICAgICAgICAgICAgICAgIGMyLjA0OCwwLDMuNzA4LTEuOTMsMy43MDgtNC4zMTJ2LTIuNzAzVjY0LjQ0NkM4Mi40Niw2Mi42ODMsODEuNTUyLDYxLjExNCw4MC4xNjEsNjAuNDQxeiIvPgogICAgICAgIDwvZz4KICAgIDwvc3ZnPgogICAgPHNwYW4gY2xhc3M9InRtLWxvZ2luX19jdGEiPgogICAgICAgIExvZyBpbiAgICA8L3NwYW4+CjwvZGl2PgogICAgICAgICAgICA8L25hdj4KCiAgICAgICAgICAgIAogICAgICAgICAgICA8ZGl2IGNsYXNzPSJxdWljay1zZWxlY3Qtd3JhcHBlciI+CiAgICA8ZGl2IGlkPSJxdWlja3NlbGVjdC1za2VsZXRvbiIgY2xhc3M9InNzYyIgc3R5bGU9ImhlaWdodDogNDBweDsiPgogICAgICAgIDxkaXYgY2xhc3M9InNzYy13cmFwcGVyIGZsZXgiIHN0eWxlPSJoZWlnaHQ6IDEwMCU7IHBhZGRpbmc6IDAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzc2Mtc3F1YXJlIHF1aWNrc2VsZWN0LWVsZW1lbnQiIHN0eWxlPSJ3aWR0aDogNDBweDsiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzc2Mtc3F1YXJlIHF1aWNrc2VsZWN0LWVsZW1lbnQgcXVpY2tzZWxlY3Qtc2VsZWN0b3IiIHN0eWxlPSJ3aWR0aDogMTcxLjA2cHg7Ij48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ic3NjLXNxdWFyZSBxdWlja3NlbGVjdC1lbGVtZW50IHF1aWNrc2VsZWN0LXNlbGVjdG9yIiBzdHlsZT0id2lkdGg6IDE3MC44NHB4OyI+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InNzYy1zcXVhcmUgcXVpY2tzZWxlY3QtZWxlbWVudCBxdWlja3NlbGVjdC1zZWxlY3RvciIgc3R5bGU9IndpZHRoOiAxMzguMDNweDsiPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJzc2Mtc3F1YXJlIHF1aWNrc2VsZWN0LWVsZW1lbnQgcXVpY2tzZWxlY3Qtc2VsZWN0b3IiIHN0eWxlPSJ3aWR0aDogMTQxLjVweDsiPjwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CgogICAgPHRtLXF1aWNrLXNlbGVjdC1iYXIKICAgICAgICBkZWZhdWx0LWNvdW50cnk9IjE4OSIKICAgICAgICBkZWZhdWx0LWNvbXBldGl0aW9uPSJHQjEiCiAgICAgICAgZGVmYXVsdC1jbHViPSIyODEiCiAgICAgICAgZGVmYXVsdC1wbGF5ZXI9IjE0NTU1IgogICAgICAgIGRyb3Bkb3duLXZpc2libGU9IiIKICAgICAgICB0cmFuc2xhdGlvbnM9J3smcXVvdDtob21lJnF1b3Q7OiZxdW90O0hvbWUmcXVvdDssJnF1b3Q7Y291bnRyeSZxdW90OzomcXVvdDtDb3VudHJ5JnF1b3Q7LCZxdW90O2NvbXBldGl0aW9uJnF1b3Q7OiZxdW90O0NvbXBldGl0aW9uJnF1b3Q7LCZxdW90O2NsdWImcXVvdDs6JnF1b3Q7Q2x1YiZxdW90OywmcXVvdDtwbGF5ZXImcXVvdDs6JnF1b3Q7UGxheWVyJnF1b3Q7LCZxdW90O2F0dGFjayZxdW90OzomcXVvdDtTdHJpa2VyJnF1b3Q7LCZxdW90O21pZGZpZWxkJnF1b3Q7OiZxdW90O01pZGZpZWxkZXImcXVvdDssJnF1b3Q7ZGVmZW5zZSZxdW90OzomcXVvdDtEZWZlbmRlciZxdW90OywmcXVvdDtnb2Fsa2VlcGVyJnF1b3Q7OiZxdW90O0dvYWxrZWVwZXImcXVvdDt9JwogICAgICAgID4KICAgIDwvdG0tcXVpY2stc2VsZWN0LWJhcj4KPC9kaXY+CgoKICAgICAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPi8vUldHenp0VigiYmlsbGJvYXJkIik8L3NjcmlwdD4KPGRpdiBjbGFzcz0id2VyYnVuZyBhZC1wbGFjZW1lbnQtbm90ZSB3ZXJidW5nLWJpbGxib2FyZCIgZGF0YS1hZC1wbGFjZW1lbnQtbm90ZT0iQWR2ZXJ0aXNlbWVudCI+CiAgPGRpdiBpZD0iZF90b3BfMSIgc3R5bGU9Im1pbi13aWR0aDogMTAyNHB4OyBtaW4taGVpZ2h0OiAyNTBweDsiPgogICAgPHNjcmlwdD4KICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKCgpID0+IHsKICAgICAgICBnb29nbGV0YWcuZGlzcGxheSgiZF90b3BfMSIpOwogICAgICAgIGxldCBoYXNfZF90b3BfMV9yZWZyZXNoZWQgPSBmYWxzZTsKICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHsKICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7CiAgICAgICAgICAgIGlmKGVudHJ5LmlzSW50ZXJzZWN0aW5nID09PSB0cnVlICYmICFoYXNfZF90b3BfMV9yZWZyZXNoZWQpIHsKICAgICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goKCkgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBJbnRlcnNlY3Rpb25PYnNlcnZlciByZW5kZXJzIGRfdG9wXzEiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQogICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnJlZnJlc2goW2FkX2RfdG9wXzFdKTsKICAgICAgICAgICAgICAgIGhhc19kX3RvcF8xX3JlZnJlc2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0sIHsgdGhyZXNob2xkOiBbMF0sIHJvb3RNYXJnaW46ICIwcHggMHB4IDBweCAwcHgiIH0pOwogICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNkX3RvcF8xIikpOwogICAgICB9KTsKICAgIDwvc2NyaXB0PgogIDwvZGl2Pgo8L2Rpdj4KCjxzcGFuIGNsYXNzPSJSV0d6enRWX2VuZCI+PC9zcGFuPgogICAgICAgIDwvaGVhZGVyPgogICAgICAgIDxtYWluPgoKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgPGRpdiBpZD0ibW9kYWwtMSIgY2xhc3M9Im1vZGFsIG1pY3JvbW9kYWwtc2xpZGUiIGFyaWEtaGlkZGVuPSJ0cnVlIiB0YWJpbmRleD0iMSI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWxfX292ZXJsYXkiIHRhYmluZGV4PSItMSIgZGF0YS1jdXN0b20tY2xvc2U+CiAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgIGNsYXNzPSJtb2RhbF9fY29udGFpbmVyIgogICAgICAgICAgICAgICAgcm9sZT0iZGlhbG9nIgogICAgICAgICAgICAgICAgYXJpYS1tb2RhbD0idHJ1ZSIKICAgICAgICAgICAgICAgIGFyaWEtbGFiZWxsZWRieT0ibW9kYWwtMS10aXRsZSIKICAgICAgICAgICAgICAgIGRhdGEtY3VzdG9tLWNsb3NlCiAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8aGVhZGVyIGNsYXNzPSJtb2RhbF9faGVhZGVyIj4KICAgICAgICAgICAgICAgICAgICA8YnV0dG9uCiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJtb2RhbF9fY2xvc2UgbW9kYWxfX2Nsb3NlLS1wcm9maWxlLWltZyIKICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UgbW9kYWwiCiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtY3VzdG9tLWNsb3NlCiAgICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj4KICAgICAgICAgICAgICAgIDwvaGVhZGVyPgogICAgICAgICAgICAgICAgPGRpdiBpZD0ibW9kYWwtMS1jb250ZW50IiBjbGFzcz0ibW9kYWxfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9J2h0dHBzOi8vaW1nLmEudHJhbnNmZXJtYXJrdC50ZWNobm9sb2d5L3BvcnRyYWl0L2JpZy8xNDU1NS0xNjY2NzMzNjIyLmpwZz9sbT0xJyBhbHQ9J1Njb3R0IENhcnNvbicgdGl0bGU9J1Njb3R0IENhcnNvbicgZGF0YS1jdXN0b20tY2xvc2UgbG9hZGluZz0ibGF6eSI+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCgo8aGVhZGVyIGNsYXNzPSJkYXRhLWhlYWRlciIgaXRlbXNjb3BlIGl0ZW10eXBlPSJodHRwczovL3NjaGVtYS5vcmcvUGVyc29uIj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhLWhlYWRlcl9faGVhZGxpbmUtY29udGFpbmVyIj4KICAgICAgICAgICAgPGgxIGNsYXNzPSJkYXRhLWhlYWRlcl9faGVhZGxpbmUtd3JhcHBlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fc2hpcnQtbnVtYmVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgIzMzICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2NvdHQgPHN0cm9uZz5DYXJzb248L3N0cm9uZz4gICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19iYWRnZS1jb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Njb3R0LWNhcnNvbi9lcmZvbGdlL3NwaWVsZXIvMTQ1NTUiIHRpdGxlPSJDaGFtcGlvbnMgTGVhZ3VlIHdpbm5lciIgY2xhc3M9ImRhdGEtaGVhZGVyX19zdWNjZXNzLWRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZXJmb2xnZS9oZWFkZXIvNC5wbmc/bG09MTUyMDYwNjk5OSIgdGl0bGU9IkNoYW1waW9ucyBMZWFndWUgd2lubmVyIiBhbHQ9IkNoYW1waW9ucyBMZWFndWUgd2lubmVyIiBjbGFzcz0iIiAvPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fc3VjY2Vzcy1udW1iZXIiPjI8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2NvdHQtY2Fyc29uL2VyZm9sZ2Uvc3BpZWxlci8xNDU1NSIgdGl0bGU9IkZJRkEgQ2x1YiBXb3JsZCBDdXAgd2lubmVyIiBjbGFzcz0iZGF0YS1oZWFkZXJfX3N1Y2Nlc3MtZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9lcmZvbGdlL2hlYWRlci8zMTgucG5nP2xtPTE1MjA2MDY5OTkiIHRpdGxlPSJGSUZBIENsdWIgV29ybGQgQ3VwIHdpbm5lciIgYWx0PSJGSUZBIENsdWIgV29ybGQgQ3VwIHdpbm5lciIgY2xhc3M9IiIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX3N1Y2Nlc3MtbnVtYmVyIj4xPC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Njb3R0LWNhcnNvbi9lcmZvbGdlL3NwaWVsZXIvMTQ1NTUiIHRpdGxlPSJFbmdsaXNoIENoYW1waW9uIiBjbGFzcz0iZGF0YS1oZWFkZXJfX3N1Y2Nlc3MtZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9lcmZvbGdlL2hlYWRlci8xMi5wbmc/bG09MTUyMDYwNjk5NyIgdGl0bGU9IkVuZ2xpc2ggQ2hhbXBpb24iIGFsdD0iRW5nbGlzaCBDaGFtcGlvbiIgY2xhc3M9IiIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX3N1Y2Nlc3MtbnVtYmVyIj40PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3Njb3R0LWNhcnNvbi9lcmZvbGdlL3NwaWVsZXIvMTQ1NTUiIHRpdGxlPSJVZWZhIFN1cGVyY3VwIHdpbm5lciIgY2xhc3M9ImRhdGEtaGVhZGVyX19zdWNjZXNzLWRhdGEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZXJmb2xnZS9oZWFkZXIvMzU0LnBuZz9sbT0xNTIwNjA2OTk5IiB0aXRsZT0iVWVmYSBTdXBlcmN1cCB3aW5uZXIiIGFsdD0iVWVmYSBTdXBlcmN1cCB3aW5uZXIiIGNsYXNzPSIiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19zdWNjZXNzLW51bWJlciI+Mjwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zY290dC1jYXJzb24vZXJmb2xnZS9zcGllbGVyLzE0NTU1IiB0aXRsZT0iRW5nbGlzaCBGQSBDdXAgd2lubmVyIiBjbGFzcz0iZGF0YS1oZWFkZXJfX3N1Y2Nlc3MtZGF0YSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9lcmZvbGdlL2hlYWRlci8yOS5wbmc/bG09MTUyMDYwNjk5OSIgdGl0bGU9IkVuZ2xpc2ggRkEgQ3VwIHdpbm5lciIgYWx0PSJFbmdsaXNoIEZBIEN1cCB3aW5uZXIiIGNsYXNzPSIiIC8+ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19zdWNjZXNzLW51bWJlciI+MTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvc2NvdHQtY2Fyc29uL2VyZm9sZ2Uvc3BpZWxlci8xNDU1NSIgdGl0bGU9IkFsbCB0aXRsZXMgJiB2aWN0b3JpZXMiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhLWhlYWRlcl9fc3VjY2Vzcy1kYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fc3VjY2Vzcy1tb3JlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iL2ltYWdlcy9pY29ucy9tZWhyX2VyZm9sZ2UucG5nIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhLWhlYWRlcl9fYm94LS1iaWciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3N0YXJ0c2VpdGUvdmVyZWluLzI4MSIgY2xhc3M9ImRhdGEtaGVhZGVyX19ib3hfX2NsdWItbGluayI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmNzZXQ9IgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vbm9ybXF1YWQvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIDF4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vaG9tZXBhZ2VXYXBwZW4xNTB4MTUwLzI4MS5wbmc/bG09MTQ2NzM1NjMzMSAyeAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgaGVpZ2h0PSIxMDAiIHdpZHRoPSIxMDAiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZGF0YS1oZWFkZXJfX2NsdWItaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19jbHViIiBpdGVtcHJvcD0iYWZmaWxpYXRpb24iPgogICAgICAgICAgICAgICAgICAgICAgICA8YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3N0YXJ0c2VpdGUvdmVyZWluLzI4MSI+TWFuIENpdHk8L2E+ICAgICAgICAgICAgICAgICAgICA8L3NwYW4+PGJyIC8+ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGVhZ3VlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImRhdGEtaGVhZGVyX19sZWFndWUtbGluayIgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3N0YXJ0c2VpdGUvd2V0dGJld2VyYi9HQjEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby92ZXJ5dGlueS9nYjEucG5nP2xtPTE1MjExMDQ2NTYiIHRpdGxlPSJQcmVtaWVyIExlYWd1ZSIgYWx0PSJQcmVtaWVyIExlYWd1ZSIgY2xhc3M9IiIgLz5QcmVtaWVyIExlYWd1ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2xhYmVsIj5MZWFndWUgbGV2ZWw6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3RpbnkvMTg5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iRW5nbGFuZCIgYWx0PSJFbmdsYW5kIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz5GaXJzdCBUaWVyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+Sm9pbmVkOiA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2NvbnRlbnQiPkp1bCAyMCwgMjAyMTwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2xhYmVsIj5Db250cmFjdCBleHBpcmVzOiA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2NvbnRlbnQiPkp1biAzMCwgMjAyNTwvc3Bhbj48L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhLWhlYWRlcl9fcHJvZmlsZS1jb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtdHJpZ2dlciIgZGF0YS1jdXN0b20tb3Blbj0ibW9kYWwtMSIgaWQ9ImZvdG9hdXN3YWhsT2VmZm5lbiIgc3R5bGU9ImN1cnNvcjpwb2ludGVyIiBvbmNsaWNrPSJ0bUV2ZW50KCdzcGllbGVycHJvZmlsJywnY2xpY2snLCdwcm9maWxiaWxkJyk7Ij4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vaW1nLmEudHJhbnNmZXJtYXJrdC50ZWNobm9sb2d5L3BvcnRyYWl0L2hlYWRlci8xNDU1NS0xNjY2NzMzNjIyLmpwZz9sbT0xIiB0aXRsZT0iU2NvdHQgQ2Fyc29uIiBhbHQ9IlNjb3R0IENhcnNvbiIgY2xhc3M9ImRhdGEtaGVhZGVyX19wcm9maWxlLWltYWdlIiBoZWlnaHQ9IjE4MSIgd2lkdGg9IjEzOSIgLz48ZGl2IGNsYXNzPSJiaWxkcXVlbGxlIj48c3BhbiB0aXRsZT0iSU1BR08iPklNQUdPPC9zcGFuPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0ibW9kYWwtdHJpZ2dlci1pY29uIj4rPC9zcGFuPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19pbmZvLWJveCAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJkYXRhLWhlYWRlcl9fZGV0YWlscyI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImRhdGEtaGVhZGVyX19pdGVtcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGFiZWwiPkRhdGUgb2YgYmlydGgvQWdlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gaXRlbXByb3A9ImJpcnRoRGF0ZSIgY2xhc3M9ImRhdGEtaGVhZGVyX19jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXAgMywgMTk4NSAoMzgpICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+UGxhY2Ugb2YgYmlydGg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3RpbnkvMTg5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iRW5nbGFuZCIgYWx0PSJFbmdsYW5kIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCIgaXRlbXByb3A9ImJpcnRoUGxhY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGl0ZWhhdmVuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+Q2l0aXplbnNoaXA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0ibmF0aW9uYWxpdHkiIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3RpbnkvMTg5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iRW5nbGFuZCIgYWx0PSJFbmdsYW5kIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEVuZ2xhbmQgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhLWhlYWRlcl9faXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YS1oZWFkZXJfX2xhYmVsIj5IZWlnaHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpdGVtcHJvcD0iaGVpZ2h0IiBjbGFzcz0iZGF0YS1oZWFkZXJfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEsODggbSAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGFiZWwiPlBvc2l0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2NvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgR29hbGtlZXBlciAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+QWdlbnQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0iZGF0YS1oZWFkZXJfX2NvbnRlbnQgZGF0YS1oZWFkZXJfX2NvbnRlbnQtLXZlcnRpY2FsLWFsaWduZWQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBvbmNsaWNrPSJ0bUV2ZW50KCZxdW90O3NwaWVsZXJwcm9maWwmcXVvdDssICZxdW90O2NsaWNrJnF1b3Q7LCAmcXVvdDtiZXJhdGVyLWhlYWRlci1wcmVtaXVtJnF1b3Q7KSIgaHJlZj0iL3dhc3Nlcm1hbi9iZXJhdGVyZmlybWEvYmVyYXRlci80NDAiPldhc3Nlcm1hbjwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBjbGFzcz0iZGF0YS1oZWFkZXJfX3ZlcmlmaWVkLWxvZ28iIHNyYz0iaHR0cHM6Ly90bXNpLmFrYW1haXplZC5uZXQvYmVyYXRlci92ZXJpZmllZF9wcmVtaXVtX21pbmlmaWVkLnBuZyIgYWx0PSJ2ZXJpZmllZCIgdGl0bGU9InZlcmlmaWVkIiBoZWlnaHQ9IjEzIiB3aWR0aD0iMTMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJkYXRhLWhlYWRlcl9faXRlbXMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBmb3I9IiIgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1lciBJbnRlcm5hdGlvbmFsOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3RpbnkvMTg5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iRW5nbGFuZCIgYWx0PSJFbmdsYW5kIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiBmbGFnZ2UiIC8+PGEgdGl0bGU9IkVuZ2xhbmQiIGhyZWY9Ii9lbmdsYW5kL3N0YXJ0c2VpdGUvdmVyZWluLzMyOTkiPkVuZ2xhbmQ8L2E+ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iZGF0YS1oZWFkZXJfX2xhYmVsIj5DYXBzL0dvYWxzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCBkYXRhLWhlYWRlcl9fY29udGVudC0taGlnaGxpZ2h0IiBocmVmPSIvc2NvdHQtY2Fyc29uL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NTU1L3ZlcmVpbl9pZC8zMjk5Ij40ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+LwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJkYXRhLWhlYWRlcl9fY29udGVudCBkYXRhLWhlYWRlcl9fY29udGVudC0taGlnaGxpZ2h0IiBocmVmPSIvc2NvdHQtY2Fyc29uL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NTU1L3ZlcmVpbl9pZC8zMjk5Ij4wICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImRhdGEtaGVhZGVyX19sYWJlbCB0aGVtZS1idXR0b24iPgogICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIAogICAgCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImRhdGEtaGVhZGVyX19ib3gtLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zY290dC1jYXJzb24vbWFya3R3ZXJ0dmVybGF1Zi9zcGllbGVyLzE0NTU1IiBjbGFzcz0iZGF0YS1oZWFkZXJfX21hcmtldC12YWx1ZS13cmFwcGVyIj48c3BhbiBjbGFzcz0id2FlaHJ1bmciPuKCrDwvc3Bhbj4yMDA8c3BhbiBjbGFzcz0id2FlaHJ1bmciPms8L3NwYW4+ICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJkYXRhLWhlYWRlcl9fbGFzdC11cGRhdGUiPkxhc3QgdXBkYXRlOiBNYXkgMjcsIDIwMjQ8L3A+PC9hPgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgICAgIAogICAgPC9oZWFkZXI+CjxhIGhyZWY9Imh0dHBzOi8vd3d3LnRyYW5zZmVybWFya3QuY29tL3Njb3R0aXNoLXByZW1pZXJzaGlwLW1hcmtldC12YWx1ZXMtb3JpbGV5LWJlY29tZXMtbGVhZ3VlLW12cC1zaWx2YS1mYWxscy1hdC1yYW5nZXJzL3ZpZXcvbmV3cy80MzgxMTUiCiAgICAgIGNsYXNzPSJkYiBtdDEwIgogICBvbmNsaWNrPSJ0bUV2ZW50KCdiYW5uZXInLCAnaHR0cHM6Ly93d3cudHJhbnNmZXJtYXJrdC5jb20vc2NvdHRpc2gtcHJlbWllcnNoaXAtbWFya2V0LXZhbHVlcy1vcmlsZXktYmVjb21lcy1sZWFndWUtbXZwLXNpbHZhLWZhbGxzLWF0LXJhbmdlcnMvdmlldy9uZXdzLzQzODExNScsICdkLWRheS1iYW5uZXInKTsiPgogICAgPGltZwogICAgICAgIHNyYz0iaHR0cHM6Ly9kempvdnFrM3phbXNnLmNsb3VkZnJvbnQubmV0L3Njb3R0aXNoLXByZW1pZXJzaGlwLWRlc2t0b3AtYmFubmVyLmpwZyIKICAgICAgICB3aWR0aD0iMTAzNCIKICAgICAgICBoZWlnaHQ9Ijk5IgogICAgICAgIGFsdD0iZGVhZGxpbmUtZGF5IGJhbm5lciI+CjwvYT4KPHRtLXN1Ym5hdmlnYXRpb24KICAgIGNvbnRyb2xsZXI9InNwaWVsZXIiCiAgICBpZD0iMTQ1NTUiCiAgICBzZWFzb249IiIKICAgIHNlY3Rpb249InNwaWVsZXIiCiAgICBzdHlsZT0iZGlzcGxheTogYmxvY2s7IG1hcmdpbjogMCA1cHg7Ij48L3RtLXN1Ym5hdmlnYXRpb24+Cgo8ZGl2IGNsYXNzPSJyb3ciPgogICAgPGRpdiBjbGFzcz0ibGFyZ2UtOCBjb2x1bW5zIj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYm94Ij4KICAgICAgICAgICAgPGgyIGNsYXNzPSJjb250ZW50LWJveC1oZWFkbGluZSI+CiAgICAgICAgICAgICAgICBTdGF0cyBvZiBTY290dCBDYXJzb24gICAgICAgICAgICA8L2gyPgogICAgICAgICAgICA8cCBjbGFzcz0iaW5mby1jb250ZW50Ij4KICAgICAgICAgICAgICAgIFRoaXMgcGFnZSBjb250YWlucyBpbmZvcm1hdGlvbiBhYm91dCBhIHBsYXllcidzIGRldGFpbGVkIHN0YXRzLiBJbiB0aGUgaW5mbyBib3gsIHlvdSBjYW4gZmlsdGVyIGJ5IHBlcmlvZCwgY2x1YiwgdHlwZSBvZiBsZWFndWUgYW5kIGNvbXBldGl0aW9uLiBUaGUgIkRldGFpbGVkIHN0YXRzIiB0YWIgc2hvd3MgYSBwbGF5ZXIncyB0b3RhbCBhcHBlYXJhbmNlcywgZ29hbHMsIGNhcmRzIGFuZCBjdW11bGF0aXZlIG1pbnV0ZXMgb2YgcGxheSBmb3IgZWFjaCBjb21wZXRpdGlvbiwgYW5kIGluZGljYXRlcyB0aGUgc2Vhc29uIGluIHdoaWNoIGl0IG9jY3VycmVkLiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGVudCI+CiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249Ii9zY290dC1jYXJzb24vbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9wbHVzLzAiIG1ldGhvZD0iZ2V0Ij4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsYXJnZS0xMiBjb2x1bW5zIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJhdWZsaXN0dW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD5GaWx0ZXIgYnkgc2Vhc29uOjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubGluZS1zZWxlY3QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzZWxlY3QgbmFtZT0ic2Fpc29uIiBkYXRhLXBsYWNlaG9sZGVyPSJGaWx0ZXIgYnkgc2Vhc29uIiBjbGFzcz0iY2h6bi1zZWxlY3QiIHRhYmluZGV4PSIwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iZ2VzIj5PdmVyYWxsIGJhbGFuY2U8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMjMiPjIzLzI0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uICBzZWxlY3RlZD0ic2VsZWN0ZWQidmFsdWU9IjIwMjIiPjIyLzIzPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDIxIj4yMS8yMjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAyMCI+MjAvMjE8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMTkiPjE5LzIwPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDE4Ij4xOC8xOTwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAxNyI+MTcvMTg8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMTYiPjE2LzE3PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDE1Ij4xNS8xNjwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAxNCI+MTQvMTU8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMTMiPjEzLzE0PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDEyIj4xMi8xMzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAxMSI+MTEvMTI8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMTAiPjEwLzExPC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDA5Ij4wOS8xMDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAwOCI+MDgvMDk8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMDciPjA3LzA4PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDA2Ij4wNi8wNzwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT0iMjAwNSI+MDUvMDY8L29wdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9IjIwMDQiPjA0LzA1PC9vcHRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPSIyMDAzIj4wMy8wNDwvb3B0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VsZWN0PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIGNsYXNzPSJzbWFsbCBidXR0b24iIHZhbHVlPSJTaG93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPC90YWJsZT4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9mb3JtPiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImJveCI+CiAgICAgICAgICAgIDxoMiBjbGFzcz0iY29udGVudC1ib3gtaGVhZGxpbmUiPgogICAgICAgICAgICAgICAgU3RhdHMgMjIvMjMgICAgICAgICAgICA8L2gyPgogICAgICAgICAgICAKPGRpdiBjbGFzcz0idG0tdGFicyI+CiAgICA8YSBjbGFzcz0idG0tdGFiIHRtLXRhYl9fYWN0aXZlLS1wYXJlbnQiIGhyZWY9Ii9zY290dC1jYXJzb24vbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMiNnZXNhbXQiPjxkaXYgY2xhc3M9IiB0bS10YWJfX2FjdGl2ZSI+PHNwYW4+Q29tcGFjdDwvc3Bhbj48L2Rpdj48L2E+PGEgY2xhc3M9InRtLXRhYiIgaHJlZj0iL3Njb3R0LWNhcnNvbi9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMSNnZXNhbXQiPjxkaXYgY2xhc3M9IiI+PHNwYW4+RGV0YWlsZWQ8L3NwYW4+PC9kaXY+PC9hPjwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLXRhYmxlIj4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9Inl3MSIgY2xhc3M9ImdyaWQtdmlldyI+CjxkaXYgY2xhc3M9InN1bW1hcnkiPjwvZGl2Pgo8dGFibGUgY2xhc3M9Iml0ZW1zIj4KPHRoZWFkPgo8dHI+Cjx0aCBjb2xzcGFuPSIyIiBpZD0ieXcxX2MwIj48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAvc29ydC93ZXR0YmV3ZXJiIj5Db21wZXRpdGlvbjwvYT48L3RoPjx0aCBjbGFzcz0iaGlkZSIgaWQ9Inl3MV9jMSI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wL3NvcnQvd2V0dGJld2VyYiI+d2V0dGJld2VyYjwvYT48L3RoPjx0aCBjbGFzcz0iemVudHJpZXJ0IiBpZD0ieXcxX2MyIj48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAvc29ydC9laW5zYWV0emUuZGVzYyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWVpbnNhZXR6ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJBcHBlYXJhbmNlcyI+Jm5ic3A7PC9zcGFuPjwvYT48L3RoPjx0aCBjbGFzcz0iemVudHJpZXJ0IiBpZD0ieXcxX2MzIj48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAvc29ydC90b3JlLmRlc2MiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi10b3ItdGFibGUtaGVhZGVyIiB0aXRsZT0iR29hbHMiPiZuYnNwOzwvc3Bhbj48L2E+PC90aD48dGggY2xhc3M9InplbnRyaWVydCIgaWQ9Inl3MV9jNCI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wL3NvcnQvZ2VsYmUuZGVzYyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iWWVsbG93IGNhcmRzIj4mbmJzcDs8L3NwYW4+PC9hPjwvdGg+PHRoIGNsYXNzPSJ6ZW50cmllcnQiIGlkPSJ5dzFfYzUiPjxhIGNsYXNzPSJzb3J0LWxpbmsiIGhyZWY9Ii9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMC9zb3J0L2dlbGJyb3RlLmRlc2MiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxicm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlNlY29uZCB5ZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L2E+PC90aD48dGggY2xhc3M9InplbnRyaWVydCIgaWQ9Inl3MV9jNiI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wL3NvcnQvcm90ZS5kZXNjIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tcm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlJlZCBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvYT48L3RoPjx0aCBjbGFzcz0iemVudHJpZXJ0IiBpZD0ieXcxX2M3Ij48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAvc29ydC9rYXNzaWVydGVfdG9yZS5kZXNjIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZ2VnZW50b3ItdGFibGUtaGVhZGVyIiB0aXRsZT0iR29hbHMgY29uY2VkZWQiPiZuYnNwOzwvc3Bhbj48L2E+PC90aD48dGggY2xhc3M9InplbnRyaWVydCIgaWQ9Inl3MV9jOCI+PGEgY2xhc3M9InNvcnQtbGluayIgaHJlZj0iL3BsYXllci1wYXRoL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8wL3NvcnQvenVfbnVsbC5kZXNjIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tb2huZWdlZ2VudG9yLXRhYmxlLWhlYWRlciIgdGl0bGU9IkNsZWFuIHNoZWV0cyI+Jm5ic3A7PC9zcGFuPjwvYT48L3RoPjx0aCBjbGFzcz0icmVjaHRzIiBpZD0ieXcxX2M5Ij48YSBjbGFzcz0ic29ydC1saW5rIiBocmVmPSIvcGxheWVyLXBhdGgvbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzAvc29ydC9laW5zYXR6emVpdC5kZXNjIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tbWludXRlbi10YWJsZS1oZWFkZXIiIHRpdGxlPSJNaW51dGVzIHBsYXllZCI+Jm5ic3A7PC9zcGFuPjwvYT48L3RoPjwvdHI+CjwvdGhlYWQ+Cjx0Zm9vdD4KPHRyPgo8dGQgY29sc3Bhbj0iMiIgY2xhc3M9InJlY2h0cyI+VG90YWwgIDIyLzIzOjwvdGQ+PHRkIGNsYXNzPSJoaWRlIj4mbmJzcDs8L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InJlY2h0cyI+LTwvdGQ+PC90cj4KPC90Zm9vdD4KPHRib2R5Pgo8dHIgY2xhc3M9Im9kZCI+Cjx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1yZWNodHMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9jbC5wbmc/bG09MTYyNjgxMDU1NSIgdGl0bGU9IlVFRkEgQ2hhbXBpb25zIExlYWd1ZSIgYWx0PSJVRUZBIENoYW1waW9ucyBMZWFndWUiIGNsYXNzPSIiIC8+PC90ZD48dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MiPjxhIHRpdGxlPSJDaGFtcGlvbnMgTGVhZ3VlIiBocmVmPSIvdWVmYS1jaGFtcGlvbnMtbGVhZ3VlL3N0YXJ0c2VpdGUvcG9rYWx3ZXR0YmV3ZXJiL0NMIj5DaGFtcGlvbnMgTGVhZ3VlPC9hPjwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQgcGxheWVyLXByb2ZpbGUtcGVyZm9ybWFuY2UtZGF0YSI+PGEgdGl0bGU9IlNjb3R0IENhcnNvbiIgaHJlZj0iL3Njb3R0LWNhcnNvbi9sZWlzdHVuZ3NkYXRlbmRldGFpbHMvc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi93ZXR0YmV3ZXJiL0NML3ZlcmVpbi8yODEiPi08L2E+PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InJlY2h0cyI+LTwvdGQ+PC90cj4KPHRyIGNsYXNzPSJldmVuIj4KPHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLXJlY2h0cyI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby90aW55L2diMS5wbmc/bG09MTUyMTEwNDY1NiIgdGl0bGU9IlByZW1pZXIgTGVhZ3VlIiBhbHQ9IlByZW1pZXIgTGVhZ3VlIiBjbGFzcz0iIiAvPjwvdGQ+PHRkIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIj48YSB0aXRsZT0iUHJlbWllciBMZWFndWUiIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zdGFydHNlaXRlL3dldHRiZXdlcmIvR0IxIj5QcmVtaWVyIExlYWd1ZTwvYT48L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0IHBsYXllci1wcm9maWxlLXBlcmZvcm1hbmNlLWRhdGEiPjxhIHRpdGxlPSJTY290dCBDYXJzb24iIGhyZWY9Ii9zY290dC1jYXJzb24vbGVpc3R1bmdzZGF0ZW5kZXRhaWxzL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvd2V0dGJld2VyYi9HQjEvdmVyZWluLzI4MSI+LTwvYT48L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0icmVjaHRzIj4tPC90ZD48L3RyPgo8dHIgY2xhc3M9Im9kZCI+Cjx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1yZWNodHMiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vdGlueS9jZ2IucG5nP2xtPTE1NjY5MzczNDIiIHRpdGxlPSJFRkwgQ3VwIiBhbHQ9IkVGTCBDdXAiIGNsYXNzPSIiIC8+PC90ZD48dGQgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MiPjxhIHRpdGxlPSJFRkwgQ3VwIiBocmVmPSIvZWZsLWN1cC9zdGFydHNlaXRlL3Bva2Fsd2V0dGJld2VyYi9DR0IiPkVGTCBDdXA8L2E+PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCBwbGF5ZXItcHJvZmlsZS1wZXJmb3JtYW5jZS1kYXRhIj48YSB0aXRsZT0iU2NvdHQgQ2Fyc29uIiBocmVmPSIvc2NvdHQtY2Fyc29uL2xlaXN0dW5nc2RhdGVuZGV0YWlscy9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3dldHRiZXdlcmIvQ0dCL3ZlcmVpbi8yODEiPi08L2E+PC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InplbnRyaWVydCI+LTwvdGQ+PHRkIGNsYXNzPSJ6ZW50cmllcnQiPi08L3RkPjx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4tPC90ZD48dGQgY2xhc3M9InJlY2h0cyI+LTwvdGQ+PC90cj4KPC90Ym9keT4KPC90YWJsZT4KPGRpdiBjbGFzcz0ia2V5cyIgc3R5bGU9ImRpc3BsYXk6bm9uZSIgdGl0bGU9Ii9wbGF5ZXItcGF0aC9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3BsdXMvMD9zYWlzb249MjAyMiI+PHNwYW4+Q2hhbXBpb25zIExlYWd1ZTwvc3Bhbj48c3Bhbj5QcmVtaWVyIExlYWd1ZTwvc3Bhbj48c3Bhbj5FRkwgQ3VwPC9zcGFuPjwvZGl2Pgo8L2Rpdj4gICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPGRpdiBjbGFzcz0iYm94Ij4KICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQtYm94LWhlYWRsaW5lIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1pbnZlcnRlZCBjb250ZW50LWJveC1oZWFkbGluZS0tbG9nbyBjb250ZW50LWJveC1oZWFkbGluZS0tYm90dG9tLWJvcmRlcmVkIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1leHRyYS1zcGFjZSI+CiAgICAgICAgPGEgbmFtZT0iQ0wiIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyIj4KICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby9tZWRpdW0vY2wucG5nP2xtPTE2MjY4MTA1NTUiIHRpdGxlPSJVRUZBIENoYW1waW9ucyBMZWFndWUiIGFsdD0iVUVGQSBDaGFtcGlvbnMgTGVhZ3VlIiBjbGFzcz0iIiAvPlVFRkEgQ2hhbXBpb25zIExlYWd1ZSAgICAgICAgPC9hPgogICAgPC9kaXY+CiAgICAKPGRpdiBjbGFzcz0idG0tdGFicyI+CiAgICA8YSBjbGFzcz0idG0tdGFiIHRtLXRhYl9fYWN0aXZlLS1wYXJlbnQiIGhyZWY9Ii9zY290dC1jYXJzb24vbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMiI+PGRpdiBjbGFzcz0iIHRtLXRhYl9fYWN0aXZlIj48c3Bhbj5Db21wYWN0PC9zcGFuPjwvZGl2PjwvYT48YSBjbGFzcz0idG0tdGFiIiBocmVmPSIvc2NvdHQtY2Fyc29uL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8xIj48ZGl2IGNsYXNzPSIiPjxzcGFuPkRldGFpbGVkPC9zcGFuPjwvZGl2PjwvYT48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtdGFibGUiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5NYXRjaGRheTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPkRhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+VmVudWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+Rm9yPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbHNwYW49IjIiPk9wcG9uZW50PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5SZXN1bHQ8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5Qb3MuPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXRvci10YWJsZS1oZWFkZXIiIHRpdGxlPSJHb2FscyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi12b3JsYWdlLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFzc2lzdHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxiZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxicm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlNlY29uZCB5ZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tcm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlJlZCBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InJlY2h0cyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLW1pbnV0ZW4tdGFibGUtaGVhZGVyIiB0aXRsZT0iTWludXRlcyBwbGF5ZWQiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9HIj5Hcm91cCBHPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjkvNi8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IlNldmlsbGEgRkMiIGhyZWY9Ii9mYy1zZXZpbGxhL3NwaWVscGxhbi92ZXJlaW4vMzY4L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zNjgucG5nP2xtPTE0MDg2NTU0NTUiIHRpdGxlPSJTZXZpbGxhIEZDIiBhbHQ9IlNldmlsbGEgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJTZXZpbGxhIEZDIiBocmVmPSIvZmMtc2V2aWxsYS9zcGllbHBsYW4vdmVyZWluLzM2OC9zYWlzb25faWQvMjAyMiI+U2V2aWxsYSBGQzwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM5MTE4MzQiIGhyZWY9Ii9zZXZpbGxhLWZjX21hbmNoZXN0ZXItY2l0eS9pbmRleC9zcGllbGJlcmljaHQvMzkxMTgzNCI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MDo0IDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPm9uIHRoZSBiZW5jaDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19nZWxiXzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdWVmYS1jaGFtcGlvbnMtbGVhZ3VlL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DTC9zYWlzb25faWQvMjAyMi9ncnVwcGUvRyI+R3JvdXAgRzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij45LzE0LzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQm9ydXNzaWEgRG9ydG11bmQiIGhyZWY9Ii9ib3J1c3NpYS1kb3J0bXVuZC9zcGllbHBsYW4vdmVyZWluLzE2L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xNi5wbmc/bG09MTM5NjI3NTI4MCIgdGl0bGU9IkJvcnVzc2lhIERvcnRtdW5kIiBhbHQ9IkJvcnVzc2lhIERvcnRtdW5kIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iQm9ydXNzaWEgRG9ydG11bmQiIGhyZWY9Ii9ib3J1c3NpYS1kb3J0bXVuZC9zcGllbHBsYW4vdmVyZWluLzE2L3NhaXNvbl9pZC8yMDIyIj5Cb3IuIERvcnRtdW5kPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzkxMTgzMiIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9ib3J1c3NpYS1kb3J0bXVuZC9pbmRleC9zcGllbGJlcmljaHQvMzkxMTgzMiI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MjoxIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPm9uIHRoZSBiZW5jaDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19nZWxiXzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdWVmYS1jaGFtcGlvbnMtbGVhZ3VlL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DTC9zYWlzb25faWQvMjAyMi9ncnVwcGUvRyI+R3JvdXAgRzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMC81LzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iRkMgQ29wZW5oYWdlbiIgaHJlZj0iL2ZjLWtvcGVuaGFnZW4vc3BpZWxwbGFuL3ZlcmVpbi8xOTAvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzE5MC5wbmc/bG09MTUxODExNzM4OSIgdGl0bGU9IkZDIENvcGVuaGFnZW4iIGFsdD0iRkMgQ29wZW5oYWdlbiIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkZDIENvcGVuaGFnZW4iIGhyZWY9Ii9mYy1rb3BlbmhhZ2VuL3NwaWVscGxhbi92ZXJlaW4vMTkwL3NhaXNvbl9pZC8yMDIyIj5GQyBDb3BlbmhhZ2VuPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzkxMTgzMyIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9mYy1jb3BlbmhhZ2VuL2luZGV4L3NwaWVsYmVyaWNodC8zOTExODMzIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij41OjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9HIj5Hcm91cCBHPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEwLzExLzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iRkMgQ29wZW5oYWdlbiIgaHJlZj0iL2ZjLWtvcGVuaGFnZW4vc3BpZWxwbGFuL3ZlcmVpbi8xOTAvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzE5MC5wbmc/bG09MTUxODExNzM4OSIgdGl0bGU9IkZDIENvcGVuaGFnZW4iIGFsdD0iRkMgQ29wZW5oYWdlbiIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkZDIENvcGVuaGFnZW4iIGhyZWY9Ii9mYy1rb3BlbmhhZ2VuL3NwaWVscGxhbi92ZXJlaW4vMTkwL3NhaXNvbl9pZC8yMDIyIj5GQyBDb3BlbmhhZ2VuPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzkxMzY5OCIgaHJlZj0iL2ZjLWNvcGVuaGFnZW5fbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zOTEzNjk4Ij48c3BhbiBjbGFzcz0iIj4wOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9HIj5Hcm91cCBHPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEwLzI1LzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQm9ydXNzaWEgRG9ydG11bmQiIGhyZWY9Ii9ib3J1c3NpYS1kb3J0bXVuZC9zcGllbHBsYW4vdmVyZWluLzE2L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xNi5wbmc/bG09MTM5NjI3NTI4MCIgdGl0bGU9IkJvcnVzc2lhIERvcnRtdW5kIiBhbHQ9IkJvcnVzc2lhIERvcnRtdW5kIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iQm9ydXNzaWEgRG9ydG11bmQiIGhyZWY9Ii9ib3J1c3NpYS1kb3J0bXVuZC9zcGllbHBsYW4vdmVyZWluLzE2L3NhaXNvbl9pZC8yMDIyIj5Cb3IuIERvcnRtdW5kPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzkxMzcwMCIgaHJlZj0iL2JvcnVzc2lhLWRvcnRtdW5kX21hbmNoZXN0ZXItY2l0eS9pbmRleC9zcGllbGJlcmljaHQvMzkxMzcwMCI+PHNwYW4gY2xhc3M9IiI+MDowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPm9uIHRoZSBiZW5jaDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19nZWxiXzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvdWVmYS1jaGFtcGlvbnMtbGVhZ3VlL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DTC9zYWlzb25faWQvMjAyMi9ncnVwcGUvRyI+R3JvdXAgRzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMS8yLzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iU2V2aWxsYSBGQyIgaHJlZj0iL2ZjLXNldmlsbGEvc3BpZWxwbGFuL3ZlcmVpbi8zNjgvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzM2OC5wbmc/bG09MTQwODY1NTQ1NSIgdGl0bGU9IlNldmlsbGEgRkMiIGFsdD0iU2V2aWxsYSBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IlNldmlsbGEgRkMiIGhyZWY9Ii9mYy1zZXZpbGxhL3NwaWVscGxhbi92ZXJlaW4vMzY4L3NhaXNvbl9pZC8yMDIyIj5TZXZpbGxhIEZDPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzkxMTgzMSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9zZXZpbGxhLWZjL2luZGV4L3NwaWVsYmVyaWNodC8zOTExODMxIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4zOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9BRkgiPmxhc3QgMTYgMXN0IGxlZzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4yLzIyLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iUkIgTGVpcHppZyIgaHJlZj0iL3Jhc2VuYmFsbHNwb3J0LWxlaXB6aWcvc3BpZWxwbGFuL3ZlcmVpbi8yMzgyNi9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjM4MjYucG5nP2xtPTE2MTk0MzE2MjQiIHRpdGxlPSJSQiBMZWlwemlnIiBhbHQ9IlJCIExlaXB6aWciIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJSQiBMZWlwemlnIiBocmVmPSIvcmFzZW5iYWxsc3BvcnQtbGVpcHppZy9zcGllbHBsYW4vdmVyZWluLzIzODI2L3NhaXNvbl9pZC8yMDIyIj5SQiBMZWlwemlnPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzk1NjY5MiIgaHJlZj0iL3JiLWxlaXB6aWdfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zOTU2NjkyIj48c3BhbiBjbGFzcz0iIj4xOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9BRlIiPmxhc3QgMTYgMm5kIGxlZzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4zLzE0LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iUkIgTGVpcHppZyIgaHJlZj0iL3Jhc2VuYmFsbHNwb3J0LWxlaXB6aWcvc3BpZWxwbGFuL3ZlcmVpbi8yMzgyNi9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjM4MjYucG5nP2xtPTE2MTk0MzE2MjQiIHRpdGxlPSJSQiBMZWlwemlnIiBhbHQ9IlJCIExlaXB6aWciIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJSQiBMZWlwemlnIiBocmVmPSIvcmFzZW5iYWxsc3BvcnQtbGVpcHppZy9zcGllbHBsYW4vdmVyZWluLzIzODI2L3NhaXNvbl9pZC8yMDIyIj5SQiBMZWlwemlnPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzk1NjY4NCIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9yYi1sZWlwemlnL2luZGV4L3NwaWVsYmVyaWNodC8zOTU2Njg0Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij43OjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9WRkgiPlF1YXJ0ZXItRmluYWxzIDFzdCBsZWc8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NC8xMS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkJheWVybiBNdW5pY2giIGhyZWY9Ii9mYy1iYXllcm4tbXVuY2hlbi9zcGllbHBsYW4vdmVyZWluLzI3L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yNy5wbmc/bG09MTQ5ODI1MTIzOCIgdGl0bGU9IkJheWVybiBNdW5pY2giIGFsdD0iQmF5ZXJuIE11bmljaCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkJheWVybiBNdW5pY2giIGhyZWY9Ii9mYy1iYXllcm4tbXVuY2hlbi9zcGllbHBsYW4vdmVyZWluLzI3L3NhaXNvbl9pZC8yMDIyIj5CYXllcm4gTXVuaWNoPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA0MTYwMiIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9iYXllcm4tbXVuaWNoL2luZGV4L3NwaWVsYmVyaWNodC80MDQxNjAyIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4zOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9WRlIiPlF1YXJ0ZXItRmluYWxzIDJuZCBsZWc8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NC8xOS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkJheWVybiBNdW5pY2giIGhyZWY9Ii9mYy1iYXllcm4tbXVuY2hlbi9zcGllbHBsYW4vdmVyZWluLzI3L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yNy5wbmc/bG09MTQ5ODI1MTIzOCIgdGl0bGU9IkJheWVybiBNdW5pY2giIGFsdD0iQmF5ZXJuIE11bmljaCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkJheWVybiBNdW5pY2giIGhyZWY9Ii9mYy1iYXllcm4tbXVuY2hlbi9zcGllbHBsYW4vdmVyZWluLzI3L3NhaXNvbl9pZC8yMDIyIj5CYXllcm4gTXVuaWNoPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA0MTYwNSIgaHJlZj0iL2JheWVybi1tdW5pY2hfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC80MDQxNjA1Ij48c3BhbiBjbGFzcz0iIj4xOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii91ZWZhLWNoYW1waW9ucy1sZWFndWUvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0NML3NhaXNvbl9pZC8yMDIyL2dydXBwZS9IRkgiPlNlbWktRmluYWxzIDFzdCBMZWc8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NS85LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iUmVhbCBNYWRyaWQiIGhyZWY9Ii9yZWFsLW1hZHJpZC9zcGllbHBsYW4vdmVyZWluLzQxOC9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvNDE4LnBuZz9sbT0xNjk3NzI2MTY2IiB0aXRsZT0iUmVhbCBNYWRyaWQiIGFsdD0iUmVhbCBNYWRyaWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJSZWFsIE1hZHJpZCIgaHJlZj0iL3JlYWwtbWFkcmlkL3NwaWVscGxhbi92ZXJlaW4vNDE4L3NhaXNvbl9pZC8yMDIyIj5SZWFsIE1hZHJpZDwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwNjA3OTQiIGhyZWY9Ii9yZWFsLW1hZHJpZF9tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzQwNjA3OTQiPjxzcGFuIGNsYXNzPSIiPjE6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5vbiB0aGUgYmVuY2g8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3VlZmEtY2hhbXBpb25zLWxlYWd1ZS9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvQ0wvc2Fpc29uX2lkLzIwMjIvZ3J1cHBlL0hGUiI+U2VtaS1GaW5hbHMgMm5kIExlZzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij41LzE3LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iUmVhbCBNYWRyaWQiIGhyZWY9Ii9yZWFsLW1hZHJpZC9zcGllbHBsYW4vdmVyZWluLzQxOC9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvNDE4LnBuZz9sbT0xNjk3NzI2MTY2IiB0aXRsZT0iUmVhbCBNYWRyaWQiIGFsdD0iUmVhbCBNYWRyaWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJSZWFsIE1hZHJpZCIgaHJlZj0iL3JlYWwtbWFkcmlkL3NwaWVscGxhbi92ZXJlaW4vNDE4L3NhaXNvbl9pZC8yMDIyIj5SZWFsIE1hZHJpZDwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwNjA3OTciIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfcmVhbC1tYWRyaWQvaW5kZXgvc3BpZWxiZXJpY2h0LzQwNjA3OTciPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjQ6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5vbiB0aGUgYmVuY2g8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3VlZmEtY2hhbXBpb25zLWxlYWd1ZS9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvQ0wvc2Fpc29uX2lkLzIwMjIvZ3J1cHBlL0ZGIj5GaW5hbDwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij42LzEwLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iSW50ZXIgTWlsYW4iIGhyZWY9Ii9pbnRlci1tYWlsYW5kL3NwaWVscGxhbi92ZXJlaW4vNDYvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzQ2LnBuZz9sbT0xNjE4OTAwOTg5IiB0aXRsZT0iSW50ZXIgTWlsYW4iIGFsdD0iSW50ZXIgTWlsYW4iIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJJbnRlciBNaWxhbiIgaHJlZj0iL2ludGVyLW1haWxhbmQvc3BpZWxwbGFuL3ZlcmVpbi80Ni9zYWlzb25faWQvMjAyMiI+SW50ZXI8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSI0MDc3ODE0IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5X2ludGVyLW1pbGFuL2luZGV4L3NwaWVsYmVyaWNodC80MDc3ODE0Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4xOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICA8dGZvb3Q+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjE4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgU3F1YWQ6IDEzLAogICAgICAgICAgICAgICAgICAgICAgICBTdGFydGluZyBlbGV2ZW46IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIFN1YnN0aXR1dGVkIGluOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBPbiB0aGUgYmVuY2g6IDEzLAogICAgICAgICAgICAgICAgICAgICAgICBTdXNwZW5kZWQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIEluanVyZWQ6IDAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Zm9vdD4KICAgICAgICA8L3RhYmxlPgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJib3giPgogICAgPGRpdiBjbGFzcz0iY29udGVudC1ib3gtaGVhZGxpbmUgY29udGVudC1ib3gtaGVhZGxpbmUtLWludmVydGVkIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1sb2dvIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1ib3R0b20tYm9yZGVyZWQgY29udGVudC1ib3gtaGVhZGxpbmUtLWV4dHJhLXNwYWNlIj4KICAgICAgICA8YSBuYW1lPSJHQjEiIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zdGFydHNlaXRlL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyIj4KICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvbG9nby9tZWRpdW0vZ2IxLnBuZz9sbT0xNTIxMTA0NjU2IiB0aXRsZT0iUHJlbWllciBMZWFndWUiIGFsdD0iUHJlbWllciBMZWFndWUiIGNsYXNzPSIiIC8+UHJlbWllciBMZWFndWUgICAgICAgIDwvYT4KICAgIDwvZGl2PgogICAgCjxkaXYgY2xhc3M9InRtLXRhYnMiPgogICAgPGEgY2xhc3M9InRtLXRhYiB0bS10YWJfX2FjdGl2ZS0tcGFyZW50IiBocmVmPSIvc2NvdHQtY2Fyc29uL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIiPjxkaXYgY2xhc3M9IiB0bS10YWJfX2FjdGl2ZSI+PHNwYW4+Q29tcGFjdDwvc3Bhbj48L2Rpdj48L2E+PGEgY2xhc3M9InRtLXRhYiIgaHJlZj0iL3Njb3R0LWNhcnNvbi9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyL3BsdXMvMSI+PGRpdiBjbGFzcz0iIj48c3Bhbj5EZXRhaWxlZDwvc3Bhbj48L2Rpdj48L2E+PC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJyZXNwb25zaXZlLXRhYmxlIj4KICAgICAgICA8dGFibGU+CiAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+TWF0Y2hkYXk8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5EYXRlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlZlbnVlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiIGNvbHNwYW49IjIiPkZvcjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjb2xzcGFuPSIyIj5PcHBvbmVudDwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+UmVzdWx0PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+UG9zLjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi10b3ItdGFibGUtaGVhZGVyIiB0aXRsZT0iR29hbHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdm9ybGFnZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJBc3Npc3RzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZ2VsYmVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJZZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tZ2VsYnJvdGVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJTZWNvbmQgeWVsbG93IGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXJvdGVrYXJ0ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJSZWQgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJyZWNodHMiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1taW51dGVuLXRhYmxlLWhlYWRlciIgdGl0bGU9Ik1pbnV0ZXMgcGxheWVkIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy8xIj4xPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjgvNy8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPig1Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJXZXN0IEhhbSBVbml0ZWQiIGhyZWY9Ii93ZXN0LWhhbS11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi8zNzkvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzM3OS5wbmc/bG09MTQ2NDY3NTI2MCIgdGl0bGU9Ildlc3QgSGFtIFVuaXRlZCIgYWx0PSJXZXN0IEhhbSBVbml0ZWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJXZXN0IEhhbSBVbml0ZWQiIGhyZWY9Ii93ZXN0LWhhbS11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi8zNzkvc2Fpc29uX2lkLzIwMjIiPldlc3QgSGFtPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTYuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzc4MjMiIGhyZWY9Ii93ZXN0LWhhbS11bml0ZWRfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zODM3ODIzIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4wOjIgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzIiPjI8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OC8xMy8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJBRkMgQm91cm5lbW91dGgiIGhyZWY9Ii9hZmMtYm91cm5lbW91dGgvc3BpZWxwbGFuL3ZlcmVpbi85ODkvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55Lzk4OS5wbmc/bG09MTQ1Nzk5MTgxMSIgdGl0bGU9IkFGQyBCb3VybmVtb3V0aCIgYWx0PSJBRkMgQm91cm5lbW91dGgiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJBRkMgQm91cm5lbW91dGgiIGhyZWY9Ii9hZmMtYm91cm5lbW91dGgvc3BpZWxwbGFuL3ZlcmVpbi85ODkvc2Fpc29uX2lkLzIwMjIiPkJvdXJuZW1vdXRoPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzc4MjciIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfYWZjLWJvdXJuZW1vdXRoL2luZGV4L3NwaWVsYmVyaWNodC8zODM3ODI3Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij40OjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzMiPjM8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OC8yMS8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJOZXdjYXN0bGUgVW5pdGVkIiBocmVmPSIvbmV3Y2FzdGxlLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzc2Mi9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvNzYyLnBuZz9sbT0xNDcyOTIxMTYxIiB0aXRsZT0iTmV3Y2FzdGxlIFVuaXRlZCIgYWx0PSJOZXdjYXN0bGUgVW5pdGVkIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iTmV3Y2FzdGxlIFVuaXRlZCIgaHJlZj0iL25ld2Nhc3RsZS11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi83NjIvc2Fpc29uX2lkLzIwMjIiPk5ld2Nhc3RsZTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDYuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzc4NDEiIGhyZWY9Ii9uZXdjYXN0bGUtdW5pdGVkX21hbmNoZXN0ZXItY2l0eS9pbmRleC9zcGllbGJlcmljaHQvMzgzNzg0MSI+PHNwYW4gY2xhc3M9IiI+MzozIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy80Ij40PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjgvMjcvMjI8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+SDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQ3J5c3RhbCBQYWxhY2UiIGhyZWY9Ii9jcnlzdGFsLXBhbGFjZS9zcGllbHBsYW4vdmVyZWluLzg3My9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvODczLnBuZz9sbT0xNDU3NzIzMjg3IiB0aXRsZT0iQ3J5c3RhbCBQYWxhY2UiIGFsdD0iQ3J5c3RhbCBQYWxhY2UiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJDcnlzdGFsIFBhbGFjZSIgaHJlZj0iL2NyeXN0YWwtcGFsYWNlL3NwaWVscGxhbi92ZXJlaW4vODczL3NhaXNvbl9pZC8yMDIyIj5DcnlzdGFsIFBhbGFjZTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM3ODUwIiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5X2NyeXN0YWwtcGFsYWNlL2luZGV4L3NwaWVsYmVyaWNodC8zODM3ODUwIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij40OjIgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzUiPjU8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OC8zMS8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJOb3R0aW5naGFtIEZvcmVzdCIgaHJlZj0iL25vdHRpbmdoYW0tZm9yZXN0L3NwaWVscGxhbi92ZXJlaW4vNzAzL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS83MDMucG5nP2xtPTE1OTg4OTAyODkiIHRpdGxlPSJOb3R0aW5naGFtIEZvcmVzdCIgYWx0PSJOb3R0aW5naGFtIEZvcmVzdCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9Ik5vdHRpbmdoYW0gRm9yZXN0IiBocmVmPSIvbm90dGluZ2hhbS1mb3Jlc3Qvc3BpZWxwbGFuL3ZlcmVpbi83MDMvc2Fpc29uX2lkLzIwMjIiPk5vdHRtIEZvcmVzdDwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDE1Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM3ODYzIiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5X25vdHRpbmdoYW0tZm9yZXN0L2luZGV4L3NwaWVsYmVyaWNodC8zODM3ODYzIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij42OjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzYiPjY8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OS8zLzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkFzdG9uIFZpbGxhIiBocmVmPSIvYXN0b24tdmlsbGEvc3BpZWxwbGFuL3ZlcmVpbi80MDUvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzQwNV8xNzE3MTU1OTQ2LnBuZz9sbT0xNzE3MTU1OTQ2IiB0aXRsZT0iJm5ic3A7IiBhbHQ9IkFzdG9uIFZpbGxhIiBjbGFzcz0iIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkFzdG9uIFZpbGxhIiBocmVmPSIvYXN0b24tdmlsbGEvc3BpZWxwbGFuL3ZlcmVpbi80MDUvc2Fpc29uX2lkLzIwMjIiPkFzdG9uIFZpbGxhPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTcuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzc5NzIiIGhyZWY9Ii9hc3Rvbi12aWxsYV9tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzc5NzIiPjxzcGFuIGNsYXNzPSIiPjE6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzgiPjg8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+OS8xNy8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJXb2x2ZXJoYW1wdG9uIFdhbmRlcmVycyIgaHJlZj0iL3dvbHZlcmhhbXB0b24td2FuZGVyZXJzL3NwaWVscGxhbi92ZXJlaW4vNTQzL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS81NDMucG5nP2xtPTE0Njc0OTY3ODQiIHRpdGxlPSJXb2x2ZXJoYW1wdG9uIFdhbmRlcmVycyIgYWx0PSJXb2x2ZXJoYW1wdG9uIFdhbmRlcmVycyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IldvbHZlcmhhbXB0b24gV2FuZGVyZXJzIiBocmVmPSIvd29sdmVyaGFtcHRvbi13YW5kZXJlcnMvc3BpZWxwbGFuL3ZlcmVpbi81NDMvc2Fpc29uX2lkLzIwMjIiPldvbHZlczwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDE3Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM4MDA3IiBocmVmPSIvd29sdmVyaGFtcHRvbi13YW5kZXJlcnNfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zODM4MDA3Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4wOjMgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy85Ij45PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEwLzIvMjI8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+SDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBVbml0ZWQiIGhyZWY9Ii9tYW5jaGVzdGVyLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzk4NS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvOTg1LnBuZz9sbT0xNDU3OTc1OTAzIiB0aXRsZT0iTWFuY2hlc3RlciBVbml0ZWQiIGFsdD0iTWFuY2hlc3RlciBVbml0ZWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIFVuaXRlZCIgaHJlZj0iL21hbmNoZXN0ZXItdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vOTg1L3NhaXNvbl9pZC8yMDIyIj5NYW4gVXRkPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oOS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODAxNSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9tYW5jaGVzdGVyLXVuaXRlZC9pbmRleC9zcGllbGJlcmljaHQvMzgzODAxNSI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+NjozIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPm9uIHRoZSBiZW5jaDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy8xMCI+MTA8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTAvOC8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJTb3V0aGFtcHRvbiBGQyIgaHJlZj0iL2ZjLXNvdXRoYW1wdG9uL3NwaWVscGxhbi92ZXJlaW4vMTgwL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xODAucG5nP2xtPTE0NDQ1NjAwODYiIHRpdGxlPSJTb3V0aGFtcHRvbiBGQyIgYWx0PSJTb3V0aGFtcHRvbiBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IlNvdXRoYW1wdG9uIEZDIiBocmVmPSIvZmMtc291dGhhbXB0b24vc3BpZWxwbGFuL3ZlcmVpbi8xODAvc2Fpc29uX2lkLzIwMjIiPlNvdXRoYW1wdG9uPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTcuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4MzgwMjQiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfc291dGhhbXB0b24tZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzM4MzgwMjQiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjQ6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMTEiPjExPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEwLzE2LzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkxpdmVycG9vbCBGQyIgaHJlZj0iL2ZjLWxpdmVycG9vbC9zcGllbHBsYW4vdmVyZWluLzMxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zMS5wbmc/bG09MTQ1NjU2NzgxOSIgdGl0bGU9IkxpdmVycG9vbCBGQyIgYWx0PSJMaXZlcnBvb2wgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJMaXZlcnBvb2wgRkMiIGhyZWY9Ii9mYy1saXZlcnBvb2wvc3BpZWxwbGFuL3ZlcmVpbi8zMS9zYWlzb25faWQvMjAyMiI+TGl2ZXJwb29sPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oOC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODAzMyIgaHJlZj0iL2xpdmVycG9vbC1mY19tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4MzgwMzMiPjxzcGFuIGNsYXNzPSJyZWR0ZXh0Ij4xOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzEzIj4xMzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMC8yMi8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJCcmlnaHRvbiAmYW1wOyBIb3ZlIEFsYmlvbiIgaHJlZj0iL2JyaWdodG9uLWFtcC1ob3ZlLWFsYmlvbi9zcGllbHBsYW4vdmVyZWluLzEyMzcvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzEyMzcucG5nP2xtPTE0OTI3MTg5MDIiIHRpdGxlPSJCcmlnaHRvbiAmIEhvdmUgQWxiaW9uIiBhbHQ9IkJyaWdodG9uICYgSG92ZSBBbGJpb24iIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJCcmlnaHRvbiAmYW1wOyBIb3ZlIEFsYmlvbiIgaHJlZj0iL2JyaWdodG9uLWFtcC1ob3ZlLWFsYmlvbi9zcGllbHBsYW4vdmVyZWluLzEyMzcvc2Fpc29uX2lkLzIwMjIiPkJyaWdodG9uPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oNy4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODE5MiIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9icmlnaHRvbi1hbXAtaG92ZS1hbGJpb24vaW5kZXgvc3BpZWxiZXJpY2h0LzM4MzgxOTIiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjM6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzE0Ij4xNDwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMC8yOS8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJMZWljZXN0ZXIgQ2l0eSIgaHJlZj0iL2xlaWNlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMTAwMy9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTAwMy5wbmc/bG09MTQ3MjIyOTI2NSIgdGl0bGU9IkxlaWNlc3RlciBDaXR5IiBhbHQ9IkxlaWNlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iTGVpY2VzdGVyIENpdHkiIGhyZWY9Ii9sZWljZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzEwMDMvc2Fpc29uX2lkLzIwMjIiPkxlaWNlc3RlcjwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDE4Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM4MjEwIiBocmVmPSIvbGVpY2VzdGVyLWNpdHlfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zODM4MjEwIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4wOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+b24gdGhlIGJlbmNoPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzE1Ij4xNTwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMS81LzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkZ1bGhhbSBGQyIgaHJlZj0iL2ZjLWZ1bGhhbS9zcGllbHBsYW4vdmVyZWluLzkzMS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvOTMxLnBuZz9sbT0xNTU2ODMxNjg3IiB0aXRsZT0iRnVsaGFtIEZDIiBhbHQ9IkZ1bGhhbSBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkZ1bGhhbSBGQyIgaHJlZj0iL2ZjLWZ1bGhhbS9zcGllbHBsYW4vdmVyZWluLzkzMS9zYWlzb25faWQvMjAyMiI+RnVsaGFtPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oOC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODIzMCIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9mdWxoYW0tZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzM4MzgyMzAiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjI6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMTYiPjE2PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjExLzEyLzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkJyZW50Zm9yZCBGQyIgaHJlZj0iL2ZjLWJyZW50Zm9yZC9zcGllbHBsYW4vdmVyZWluLzExNDgvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzExNDgucG5nP2xtPTE2MjUxNTA1NDMiIHRpdGxlPSJCcmVudGZvcmQgRkMiIGFsdD0iQnJlbnRmb3JkIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iQnJlbnRmb3JkIEZDIiBocmVmPSIvZmMtYnJlbnRmb3JkL3NwaWVscGxhbi92ZXJlaW4vMTE0OC9zYWlzb25faWQvMjAyMiI+QnJlbnRmb3JkPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oOC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODI0MCIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9icmVudGZvcmQtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzM4MzgyNDAiPjxzcGFuIGNsYXNzPSJyZWR0ZXh0Ij4xOjIgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzE3Ij4xNzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMi8yOC8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJMZWVkcyBVbml0ZWQiIGhyZWY9Ii9sZWVkcy11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi8zOTkvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzM5OS5wbmc/bG09MTY0NTY1MjIyNCIgdGl0bGU9IkxlZWRzIFVuaXRlZCIgYWx0PSJMZWVkcyBVbml0ZWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJMZWVkcyBVbml0ZWQiIGhyZWY9Ii9sZWVkcy11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi8zOTkvc2Fpc29uX2lkLzIwMjIiPkxlZWRzPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTMuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4MzgyNTgiIGhyZWY9Ii9sZWVkcy11bml0ZWRfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zODM4MjU4Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4xOjMgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzE4Ij4xODwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xMi8zMS8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJFdmVydG9uIEZDIiBocmVmPSIvZmMtZXZlcnRvbi9zcGllbHBsYW4vdmVyZWluLzI5L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yOS5wbmc/bG09MTQ0NTk0OTg0NiIgdGl0bGU9IkV2ZXJ0b24gRkMiIGFsdD0iRXZlcnRvbiBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkV2ZXJ0b24gRkMiIGhyZWY9Ii9mYy1ldmVydG9uL3NwaWVscGxhbi92ZXJlaW4vMjkvc2Fpc29uX2lkLzIwMjIiPkV2ZXJ0b248L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxNi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODI2NiIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9ldmVydG9uLWZjL2luZGV4L3NwaWVsYmVyaWNodC8zODM4MjY2Ij48c3BhbiBjbGFzcz0iIj4xOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzE5Ij4xOTwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xLzUvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQ2hlbHNlYSBGQyIgaHJlZj0iL2ZjLWNoZWxzZWEvc3BpZWxwbGFuL3ZlcmVpbi82MzEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzYzMS5wbmc/bG09MTY4MjQzNTkxMSIgdGl0bGU9IkNoZWxzZWEgRkMiIGFsdD0iQ2hlbHNlYSBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkNoZWxzZWEgRkMiIGhyZWY9Ii9mYy1jaGVsc2VhL3NwaWVscGxhbi92ZXJlaW4vNjMxL3NhaXNvbl9pZC8yMDIyIj5DaGVsc2VhPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTAuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4MzgyNzUiIGhyZWY9Ii9jaGVsc2VhLWZjX21hbmNoZXN0ZXItY2l0eS9pbmRleC9zcGllbGJlcmljaHQvMzgzODI3NSI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MDoxIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy8yMCI+MjA8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MS8xNC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIFVuaXRlZCIgaHJlZj0iL21hbmNoZXN0ZXItdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vOTg1L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS85ODUucG5nP2xtPTE0NTc5NzU5MDMiIHRpdGxlPSJNYW5jaGVzdGVyIFVuaXRlZCIgYWx0PSJNYW5jaGVzdGVyIFVuaXRlZCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgVW5pdGVkIiBocmVmPSIvbWFuY2hlc3Rlci11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi85ODUvc2Fpc29uX2lkLzIwMjIiPk1hbiBVdGQ8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPig0Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM4Nzk5IiBocmVmPSIvbWFuY2hlc3Rlci11bml0ZWRfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zODM4Nzk5Ij48c3BhbiBjbGFzcz0icmVkdGV4dCI+MjoxIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy83Ij43PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEvMTkvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+SDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iVG90dGVuaGFtIEhvdHNwdXIiIGhyZWY9Ii90b3R0ZW5oYW0taG90c3B1ci9zcGllbHBsYW4vdmVyZWluLzE0OC9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTQ4LnBuZz9sbT0xNTQ0MzQ1ODAxIiB0aXRsZT0iVG90dGVuaGFtIEhvdHNwdXIiIGFsdD0iVG90dGVuaGFtIEhvdHNwdXIiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJUb3R0ZW5oYW0gSG90c3B1ciIgaHJlZj0iL3RvdHRlbmhhbS1ob3RzcHVyL3NwaWVscGxhbi92ZXJlaW4vMTQ4L3NhaXNvbl9pZC8yMDIyIj5Ub3R0ZW5oYW08L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPig0Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM3OTk1IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5X3RvdHRlbmhhbS1ob3RzcHVyL2luZGV4L3NwaWVsYmVyaWNodC8zODM3OTk1Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij40OjIgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzIxIj4yMTwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xLzIyLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IldvbHZlcmhhbXB0b24gV2FuZGVyZXJzIiBocmVmPSIvd29sdmVyaGFtcHRvbi13YW5kZXJlcnMvc3BpZWxwbGFuL3ZlcmVpbi81NDMvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzU0My5wbmc/bG09MTQ2NzQ5Njc4NCIgdGl0bGU9IldvbHZlcmhhbXB0b24gV2FuZGVyZXJzIiBhbHQ9IldvbHZlcmhhbXB0b24gV2FuZGVyZXJzIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iV29sdmVyaGFtcHRvbiBXYW5kZXJlcnMiIGhyZWY9Ii93b2x2ZXJoYW1wdG9uLXdhbmRlcmVycy9zcGllbHBsYW4vdmVyZWluLzU0My9zYWlzb25faWQvMjAyMiI+V29sdmVzPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTcuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg3ODUiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfd29sdmVyaGFtcHRvbi13YW5kZXJlcnMvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg3ODUiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjM6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMjIiPjIyPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjIvNS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJUb3R0ZW5oYW0gSG90c3B1ciIgaHJlZj0iL3RvdHRlbmhhbS1ob3RzcHVyL3NwaWVscGxhbi92ZXJlaW4vMTQ4L3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xNDgucG5nP2xtPTE1NDQzNDU4MDEiIHRpdGxlPSJUb3R0ZW5oYW0gSG90c3B1ciIgYWx0PSJUb3R0ZW5oYW0gSG90c3B1ciIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IlRvdHRlbmhhbSBIb3RzcHVyIiBocmVmPSIvdG90dGVuaGFtLWhvdHNwdXIvc3BpZWxwbGFuL3ZlcmVpbi8xNDgvc2Fpc29uX2lkLzIwMjIiPlRvdHRlbmhhbTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDYuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg3NzgiIGhyZWY9Ii90b3R0ZW5oYW0taG90c3B1cl9tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg3NzgiPjxzcGFuIGNsYXNzPSJyZWR0ZXh0Ij4xOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzIzIj4yMzwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4yLzEyLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkFzdG9uIFZpbGxhIiBocmVmPSIvYXN0b24tdmlsbGEvc3BpZWxwbGFuL3ZlcmVpbi80MDUvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzQwNV8xNzE3MTU1OTQ2LnBuZz9sbT0xNzE3MTU1OTQ2IiB0aXRsZT0iJm5ic3A7IiBhbHQ9IkFzdG9uIFZpbGxhIiBjbGFzcz0iIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkFzdG9uIFZpbGxhIiBocmVmPSIvYXN0b24tdmlsbGEvc3BpZWxwbGFuL3ZlcmVpbi80MDUvc2Fpc29uX2lkLzIwMjIiPkFzdG9uIFZpbGxhPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg3NjMiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfYXN0b24tdmlsbGEvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg3NjMiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjM6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMTIiPjEyPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjIvMTUvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIyIj5BcnNlbmFsPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODA1MSIgaHJlZj0iL2Fyc2VuYWwtZmNfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zODM4MDUxIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4xOjMgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzI0Ij4yNDwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4yLzE4LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik5vdHRpbmdoYW0gRm9yZXN0IiBocmVmPSIvbm90dGluZ2hhbS1mb3Jlc3Qvc3BpZWxwbGFuL3ZlcmVpbi83MDMvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzcwMy5wbmc/bG09MTU5ODg5MDI4OSIgdGl0bGU9Ik5vdHRpbmdoYW0gRm9yZXN0IiBhbHQ9Ik5vdHRpbmdoYW0gRm9yZXN0IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iTm90dGluZ2hhbSBGb3Jlc3QiIGhyZWY9Ii9ub3R0aW5naGFtLWZvcmVzdC9zcGllbHBsYW4vdmVyZWluLzcwMy9zYWlzb25faWQvMjAyMiI+Tm90dG0gRm9yZXN0PC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTMuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg3NjAiIGhyZWY9Ii9ub3R0aW5naGFtLWZvcmVzdF9tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg3NjAiPjxzcGFuIGNsYXNzPSIiPjE6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfZ2VsYl8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzI1Ij4yNTwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4yLzI1LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkFGQyBCb3VybmVtb3V0aCIgaHJlZj0iL2FmYy1ib3VybmVtb3V0aC9zcGllbHBsYW4vdmVyZWluLzk4OS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvOTg5LnBuZz9sbT0xNDU3OTkxODExIiB0aXRsZT0iQUZDIEJvdXJuZW1vdXRoIiBhbHQ9IkFGQyBCb3VybmVtb3V0aCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkFGQyBCb3VybmVtb3V0aCIgaHJlZj0iL2FmYy1ib3VybmVtb3V0aC9zcGllbHBsYW4vdmVyZWluLzk4OS9zYWlzb25faWQvMjAyMiI+Qm91cm5lbW91dGg8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxOS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODc0MSIgaHJlZj0iL2FmYy1ib3VybmVtb3V0aF9tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg3NDEiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjE6NCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5vbiB0aGUgYmVuY2g8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMjYiPjI2PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjMvNC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJOZXdjYXN0bGUgVW5pdGVkIiBocmVmPSIvbmV3Y2FzdGxlLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzc2Mi9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvNzYyLnBuZz9sbT0xNDcyOTIxMTYxIiB0aXRsZT0iTmV3Y2FzdGxlIFVuaXRlZCIgYWx0PSJOZXdjYXN0bGUgVW5pdGVkIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iTmV3Y2FzdGxlIFVuaXRlZCIgaHJlZj0iL25ld2Nhc3RsZS11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi83NjIvc2Fpc29uX2lkLzIwMjIiPk5ld2Nhc3RsZTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDQuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg3MzQiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfbmV3Y2FzdGxlLXVuaXRlZC9pbmRleC9zcGllbGJlcmljaHQvMzgzODczNCI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MjowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy8yNyI+Mjc8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+My8xMS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJDcnlzdGFsIFBhbGFjZSIgaHJlZj0iL2NyeXN0YWwtcGFsYWNlL3NwaWVscGxhbi92ZXJlaW4vODczL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS84NzMucG5nP2xtPTE0NTc3MjMyODciIHRpdGxlPSJDcnlzdGFsIFBhbGFjZSIgYWx0PSJDcnlzdGFsIFBhbGFjZSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkNyeXN0YWwgUGFsYWNlIiBocmVmPSIvY3J5c3RhbC1wYWxhY2Uvc3BpZWxwbGFuL3ZlcmVpbi84NzMvc2Fpc29uX2lkLzIwMjIiPkNyeXN0YWwgUGFsYWNlPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg3MjIiIGhyZWY9Ii9jcnlzdGFsLXBhbGFjZV9tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg3MjIiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjA6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMjkiPjI5PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjQvMS8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJMaXZlcnBvb2wgRkMiIGhyZWY9Ii9mYy1saXZlcnBvb2wvc3BpZWxwbGFuL3ZlcmVpbi8zMS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMzEucG5nP2xtPTE0NTY1Njc4MTkiIHRpdGxlPSJMaXZlcnBvb2wgRkMiIGFsdD0iTGl2ZXJwb29sIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iTGl2ZXJwb29sIEZDIiBocmVmPSIvZmMtbGl2ZXJwb29sL3NwaWVscGxhbi92ZXJlaW4vMzEvc2Fpc29uX2lkLzIwMjIiPkxpdmVycG9vbDwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDcuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg3MDQiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfbGl2ZXJwb29sLWZjL2luZGV4L3NwaWVsYmVyaWNodC8zODM4NzA0Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij40OjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzMwIj4zMDwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij40LzgvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iU291dGhhbXB0b24gRkMiIGhyZWY9Ii9mYy1zb3V0aGFtcHRvbi9zcGllbHBsYW4vdmVyZWluLzE4MC9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTgwLnBuZz9sbT0xNDQ0NTYwMDg2IiB0aXRsZT0iU291dGhhbXB0b24gRkMiIGFsdD0iU291dGhhbXB0b24gRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJTb3V0aGFtcHRvbiBGQyIgaHJlZj0iL2ZjLXNvdXRoYW1wdG9uL3NwaWVscGxhbi92ZXJlaW4vMTgwL3NhaXNvbl9pZC8yMDIyIj5Tb3V0aGFtcHRvbjwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIwLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM4NjkzIiBocmVmPSIvc291dGhhbXB0b24tZmNfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC8zODM4NjkzIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4xOjQgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzMxIj4zMTwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij40LzE1LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkxlaWNlc3RlciBDaXR5IiBocmVmPSIvbGVpY2VzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8xMDAzL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8xMDAzLnBuZz9sbT0xNDcyMjI5MjY1IiB0aXRsZT0iTGVpY2VzdGVyIENpdHkiIGFsdD0iTGVpY2VzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJMZWljZXN0ZXIgQ2l0eSIgaHJlZj0iL2xlaWNlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMTAwMy9zYWlzb25faWQvMjAyMiI+TGVpY2VzdGVyPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTkuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg2ODEiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfbGVpY2VzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg2ODEiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjM6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMzMiPjMzPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjQvMjYvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+SDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEucG5nP2xtPTE0ODk3ODc4NTAiIHRpdGxlPSJBcnNlbmFsIEZDIiBhbHQ9IkFyc2VuYWwgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJBcnNlbmFsIEZDIiBocmVmPSIvZmMtYXJzZW5hbC9zcGllbHBsYW4vdmVyZWluLzExL3NhaXNvbl9pZC8yMDIyIj5BcnNlbmFsPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODY1MSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9hcnNlbmFsLWZjL2luZGV4L3NwaWVsYmVyaWNodC8zODM4NjUxIj48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij40OjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX2dlbGJfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy8zNCI+MzQ8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NC8zMC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJGdWxoYW0gRkMiIGhyZWY9Ii9mYy1mdWxoYW0vc3BpZWxwbGFuL3ZlcmVpbi85MzEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzkzMS5wbmc/bG09MTU1NjgzMTY4NyIgdGl0bGU9IkZ1bGhhbSBGQyIgYWx0PSJGdWxoYW0gRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJGdWxoYW0gRkMiIGhyZWY9Ii9mYy1mdWxoYW0vc3BpZWxwbGFuL3ZlcmVpbi85MzEvc2Fpc29uX2lkLzIwMjIiPkZ1bGhhbTwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEwLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM4NjQzIiBocmVmPSIvZnVsaGFtLWZjX21hbmNoZXN0ZXItY2l0eS9pbmRleC9zcGllbGJlcmljaHQvMzgzODY0MyI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MToyIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPm9uIHRoZSBiZW5jaDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy8yOCI+Mjg8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NS8zLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ildlc3QgSGFtIFVuaXRlZCIgaHJlZj0iL3dlc3QtaGFtLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzM3OS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMzc5LnBuZz9sbT0xNDY0Njc1MjYwIiB0aXRsZT0iV2VzdCBIYW0gVW5pdGVkIiBhbHQ9Ildlc3QgSGFtIFVuaXRlZCIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9Ildlc3QgSGFtIFVuaXRlZCIgaHJlZj0iL3dlc3QtaGFtLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzM3OS9zYWlzb25faWQvMjAyMiI+V2VzdCBIYW08L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxOC4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODcxNyIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV93ZXN0LWhhbS11bml0ZWQvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg3MTciPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjM6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMzUiPjM1PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjUvNi8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigxLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJMZWVkcyBVbml0ZWQiIGhyZWY9Ii9sZWVkcy11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi8zOTkvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzM5OS5wbmc/bG09MTY0NTY1MjIyNCIgdGl0bGU9IkxlZWRzIFVuaXRlZCIgYWx0PSJMZWVkcyBVbml0ZWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJMZWVkcyBVbml0ZWQiIGhyZWY9Ii9sZWVkcy11bml0ZWQvc3BpZWxwbGFuL3ZlcmVpbi8zOTkvc2Fpc29uX2lkLzIwMjIiPkxlZWRzPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTkuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg2MjciIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfbGVlZHMtdW5pdGVkL2luZGV4L3NwaWVsYmVyaWNodC8zODM4NjI3Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4yOjEgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL3ByZW1pZXItbGVhZ3VlL3NwaWVsdGFnL3dldHRiZXdlcmIvR0IxL3NhaXNvbl9pZC8yMDIyL3NwaWVsdGFnLzM2Ij4zNjwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij41LzE0LzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLWxpbmtzIj48c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDEuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkV2ZXJ0b24gRkMiIGhyZWY9Ii9mYy1ldmVydG9uL3NwaWVscGxhbi92ZXJlaW4vMjkvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI5LnBuZz9sbT0xNDQ1OTQ5ODQ2IiB0aXRsZT0iRXZlcnRvbiBGQyIgYWx0PSJFdmVydG9uIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgIj48YSB0aXRsZT0iRXZlcnRvbiBGQyIgaHJlZj0iL2ZjLWV2ZXJ0b24vc3BpZWxwbGFuL3ZlcmVpbi8yOS9zYWlzb25faWQvMjAyMiI+RXZlcnRvbjwvYT4mbmJzcDsmbmJzcDs8c3BhbiBjbGFzcz0idGFiZWxsZW5wbGF0eiI+KDE3Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM4NjE4IiBocmVmPSIvZXZlcnRvbi1mY19tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg2MTgiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjA6MyA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMzciPjM3PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjUvMjEvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+SDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQ2hlbHNlYSBGQyIgaHJlZj0iL2ZjLWNoZWxzZWEvc3BpZWxwbGFuL3ZlcmVpbi82MzEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzYzMS5wbmc/bG09MTY4MjQzNTkxMSIgdGl0bGU9IkNoZWxzZWEgRkMiIGFsdD0iQ2hlbHNlYSBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkNoZWxzZWEgRkMiIGhyZWY9Ii9mYy1jaGVsc2VhL3NwaWVscGxhbi92ZXJlaW4vNjMxL3NhaXNvbl9pZC8yMDIyIj5DaGVsc2VhPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMTIuKTwvc3Bhbj48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM4Mzg2MDciIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfY2hlbHNlYS1mYy9pbmRleC9zcGllbGJlcmljaHQvMzgzODYwNyI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MTowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9wcmVtaWVyLWxlYWd1ZS9zcGllbHRhZy93ZXR0YmV3ZXJiL0dCMS9zYWlzb25faWQvMjAyMi9zcGllbHRhZy8zMiI+MzI8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NS8yNC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5BPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1saW5rcyI+PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPigyLik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJCcmlnaHRvbiAmYW1wOyBIb3ZlIEFsYmlvbiIgaHJlZj0iL2JyaWdodG9uLWFtcC1ob3ZlLWFsYmlvbi9zcGllbHBsYW4vdmVyZWluLzEyMzcvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzEyMzcucG5nP2xtPTE0OTI3MTg5MDIiIHRpdGxlPSJCcmlnaHRvbiAmIEhvdmUgQWxiaW9uIiBhbHQ9IkJyaWdodG9uICYgSG92ZSBBbGJpb24iIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJCcmlnaHRvbiAmYW1wOyBIb3ZlIEFsYmlvbiIgaHJlZj0iL2JyaWdodG9uLWFtcC1ob3ZlLWFsYmlvbi9zcGllbHBsYW4vdmVyZWluLzEyMzcvc2Fpc29uX2lkLzIwMjIiPkJyaWdodG9uPC9hPiZuYnNwOyZuYnNwOzxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oNi4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iMzgzODY3MSIgaHJlZj0iL2JyaWdodG9uLWFtcC1ob3ZlLWFsYmlvbl9tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM4Mzg2NzEiPjxzcGFuIGNsYXNzPSIiPjE6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvcHJlbWllci1sZWFndWUvc3BpZWx0YWcvd2V0dGJld2VyYi9HQjEvc2Fpc29uX2lkLzIwMjIvc3BpZWx0YWcvMzgiPjM4PC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjUvMjgvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItbGlua3MiPjxzcGFuIGNsYXNzPSJ0YWJlbGxlbnBsYXR6Ij4oMS4pPC9zcGFuPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iQnJlbnRmb3JkIEZDIiBocmVmPSIvZmMtYnJlbnRmb3JkL3NwaWVscGxhbi92ZXJlaW4vMTE0OC9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTE0OC5wbmc/bG09MTYyNTE1MDU0MyIgdGl0bGU9IkJyZW50Zm9yZCBGQyIgYWx0PSJCcmVudGZvcmQgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJCcmVudGZvcmQgRkMiIGhyZWY9Ii9mYy1icmVudGZvcmQvc3BpZWxwbGFuL3ZlcmVpbi8xMTQ4L3NhaXNvbl9pZC8yMDIyIj5CcmVudGZvcmQ8L2E+Jm5ic3A7Jm5ic3A7PHNwYW4gY2xhc3M9InRhYmVsbGVucGxhdHoiPig5Lik8L3NwYW4+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODM4NTk1IiBocmVmPSIvYnJlbnRmb3JkLWZjX21hbmNoZXN0ZXItY2l0eS9pbmRleC9zcGllbGJlcmljaHQvMzgzODU5NSI+PHNwYW4gY2xhc3M9InJlZHRleHQiPjE6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgIDx0Zm9vdD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMTgiPgogICAgICAgICAgICAgICAgICAgICAgICBTcXVhZDogNSwKICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRpbmcgZWxldmVuOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGl0dXRlZCBpbjogMCwKICAgICAgICAgICAgICAgICAgICAgICAgT24gdGhlIGJlbmNoOiA1LAogICAgICAgICAgICAgICAgICAgICAgICBTdXNwZW5kZWQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIEluanVyZWQ6IDAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Zm9vdD4KICAgICAgICA8L3RhYmxlPgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJib3giPgogICAgPGRpdiBjbGFzcz0iY29udGVudC1ib3gtaGVhZGxpbmUgY29udGVudC1ib3gtaGVhZGxpbmUtLWludmVydGVkIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1sb2dvIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1ib3R0b20tYm9yZGVyZWQgY29udGVudC1ib3gtaGVhZGxpbmUtLWV4dHJhLXNwYWNlIj4KICAgICAgICA8YSBuYW1lPSJHQkNTIiBocmVmPSIvY29tbXVuaXR5LXNoaWVsZC9zdGFydHNlaXRlL3dldHRiZXdlcmIvR0JDUy9zYWlzb25faWQvMjAyMiI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vbWVkaXVtL2diY3MucG5nP2xtPTE2NTkyNjU1NjIiIHRpdGxlPSJDb21tdW5pdHkgU2hpZWxkIiBhbHQ9IkNvbW11bml0eSBTaGllbGQiIGNsYXNzPSIiIC8+Q29tbXVuaXR5IFNoaWVsZCAgICAgICAgPC9hPgogICAgPC9kaXY+CiAgICAKPGRpdiBjbGFzcz0idG0tdGFicyI+CiAgICA8YSBjbGFzcz0idG0tdGFiIHRtLXRhYl9fYWN0aXZlLS1wYXJlbnQiIGhyZWY9Ii9zY290dC1jYXJzb24vbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMiI+PGRpdiBjbGFzcz0iIHRtLXRhYl9fYWN0aXZlIj48c3Bhbj5Db21wYWN0PC9zcGFuPjwvZGl2PjwvYT48YSBjbGFzcz0idG0tdGFiIiBocmVmPSIvc2NvdHQtY2Fyc29uL2xlaXN0dW5nc2RhdGVuL3NwaWVsZXIvMTQ1NTUvc2Fpc29uLzIwMjIvcGx1cy8xIj48ZGl2IGNsYXNzPSIiPjxzcGFuPkRldGFpbGVkPC9zcGFuPjwvZGl2PjwvYT48L2Rpdj4KICAgIDxkaXYgY2xhc3M9InJlc3BvbnNpdmUtdGFibGUiPgogICAgICAgIDx0YWJsZT4KICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5NYXRjaGRheTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPkRhdGU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+VmVudWU8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+Rm9yPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNvbHNwYW49IjIiPk9wcG9uZW50PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5SZXN1bHQ8L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5Qb3MuPC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXRvci10YWJsZS1oZWFkZXIiIHRpdGxlPSJHb2FscyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi12b3JsYWdlLXRhYmxlLWhlYWRlciIgdGl0bGU9IkFzc2lzdHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxiZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1nZWxicm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlNlY29uZCB5ZWxsb3cgY2FyZHMiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tcm90ZWthcnRlLXRhYmxlLWhlYWRlciIgdGl0bGU9IlJlZCBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InJlY2h0cyI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLW1pbnV0ZW4tdGFibGUtaGVhZGVyIiB0aXRsZT0iTWludXRlcyBwbGF5ZWQiPiZuYnNwOzwvc3Bhbj48L3RoPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgPHRib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2NvbW11bml0eS1zaGllbGQvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0dCQ1Mvc2Fpc29uX2lkLzIwMjIvZ3J1cHBlL0ZGIj5GaW5hbDwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij43LzMwLzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTGl2ZXJwb29sIEZDIiBocmVmPSIvZmMtbGl2ZXJwb29sL3NwaWVscGxhbi92ZXJlaW4vMzEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzMxLnBuZz9sbT0xNDU2NTY3ODE5IiB0aXRsZT0iTGl2ZXJwb29sIEZDIiBhbHQ9IkxpdmVycG9vbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzICI+PGEgdGl0bGU9IkxpdmVycG9vbCBGQyIgaHJlZj0iL2ZjLWxpdmVycG9vbC9zcGllbHBsYW4vdmVyZWluLzMxL3NhaXNvbl9pZC8yMDIyIj5MaXZlcnBvb2w8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzODg5MTgxIiBocmVmPSIvbGl2ZXJwb29sLWZjX21hbmNoZXN0ZXItY2l0eS9pbmRleC9zcGllbGJlcmljaHQvMzg4OTE4MSI+PHNwYW4gY2xhc3M9InJlZHRleHQiPjM6MSA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgIDx0Zm9vdD4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iMTgiPgogICAgICAgICAgICAgICAgICAgICAgICBTcXVhZDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgU3RhcnRpbmcgZWxldmVuOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBTdWJzdGl0dXRlZCBpbjogMCwKICAgICAgICAgICAgICAgICAgICAgICAgT24gdGhlIGJlbmNoOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBTdXNwZW5kZWQ6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIEluanVyZWQ6IDAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPC90Zm9vdD4KICAgICAgICA8L3RhYmxlPgogICAgPC9kaXY+CjwvZGl2Pgo8ZGl2IGNsYXNzPSJib3giPgogICAgPGRpdiBjbGFzcz0iY29udGVudC1ib3gtaGVhZGxpbmUgY29udGVudC1ib3gtaGVhZGxpbmUtLWludmVydGVkIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1sb2dvIGNvbnRlbnQtYm94LWhlYWRsaW5lLS1ib3R0b20tYm9yZGVyZWQgY29udGVudC1ib3gtaGVhZGxpbmUtLWV4dHJhLXNwYWNlIj4KICAgICAgICA8YSBuYW1lPSJGQUMiIGhyZWY9Ii9mYS1jdXAvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL0ZBQy9zYWlzb25faWQvMjAyMiI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vbWVkaXVtL2ZhYy5wbmc/bG09MTY2NjAzMTU1NiIgdGl0bGU9IkZBIEN1cCIgYWx0PSJGQSBDdXAiIGNsYXNzPSIiIC8+RkEgQ3VwICAgICAgICA8L2E+CiAgICA8L2Rpdj4KICAgIAo8ZGl2IGNsYXNzPSJ0bS10YWJzIj4KICAgIDxhIGNsYXNzPSJ0bS10YWIgdG0tdGFiX19hY3RpdmUtLXBhcmVudCIgaHJlZj0iL3Njb3R0LWNhcnNvbi9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyIj48ZGl2IGNsYXNzPSIgdG0tdGFiX19hY3RpdmUiPjxzcGFuPkNvbXBhY3Q8L3NwYW4+PC9kaXY+PC9hPjxhIGNsYXNzPSJ0bS10YWIiIGhyZWY9Ii9zY290dC1jYXJzb24vbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzEiPjxkaXYgY2xhc3M9IiI+PHNwYW4+RGV0YWlsZWQ8L3NwYW4+PC9kaXY+PC9hPjwvZGl2PgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS10YWJsZSI+CiAgICAgICAgPHRhYmxlPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPk1hdGNoZGF5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+RGF0ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5WZW51ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj5Gb3I8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY29sc3Bhbj0iMiI+T3Bwb25lbnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlJlc3VsdDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlBvcy48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdG9yLXRhYmxlLWhlYWRlciIgdGl0bGU9IkdvYWxzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXZvcmxhZ2UtdGFibGUtaGVhZGVyIiB0aXRsZT0iQXNzaXN0cyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iWWVsbG93IGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJyb3Rla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iU2Vjb25kIHllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1yb3Rla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iUmVkIGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icmVjaHRzIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tbWludXRlbi10YWJsZS1oZWFkZXIiIHRpdGxlPSJNaW51dGVzIHBsYXllZCI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZmEtY3VwL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9GQUMvc2Fpc29uX2lkLzIwMjIvZ3J1cHBlLzNSIj5UaGlyZCBSb3VuZDwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xLzgvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+SDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiIGNvbHNwYW49IjIiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJDaGVsc2VhIEZDIiBocmVmPSIvZmMtY2hlbHNlYS9zcGllbHBsYW4vdmVyZWluLzYzMS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvNjMxLnBuZz9sbT0xNjgyNDM1OTExIiB0aXRsZT0iQ2hlbHNlYSBGQyIgYWx0PSJDaGVsc2VhIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iQ2hlbHNlYSBGQyIgaHJlZj0iL2ZjLWNoZWxzZWEvc3BpZWxwbGFuL3ZlcmVpbi82MzEvc2Fpc29uX2lkLzIwMjIiPkNoZWxzZWE8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzOTc0MDQ4IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5X2NoZWxzZWEtZmMvaW5kZXgvc3BpZWxiZXJpY2h0LzM5NzQwNDgiPjxzcGFuIGNsYXNzPSJncmVlbnRleHQiPjQ6MCA8L3NwYW4+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSI4IiBjbGFzcz0iemVudHJpZXJ0Ij5Ob3QgaW4gc3F1YWQ8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZmEtY3VwL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9GQUMvc2Fpc29uX2lkLzIwMjIvZ3J1cHBlLzRSIj5Gb3VydGggUm91bmQ8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MS8yNy8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkFyc2VuYWwgRkMiIGhyZWY9Ii9mYy1hcnNlbmFsL3NwaWVscGxhbi92ZXJlaW4vMTEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzExLnBuZz9sbT0xNDg5Nzg3ODUwIiB0aXRsZT0iQXJzZW5hbCBGQyIgYWx0PSJBcnNlbmFsIEZDIiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iQXJzZW5hbCBGQyIgaHJlZj0iL2ZjLWFyc2VuYWwvc3BpZWxwbGFuL3ZlcmVpbi8xMS9zYWlzb25faWQvMjAyMiI+QXJzZW5hbDwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwMTM2NDYiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfYXJzZW5hbC1mYy9pbmRleC9zcGllbGJlcmljaHQvNDAxMzY0NiI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MTowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9mYS1jdXAvc3BpZWx0YWcvcG9rYWx3ZXR0YmV3ZXJiL0ZBQy9zYWlzb25faWQvMjAyMi9ncnVwcGUvNVIiPkZpZnRoIFJvdW5kPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjIvMjgvMjM8L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IGhhdXB0bGluayI+QTwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiIGNvbHNwYW49IjIiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi8yODEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzI4MS5wbmc/bG09MTQ2NzM1NjMzMSIgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgYWx0PSJNYW5jaGVzdGVyIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IG5vLWJvcmRlci1yZWNodHMiPjxhIHRpdGxlPSJCcmlzdG9sIENpdHkiIGhyZWY9Ii9icmlzdG9sLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi82OTgvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzY5OC5wbmc/bG09MTU3MTMxNDEyNSIgdGl0bGU9IkJyaXN0b2wgQ2l0eSIgYWx0PSJCcmlzdG9sIENpdHkiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJCcmlzdG9sIENpdHkiIGhyZWY9Ii9icmlzdG9sLWNpdHkvc3BpZWxwbGFuL3ZlcmVpbi82OTgvc2Fpc29uX2lkLzIwMjIiPkJyaXN0b2wgQ2l0eTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjQwMTgzNDUiIGhyZWY9Ii9icmlzdG9sLWNpdHlfbWFuY2hlc3Rlci1jaXR5L2luZGV4L3NwaWVsYmVyaWNodC80MDE4MzQ1Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4wOjMgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhLWN1cC9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvRkFDL3NhaXNvbl9pZC8yMDIyL2dydXBwZS9WRiI+UXVhcnRlci1GaW5hbHM8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+My8xOC8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkJ1cm5sZXkgRkMiIGhyZWY9Ii9mYy1idXJubGV5L3NwaWVscGxhbi92ZXJlaW4vMTEzMi9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTEzMl8xNjg2OTAwMTQ5LnBuZz9sbT0xNjg2OTAwMTQ5IiB0aXRsZT0iJm5ic3A7IiBhbHQ9IkJ1cm5sZXkgRkMiIGNsYXNzPSIiIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItbGlua3MgaGF1cHRsaW5rIj48YSB0aXRsZT0iQnVybmxleSBGQyIgaHJlZj0iL2ZjLWJ1cm5sZXkvc3BpZWxwbGFuL3ZlcmVpbi8xMTMyL3NhaXNvbl9pZC8yMDIyIj5CdXJubGV5PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDAzNTAwOCIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9idXJubGV5LWZjL2luZGV4L3NwaWVsYmVyaWNodC80MDM1MDA4Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij42OjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhLWN1cC9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvRkFDL3NhaXNvbl9pZC8yMDIyL2dydXBwZS9IRiI+U2VtaS1GaW5hbHM8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+NC8yMi8yMzwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IlNoZWZmaWVsZCBVbml0ZWQiIGhyZWY9Ii9zaGVmZmllbGQtdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vMzUwL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8zNTAucG5nP2xtPTE0MDkyNTQxMzgiIHRpdGxlPSJTaGVmZmllbGQgVW5pdGVkIiBhbHQ9IlNoZWZmaWVsZCBVbml0ZWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJTaGVmZmllbGQgVW5pdGVkIiBocmVmPSIvc2hlZmZpZWxkLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzM1MC9zYWlzb25faWQvMjAyMiI+U2hlZmYgVXRkPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA0MjY4OSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9zaGVmZmllbGQtdW5pdGVkL2luZGV4L3NwaWVsYmVyaWNodC80MDQyNjg5Ij48c3BhbiBjbGFzcz0iZ3JlZW50ZXh0Ij4zOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9ImJnX3JvdF8yMCI+CiAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ZhLWN1cC9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvRkFDL3NhaXNvbl9pZC8yMDIyL2dydXBwZS9GRiI+RmluYWw8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+Ni8zLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTWFuY2hlc3RlciBVbml0ZWQiIGhyZWY9Ii9tYW5jaGVzdGVyLXVuaXRlZC9zcGllbHBsYW4vdmVyZWluLzk4NS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvOTg1LnBuZz9sbT0xNDU3OTc1OTAzIiB0aXRsZT0iTWFuY2hlc3RlciBVbml0ZWQiIGFsdD0iTWFuY2hlc3RlciBVbml0ZWQiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJNYW5jaGVzdGVyIFVuaXRlZCIgaHJlZj0iL21hbmNoZXN0ZXItdW5pdGVkL3NwaWVscGxhbi92ZXJlaW4vOTg1L3NhaXNvbl9pZC8yMDIyIj5NYW4gVXRkPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIHRpdGxlPSIiIGNsYXNzPSJlcmdlYm5pcy1saW5rIiBpZD0iNDA2NDczNSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eV9tYW5jaGVzdGVyLXVuaXRlZC9pbmRleC9zcGllbGJlcmljaHQvNDA2NDczNSI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MjoxIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90Ym9keT4KICAgICAgICAgICAgPHRmb290PgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjb2xzcGFuPSIxOCI+CiAgICAgICAgICAgICAgICAgICAgICAgIFNxdWFkOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBTdGFydGluZyBlbGV2ZW46IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIFN1YnN0aXR1dGVkIGluOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBPbiB0aGUgYmVuY2g6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIFN1c3BlbmRlZDogMCwKICAgICAgICAgICAgICAgICAgICAgICAgSW5qdXJlZDogMCAgICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8L3Rmb290PgogICAgICAgIDwvdGFibGU+CiAgICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImJveCI+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50LWJveC1oZWFkbGluZSBjb250ZW50LWJveC1oZWFkbGluZS0taW52ZXJ0ZWQgY29udGVudC1ib3gtaGVhZGxpbmUtLWxvZ28gY29udGVudC1ib3gtaGVhZGxpbmUtLWJvdHRvbS1ib3JkZXJlZCBjb250ZW50LWJveC1oZWFkbGluZS0tZXh0cmEtc3BhY2UiPgogICAgICAgIDxhIG5hbWU9IkNHQiIgaHJlZj0iL2VmbC1jdXAvc3RhcnRzZWl0ZS93ZXR0YmV3ZXJiL0NHQi9zYWlzb25faWQvMjAyMiI+CiAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2xvZ28vbWVkaXVtL2NnYi5wbmc/bG09MTU2NjkzNzM0MiIgdGl0bGU9IkVGTCBDdXAiIGFsdD0iRUZMIEN1cCIgY2xhc3M9IiIgLz5FRkwgQ3VwICAgICAgICA8L2E+CiAgICA8L2Rpdj4KICAgIAo8ZGl2IGNsYXNzPSJ0bS10YWJzIj4KICAgIDxhIGNsYXNzPSJ0bS10YWIgdG0tdGFiX19hY3RpdmUtLXBhcmVudCIgaHJlZj0iL3Njb3R0LWNhcnNvbi9sZWlzdHVuZ3NkYXRlbi9zcGllbGVyLzE0NTU1L3NhaXNvbi8yMDIyIj48ZGl2IGNsYXNzPSIgdG0tdGFiX19hY3RpdmUiPjxzcGFuPkNvbXBhY3Q8L3NwYW4+PC9kaXY+PC9hPjxhIGNsYXNzPSJ0bS10YWIiIGhyZWY9Ii9zY290dC1jYXJzb24vbGVpc3R1bmdzZGF0ZW4vc3BpZWxlci8xNDU1NS9zYWlzb24vMjAyMi9wbHVzLzEiPjxkaXYgY2xhc3M9IiI+PHNwYW4+RGV0YWlsZWQ8L3NwYW4+PC9kaXY+PC9hPjwvZGl2PgogICAgPGRpdiBjbGFzcz0icmVzcG9uc2l2ZS10YWJsZSI+CiAgICAgICAgPHRhYmxlPgogICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPk1hdGNoZGF5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+RGF0ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij5WZW51ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj5Gb3I8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8dGggY29sc3Bhbj0iMiI+T3Bwb25lbnQ8L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlJlc3VsdDwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPlBvcy48L3RoPgogICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iemVudHJpZXJ0Ij48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tdG9yLXRhYmxlLWhlYWRlciIgdGl0bGU9IkdvYWxzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLXZvcmxhZ2UtdGFibGUtaGVhZGVyIiB0aXRsZT0iQXNzaXN0cyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iWWVsbG93IGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWdlbGJyb3Rla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iU2Vjb25kIHllbGxvdyBjYXJkcyI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi1yb3Rla2FydGUtdGFibGUtaGVhZGVyIiB0aXRsZT0iUmVkIGNhcmRzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0icmVjaHRzIj48c3BhbiBjbGFzcz0iaWNvbnNfc3ByaXRlIGljb24tbWludXRlbi10YWJsZS1oZWFkZXIiIHRpdGxlPSJNaW51dGVzIHBsYXllZCI+Jm5ic3A7PC9zcGFuPjwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzcz0iYmdfcm90XzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZWZsLWN1cC9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvQ0dCL3NhaXNvbl9pZC8yMDIyL2dydXBwZS8zUiI+VGhpcmQgUm91bmQ8L2E+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+MTEvOS8yMjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgaGF1cHRsaW5rIj5IPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCIgY29sc3Bhbj0iMiI+PGEgdGl0bGU9Ik1hbmNoZXN0ZXIgQ2l0eSIgaHJlZj0iL21hbmNoZXN0ZXItY2l0eS9zcGllbHBsYW4vdmVyZWluLzI4MS9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMjgxLnBuZz9sbT0xNDY3MzU2MzMxIiB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBhbHQ9Ik1hbmNoZXN0ZXIgQ2l0eSIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgbm8tYm9yZGVyLXJlY2h0cyI+PGEgdGl0bGU9IkNoZWxzZWEgRkMiIGhyZWY9Ii9mYy1jaGVsc2VhL3NwaWVscGxhbi92ZXJlaW4vNjMxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS82MzEucG5nP2xtPTE2ODI0MzU5MTEiIHRpdGxlPSJDaGVsc2VhIEZDIiBhbHQ9IkNoZWxzZWEgRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyBoYXVwdGxpbmsiPjxhIHRpdGxlPSJDaGVsc2VhIEZDIiBocmVmPSIvZmMtY2hlbHNlYS9zcGllbHBsYW4vdmVyZWluLzYzMS9zYWlzb25faWQvMjAyMiI+Q2hlbHNlYTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM5MTE3MDEiIGhyZWY9Ii9tYW5jaGVzdGVyLWNpdHlfY2hlbHNlYS1mYy9pbmRleC9zcGllbGJlcmljaHQvMzkxMTcwMSI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MjowIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPk5vdCBpbiBzcXVhZDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19nZWxiXzIwIj4KICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIvZWZsLWN1cC9zcGllbHRhZy9wb2thbHdldHRiZXdlcmIvQ0dCL3NhaXNvbl9pZC8yMDIyL2dydXBwZS80UiI+Rm91cnRoIFJvdW5kPC9hPgogICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjEyLzIyLzIyPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkg8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iTGl2ZXJwb29sIEZDIiBocmVmPSIvZmMtbGl2ZXJwb29sL3NwaWVscGxhbi92ZXJlaW4vMzEvc2Fpc29uX2lkLzIwMjIiPjxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL3dhcHBlbi90aW55LzMxLnBuZz9sbT0xNDU2NTY3ODE5IiB0aXRsZT0iTGl2ZXJwb29sIEZDIiBhbHQ9IkxpdmVycG9vbCBGQyIgY2xhc3M9InRpbnlfd2FwcGVuIiAvPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLWxpbmtzIGhhdXB0bGluayI+PGEgdGl0bGU9IkxpdmVycG9vbCBGQyIgaHJlZj0iL2ZjLWxpdmVycG9vbC9zcGllbHBsYW4vdmVyZWluLzMxL3NhaXNvbl9pZC8yMDIyIj5MaXZlcnBvb2w8L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgdGl0bGU9IiIgY2xhc3M9ImVyZ2VibmlzLWxpbmsiIGlkPSIzOTU5ODczIiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5X2xpdmVycG9vbC1mYy9pbmRleC9zcGllbGJlcmljaHQvMzk1OTg3MyI+PHNwYW4gY2xhc3M9ImdyZWVudGV4dCI+MzoyIDwvc3Bhbj48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjgiIGNsYXNzPSJ6ZW50cmllcnQiPm9uIHRoZSBiZW5jaDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRyIGNsYXNzPSJiZ19yb3RfMjAiPgogICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9lZmwtY3VwL3NwaWVsdGFnL3Bva2Fsd2V0dGJld2VyYi9DR0Ivc2Fpc29uX2lkLzIwMjIvZ3J1cHBlL1ZGIj5RdWFydGVyLUZpbmFsczwvYT4KICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij4xLzExLzIzPC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBoYXVwdGxpbmsiPkE8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0IiBjb2xzcGFuPSIyIj48YSB0aXRsZT0iTWFuY2hlc3RlciBDaXR5IiBocmVmPSIvbWFuY2hlc3Rlci1jaXR5L3NwaWVscGxhbi92ZXJlaW4vMjgxL3NhaXNvbl9pZC8yMDIyIj48aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy93YXBwZW4vdGlueS8yODEucG5nP2xtPTE0NjczNTYzMzEiIHRpdGxlPSJNYW5jaGVzdGVyIENpdHkiIGFsdD0iTWFuY2hlc3RlciBDaXR5IiBjbGFzcz0idGlueV93YXBwZW4iIC8+PC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCBuby1ib3JkZXItcmVjaHRzIj48YSB0aXRsZT0iU291dGhhbXB0b24gRkMiIGhyZWY9Ii9mYy1zb3V0aGFtcHRvbi9zcGllbHBsYW4vdmVyZWluLzE4MC9zYWlzb25faWQvMjAyMiI+PGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvd2FwcGVuL3RpbnkvMTgwLnBuZz9sbT0xNDQ0NTYwMDg2IiB0aXRsZT0iU291dGhhbXB0b24gRkMiIGFsdD0iU291dGhhbXB0b24gRkMiIGNsYXNzPSJ0aW55X3dhcHBlbiIgLz48L2E+PC90ZD4KICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9Im5vLWJvcmRlci1saW5rcyAiPjxhIHRpdGxlPSJTb3V0aGFtcHRvbiBGQyIgaHJlZj0iL2ZjLXNvdXRoYW1wdG9uL3NwaWVscGxhbi92ZXJlaW4vMTgwL3NhaXNvbl9pZC8yMDIyIj5Tb3V0aGFtcHRvbjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSB0aXRsZT0iIiBjbGFzcz0iZXJnZWJuaXMtbGluayIgaWQ9IjM5ODkzMDUiIGhyZWY9Ii9zb3V0aGFtcHRvbi1mY19tYW5jaGVzdGVyLWNpdHkvaW5kZXgvc3BpZWxiZXJpY2h0LzM5ODkzMDUiPjxzcGFuIGNsYXNzPSJyZWR0ZXh0Ij4yOjAgPC9zcGFuPjwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY29sc3Bhbj0iOCIgY2xhc3M9InplbnRyaWVydCI+Tm90IGluIHNxdWFkPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICA8dGZvb3Q+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNvbHNwYW49IjE4Ij4KICAgICAgICAgICAgICAgICAgICAgICAgU3F1YWQ6IDEsCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0aW5nIGVsZXZlbjogMCwKICAgICAgICAgICAgICAgICAgICAgICAgU3Vic3RpdHV0ZWQgaW46IDAsCiAgICAgICAgICAgICAgICAgICAgICAgIE9uIHRoZSBiZW5jaDogMSwKICAgICAgICAgICAgICAgICAgICAgICAgU3VzcGVuZGVkOiAwLAogICAgICAgICAgICAgICAgICAgICAgICBJbmp1cmVkOiAwICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGZvb3Q+CiAgICAgICAgPC90YWJsZT4KICAgIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJsYXJnZS00IGNvbHVtbnMiPgogICAgICAgIDxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4vL1JXR3p6dFYoInJlY3RhbmdsZTEiKTwvc2NyaXB0Pgo8ZGl2IGNsYXNzPSJ3ZXJidW5nIGFkLXBsYWNlbWVudC1ub3RlIHdlcmJ1bmctcmVjdGFuZ2xlMSIgZGF0YS1hZC1wbGFjZW1lbnQtbm90ZT0iQWR2ZXJ0aXNlbWVudCI+CiAgPGRpdiBpZD0iZF9zaWRlXzEiIHN0eWxlPSJtaW4td2lkdGg6IDMzNnB4OyBtaW4taGVpZ2h0OiAyODBweDsiPgogICAgPHNjcmlwdD4KICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKCgpID0+IHsKICAgICAgICBnb29nbGV0YWcuZGlzcGxheSgiZF9zaWRlXzEiKTsKICAgICAgICBsZXQgaGFzX2Rfc2lkZV8xX3JlZnJlc2hlZCA9IGZhbHNlOwogICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoZW50cmllcykgPT4gewogICAgICAgICAgZW50cmllcy5mb3JFYWNoKGVudHJ5ID0+IHsKICAgICAgICAgICAgaWYoZW50cnkuaXNJbnRlcnNlY3RpbmcgPT09IHRydWUgJiYgIWhhc19kX3NpZGVfMV9yZWZyZXNoZWQpIHsKICAgICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goKCkgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBJbnRlcnNlY3Rpb25PYnNlcnZlciByZW5kZXJzIGRfc2lkZV8xIiwgImJhY2tncm91bmQ6ICMyODI4Mjg7IGNvbG9yOiAjYmFkYTU1IikKICAgICAgICAgICAgICAgIGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKFthZF9kX3NpZGVfMV0pOwogICAgICAgICAgICAgICAgaGFzX2Rfc2lkZV8xX3JlZnJlc2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0sIHsgdGhyZXNob2xkOiBbMF0sIHJvb3RNYXJnaW46ICIwcHggMHB4IDBweCAwcHgiIH0pOwogICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoIiNkX3NpZGVfMSIpKTsKICAgICAgfSk7CiAgICA8L3NjcmlwdD4KICA8L2Rpdj4KPC9kaXY+Cgo8c3BhbiBjbGFzcz0iUldHenp0Vl9lbmQiPjwvc3Bhbj4KICAgICAgICA8ZGl2IGNsYXNzPSJib3ggaGlkZSI+CiAgICA8aDIgY2xhc3M9ImNvbnRlbnQtYm94LWhlYWRsaW5lIj4KICAgICAgICBQb3NpdGlvbnMgcGxheWVkICAgIDwvaDI+CiAgICA8ZGl2IGNsYXNzPSJjb250ZW50Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJnZXNwaWVsdGVQb3NpdGlvbmVuIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KICAgICAgICA8dG0tcGVyZm9ybWFuY2UtcGVyLWVudGl0eS10YWJsZSB0eXBlPSJjbHViIiBwbGF5ZXItaWQ9IjE0NTU1Ij4KPC90bS1wZXJmb3JtYW5jZS1wZXItZW50aXR5LXRhYmxlPgoKICAgICAgICA8dG0tcGVyZm9ybWFuY2UtcGVyLWVudGl0eS10YWJsZSB0eXBlPSJjb21wZXRpdGlvbiIgcGxheWVyLWlkPSIxNDU1NSI+CjwvdG0tcGVyZm9ybWFuY2UtcGVyLWVudGl0eS10YWJsZT4KICAgICAgICA8ZGl2IGNsYXNzPSJib3giPgogICAgPGgyIGNsYXNzPSJjb250ZW50LWJveC1oZWFkbGluZSI+CiAgICAgICAgTmF0aW9uYWwgdGVhbSBjYXJlZXIgICAgPC9oMj4KICAgIDx0YWJsZT4KICAgICAgICA8dGhlYWQ+CiAgICAgICAgPHRyPgogICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+IzwvdGg+CiAgICAgICAgICAgIDx0aCBjb2xzcGFuPSIyIiBjbGFzcz0iaGlkZS1mb3Itc21hbGwiPk5hdGlvbmFsIHRlYW08L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+RGVidXQ8L3RoPgogICAgICAgICAgICA8dGggY2xhc3M9InplbnRyaWVydCI+PHNwYW4gY2xhc3M9Imljb25zX3Nwcml0ZSBpY29uLWVpbnNhZXR6ZS10YWJsZS1oZWFkZXIiIHRpdGxlPSJNYXRjaGVzIj4mbmJzcDs8L3NwYW4+PC90aD4KICAgICAgICAgICAgPHRoIGNsYXNzPSJ6ZW50cmllcnQiPjxzcGFuIGNsYXNzPSJpY29uc19zcHJpdGUgaWNvbi10b3ItdGFibGUtaGVhZGVyIj48L3NwYW4+PC90aD4KICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5PgogICAgICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgdWViZXJ6ZWlsZSBzaG93LWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9mbGFnZ2UvdmVyeXNtYWxsLzE4OS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkVuZ2xhbmQiIGFsdD0iRW5nbGFuZCIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNvbHNwYW49IjUiIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIHVlYmVyemVpbGUgc2hvdy1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGEgdGl0bGU9IkVuZ2xhbmQiIGhyZWY9Ii9lbmdsYW5kL3N0YXJ0c2VpdGUvdmVyZWluLzMyOTkiPkVuZ2xhbmQ8L2E+ICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgogICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgYmdfcm90XzIwIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3ZlcnlzbWFsbC8xODkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJFbmdsYW5kIiBhbHQ9IkVuZ2xhbmQiIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8YSB0aXRsZT0iRW5nbGFuZCIgaHJlZj0iL2VuZ2xhbmQvc3RhcnRzZWl0ZS92ZXJlaW4vMzI5OSI+RW5nbGFuZDwvYT4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9zcGllbC9pbmRleC9zcGllbGJlcmljaHQvODYzMjAiIHRpdGxlPSJJbnRlcm5hdGlvbmFsIEZyaWVuZGxpZXM6IEF1c3RyaWEgLSBFbmdsYW5kIDA6MSI+Tm92IDE2LCAyMDA3PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvc2NvdHQtY2Fyc29uL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NTU1L3ZlcmVpbl9pZC8zMjk5Ij40PC9hPjwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvc2NvdHQtY2Fyc29uL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NTU1L3ZlcmVpbl9pZC8zMjk5L251ckVpbnNhdHovMiI+LTwvYT48L3RkPgogICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgdWViZXJ6ZWlsZSBzaG93LWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2ltYWdlcy9mbGFnZ2UvdmVyeXNtYWxsLzE4OS5wbmc/bG09MTUyMDYxMTU2OSIgdGl0bGU9IkVuZ2xhbmQiIGFsdD0iRW5nbGFuZCIgY2xhc3M9ImZsYWdnZW5yYWhtZW4iIC8+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNvbHNwYW49IjUiIGNsYXNzPSJoYXVwdGxpbmsgbm8tYm9yZGVyLWxpbmtzIHVlYmVyemVpbGUgc2hvdy1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGEgdGl0bGU9IkVuZ2xhbmQgVTIxIiBocmVmPSIvZW5nbGFuZC11MjEvc3RhcnRzZWl0ZS92ZXJlaW4vOTU2NSI+RW5nbGFuZCBVMjE8L2E+ICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgogICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgYmdfcm90XzIwIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3ZlcnlzbWFsbC8xODkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJFbmdsYW5kIiBhbHQ9IkVuZ2xhbmQiIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8YSB0aXRsZT0iRW5nbGFuZCBVMjEiIGhyZWY9Ii9lbmdsYW5kLXUyMS9zdGFydHNlaXRlL3ZlcmVpbi85NTY1Ij5FbmdsYW5kIFUyMTwvYT4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZlYiAxNywgMjAwNCAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL3Njb3R0LWNhcnNvbi9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDU1NS92ZXJlaW5faWQvOTU2NSI+Mjg8L2E+PC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPjxhIGhyZWY9Ii9zY290dC1jYXJzb24vbmF0aW9uYWxtYW5uc2NoYWZ0L3NwaWVsZXIvMTQ1NTUvdmVyZWluX2lkLzk1NjUvbnVyRWluc2F0ei8yIj4tPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgPHRkIGNsYXNzPSJuby1ib3JkZXItcmVjaHRzIHplbnRyaWVydCB1ZWJlcnplaWxlIHNob3ctZm9yLXNtYWxsIj4KICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJodHRwczovL3Rtc3NsLmFrYW1haXplZC5uZXQvaW1hZ2VzL2ZsYWdnZS92ZXJ5c21hbGwvMTg5LnBuZz9sbT0xNTIwNjExNTY5IiB0aXRsZT0iRW5nbGFuZCIgYWx0PSJFbmdsYW5kIiBjbGFzcz0iZmxhZ2dlbnJhaG1lbiIgLz4gICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8dGQgY29sc3Bhbj0iNSIgY2xhc3M9ImhhdXB0bGluayBuby1ib3JkZXItbGlua3MgdWViZXJ6ZWlsZSBzaG93LWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8YSB0aXRsZT0iRW5nbGFuZCBVMTgiIGhyZWY9Ii9lbmdsYW5kLXUxOC9zdGFydHNlaXRlL3ZlcmVpbi8zMTI2OSI+RW5nbGFuZCBVMTg8L2E+ICAgICAgICAgICAgPC90ZD4KICAgICAgICA8L3RyPgogICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQgYmdfcm90XzIwIj4KICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAtCiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0ibm8tYm9yZGVyLXJlY2h0cyB6ZW50cmllcnQgaGlkZS1mb3Itc21hbGwiPgogICAgICAgICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9pbWFnZXMvZmxhZ2dlL3ZlcnlzbWFsbC8xODkucG5nP2xtPTE1MjA2MTE1NjkiIHRpdGxlPSJFbmdsYW5kIiBhbHQ9IkVuZ2xhbmQiIGNsYXNzPSJmbGFnZ2VucmFobWVuIiAvPiAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iaGF1cHRsaW5rIG5vLWJvcmRlci1saW5rcyBoaWRlLWZvci1zbWFsbCI+CiAgICAgICAgICAgICAgICA8YSB0aXRsZT0iRW5nbGFuZCBVMTgiIGhyZWY9Ii9lbmdsYW5kLXUxOC9zdGFydHNlaXRlL3ZlcmVpbi8zMTI2OSI+RW5nbGFuZCBVMTg8L2E+ICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgPHRkIGNsYXNzPSJ6ZW50cmllcnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgIDx0ZCBjbGFzcz0iemVudHJpZXJ0Ij48YSBocmVmPSIvc2NvdHQtY2Fyc29uL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NTU1L3ZlcmVpbl9pZC8zMTI2OSI+MjwvYT48L3RkPgogICAgICAgICAgICA8dGQgY2xhc3M9InplbnRyaWVydCI+PGEgaHJlZj0iL3Njb3R0LWNhcnNvbi9uYXRpb25hbG1hbm5zY2hhZnQvc3BpZWxlci8xNDU1NS92ZXJlaW5faWQvMzEyNjkvbnVyRWluc2F0ei8yIj4tPC9hPjwvdGQ+CiAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICA8L3RhYmxlPgogICAgICAgICAgICA8YSB0aXRsZT0iU2NvdHQgQ2Fyc29uIiBjbGFzcz0iY29udGVudC1saW5rIiBocmVmPSIvc2NvdHQtY2Fyc29uL25hdGlvbmFsbWFubnNjaGFmdC9zcGllbGVyLzE0NTU1Ij5HbyB0byBuYXRpb25hbCBwbGF5ZXIgcHJvZmlsZTwvYT4gICAgPC9kaXY+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPi8vUldHenp0VigicmVjdGFuZ2xlMiIpPC9zY3JpcHQ+CjxkaXYgY2xhc3M9IndlcmJ1bmcgYWQtcGxhY2VtZW50LW5vdGUgd2VyYnVuZy1yZWN0YW5nbGUyIiBkYXRhLWFkLXBsYWNlbWVudC1ub3RlPSJBZHZlcnRpc2VtZW50Ij4KICA8ZGl2IGlkPSJkX3NpZGVfMiIgc3R5bGU9Im1pbi13aWR0aDogMzM2cHg7IG1pbi1oZWlnaHQ6IDI4MHB4OyI+CiAgICA8c2NyaXB0PgogICAgICBnb29nbGV0YWcuY21kLnB1c2goKCkgPT4gewogICAgICAgIGdvb2dsZXRhZy5kaXNwbGF5KCJkX3NpZGVfMiIpOwogICAgICAgIGxldCBoYXNfZF9zaWRlXzJfcmVmcmVzaGVkID0gZmFsc2U7CiAgICAgICAgdmFyIG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKChlbnRyaWVzKSA9PiB7CiAgICAgICAgICBlbnRyaWVzLmZvckVhY2goZW50cnkgPT4gewogICAgICAgICAgICBpZihlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gdHJ1ZSAmJiAhaGFzX2Rfc2lkZV8yX3JlZnJlc2hlZCkgewogICAgICAgICAgICAgIGdvb2dsZXRhZy5jbWQucHVzaCgoKSA9PiB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oIiVjIFtUTS1BRHNdIEludGVyc2VjdGlvbk9ic2VydmVyIHJlbmRlcnMgZF9zaWRlXzIiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQogICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnJlZnJlc2goW2FkX2Rfc2lkZV8yXSk7CiAgICAgICAgICAgICAgICBoYXNfZF9zaWRlXzJfcmVmcmVzaGVkID0gdHJ1ZTsKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfSwgeyB0aHJlc2hvbGQ6IFswXSwgcm9vdE1hcmdpbjogIjYwMHB4IDBweCAwcHggMHB4IiB9KTsKICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCIjZF9zaWRlXzIiKSk7CiAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgPC9kaXY+CjwvZGl2PgoKPHNwYW4gY2xhc3M9IlJXR3p6dFZfZW5kIj48L3NwYW4+CiAgICA8L2Rpdj4KPC9kaXY+Cgo8c2NyaXB0IGFzeW5jIHNyYz0iL2pzL2N1c3RvbS90bS10cmFjay1saW5rcy5taW4uanMiIHR5cGU9Im1vZHVsZSI+PC9zY3JpcHQ+CgoKPGRpdiBjbGFzcz0id2VyYnVuZyBhZC1wbGFjZW1lbnQtbm90ZSB3ZXJidW5nLWZ1bGxzaXplX2NvbnRlbnRhZCIgZGF0YS1hZC1wbGFjZW1lbnQtbm90ZT0iQWR2ZXJ0aXNlbWVudCI+CiAgPGRpdiBpZD0iZF9ib3R0b21fMSIgc3R5bGU9Im1pbi13aWR0aDogMTAyNHB4OyBtaW4taGVpZ2h0OiAyNTBweDsiPgogICAgPHNjcmlwdD4KICAgICAgZ29vZ2xldGFnLmNtZC5wdXNoKCgpID0+IHsKICAgICAgICBnb29nbGV0YWcuZGlzcGxheSgiZF9ib3R0b21fMSIpOwogICAgICAgIGxldCBoYXNfZF9ib3R0b21fMV9yZWZyZXNoZWQgPSBmYWxzZTsKICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoKGVudHJpZXMpID0+IHsKICAgICAgICAgIGVudHJpZXMuZm9yRWFjaChlbnRyeSA9PiB7CiAgICAgICAgICAgIGlmKGVudHJ5LmlzSW50ZXJzZWN0aW5nID09PSB0cnVlICYmICFoYXNfZF9ib3R0b21fMV9yZWZyZXNoZWQpIHsKICAgICAgICAgICAgICBnb29nbGV0YWcuY21kLnB1c2goKCkgPT4gewogICAgICAgICAgICAgICAgY29uc29sZS5pbmZvKCIlYyBbVE0tQURzXSBJbnRlcnNlY3Rpb25PYnNlcnZlciByZW5kZXJzIGRfYm90dG9tXzEiLCAiYmFja2dyb3VuZDogIzI4MjgyODsgY29sb3I6ICNiYWRhNTUiKQogICAgICAgICAgICAgICAgZ29vZ2xldGFnLnB1YmFkcygpLnJlZnJlc2goW2FkX2RfYm90dG9tXzFdKTsKICAgICAgICAgICAgICAgIGhhc19kX2JvdHRvbV8xX3JlZnJlc2hlZCA9IHRydWU7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pOwogICAgICAgIH0sIHsgdGhyZXNob2xkOiBbMF0sIHJvb3RNYXJnaW46ICI2MDBweCAwcHggMHB4IDBweCIgfSk7CiAgICAgIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiI2RfYm90dG9tXzEiKSk7CiAgICAgIH0pOwogICAgPC9zY3JpcHQ+CiAgPC9kaXY+CjwvZGl2PgoKCiAgICAgICAgPC9tYWluPgoKICAgICAgICA8Zm9vdGVyPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0bS1mb290ZXIiPgogICAgICAgICAgICA8YSBocmVmPSIvIgogICAgICAgICAgIGNsYXNzPSJ0bS1mb290ZXJfX2xvZ28iPgogICAgICAgICAgPGltZyBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2hlYWQvdHJhbnNmZXJtYXJrdF9sb2dvLnN2ZyIgYWx0PSJUcmFuc2Zlcm1hcmt0IiBoZWlnaHQ9IjMzIiB3aWR0aD0iODAiLz4KICAgICAgICA8L2E+CiAgICAgICAgICA8dWwgY2xhc3M9InRtLWZvb3Rlcl9fbGlua3MiPgogICAgPGxpIGNsYXNzPSJ0bS1mb290ZXJfX2xpbmtzLWl0ZW0iPgogICAgICA8YSBocmVmPSIvaW50ZXJuL2ltcHJlc3N1bSI+CiAgICAgICAgICBMZWdhbCBub3RpY2UgICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJ0bS1mb290ZXJfX2xpbmtzLWl0ZW0iPgogICAgICA8YSBocmVmPSIvaW50ZXJuL3dlYi9kYXRlbnNjaHV0eiI+CiAgICAgICAgICBEYXRhIHByb3RlY3Rpb24gICAgICA8L2E+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJ0bS1mb290ZXJfX2xpbmtzLWl0ZW0iPgogICAgICA8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCkiIGNsYXNzPSJjbXAtbGluayI+CiAgICAgICAgICBQcml2YWN5ICAgICAgPC9hPgogICAgPC9saT4KICAgIDxsaSBjbGFzcz0idG0tZm9vdGVyX19saW5rcy1pdGVtIj4KICAgICAgPGEgaHJlZj0iL2ludGVybi9hbmIiPgogICAgICAgICAgR2VuZXJhbCBjb25kaXRpb25zIG9mIHVzZSAgICAgIDwvYT4KICAgIDwvbGk+CiAgICA8bGkgY2xhc3M9InRtLWZvb3Rlcl9fbGlua3MtaXRlbSI+CiAgICAgIDxhIGhyZWY9Ii9pbnRlcm4vdG10ZWFtIj4KICAgICAgICAgIFRNLVRlYW0gICAgICA8L2E+CiAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idG0tZm9vdGVyX19saW5rcy1pdGVtIj4KICAgICAgPGEgaHJlZj0iL2ludGVybi9mYXEiPgogICAgICAgICAgRkFRICAgICAgPC9hPgogICAgPC9saT4KICAgIDxsaSBjbGFzcz0idG0tZm9vdGVyX19saW5rcy1pdGVtIj4KICAgICAgPGEgaHJlZj0iL2ludGVybi9mZWhsZXJtZWxkZW4iPgogICAgICAgICAgRm91bmQgYSBtaXN0YWtlPyAgICAgIDwvYT4KICAgIDwvbGk+CiAgPC91bD4KPC9kaXY+CiAgICAgICAgPC9mb290ZXI+CiAgICAgICAgICAgICAgICA8ZGl2IGlkPSJtZW51ZV9vdmVybGF5Ij48L2Rpdj4KICAgIDwvZGl2PgogICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgoJaWYodHlwZW9mKGFkZXQpID09ICJib29sZWFuIiAmJiBhZGV0ID09IGZhbHNlKXsKCQlpbWdfc3JjPSIvc3RhdGljL3NpbmdsZXBpY3R1cmVzL2prOTloaGZzZGgyMDluYm5ramxkZ2g5MHNnaGZzZGxrIjsKCX0gZWxzZSB7CgkJaW1nX3NyYz0iL3N0YXRpYy9zaW5nbGVwaWN0dXJlcy9qa3U5MHdoamxramJ3YnRhMWc0YjhoODlmaDhzZ2g4ZCI7Cgl9Cgl2YXIgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImltZyIpOwoJZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtKTsKCWVsZW0uc3JjID0gaW1nX3NyYzsKPC9zY3JpcHQ+CgogICAgICAgICAgICA8c2NyaXB0PgogICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICB2YXIgY250ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnZGl2LmxhcmdlLTQuY29sdW1ucycpLmxlbmd0aDsKICAgICAgICAgICAgICAgIGlmIChjbnQgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIHZhciBzaWRlYmFyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LmxhcmdlLTQuY29sdW1ucycpOwogICAgICAgICAgICAgICAgICAgIGlmIChzaWRlYmFyRGl2ICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaWRlYmFyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3dlcmJ1bmdfcmVjb21tZW5kZXJfc2lkZWJhcl93cmFwcGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNpZGViYXJEaXYuYXBwZW5kQ2hpbGQoc2lkZWJhcik7CiAgICAgICAgICAgICAgICAgICAgICAgIHNpZGViYXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICA8L3NjcmlwdD4KICAgICAgICA8ZGl2IGlkPSJ3ZXJidW5nX3JlY29tbWVuZGVyX3NpZGViYXJfd3JhcHBlciIgc3R5bGU9ImRpc3BsYXk6IG5vbmU7Ij4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDxzY3JpcHQgdHlwZT0ibW9kdWxlIiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL2N1c3RvbS1lbGVtZW50LWdsb2JhbHMvdG0tZ2xvYmFsLWVsZW1lbnRzLmVzbS5qcyIgZGVmZXI+PC9zY3JpcHQ+PHNjcmlwdCBub21vZHVsZT0iIiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL2N1c3RvbS1lbGVtZW50LWdsb2JhbHMvdG0tZ2xvYmFsLWVsZW1lbnRzLmpzIiBkZWZlcj48L3NjcmlwdD48dG0tY29uc2VudCB0eXBlPSJhZGl0aW9uIiBuby1jaGVja2JveCBlbWJlZD0iUEhOamNtbHdkQ0J6Y21NOUltaDBkSEJ6T2k4dlkzSmxZWFJwZG1VdFkyUnVMbTlrWkhOelpYSjJaUzVqYjIwdmJHOWhaR1Z5TG1welAzQjFZbXhwYzJobGNqMTBiU0lnWVhONWJtTTlJbUZ6ZVc1aklqNDhMM05qY21sd2REND0iPjwvdG0tY29uc2VudD4gICAgCjx0bS1jb25zZW50IHR5cGU9InB1Ym1hdGljIiBuby1jaGVja2JveCBlbWJlZD0iUEhOamNtbHdkQ0IwZVhCbFBTZDBaWGgwTDJwaGRtRnpZM0pwY0hRblBnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdVRmRVUFh0OU93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdaMjl2WjJ4bGRHRm5JRDBnWjI5dloyeGxkR0ZuSUh4OElIdDlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm5iMjluYkdWMFlXY3VZMjFrSUQwZ1oyOXZaMnhsZEdGbkxtTnRaQ0I4ZkNCYlhUc0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2R3ZEZKaGJpQTlJR1poYkhObE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUVYxUXVhbk5NYjJGa1pXUWdQU0FvS1NBOVBpQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYjJGa1IxQlVLQ2s3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDA3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCc2IyRmtSMUJVSUQwZ1puVnVZM1JwYjI0b0tTQjdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXZHdkRkpoYmlrZ2V3b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkd2RGSmhiaUE5SUhSeWRXVTdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2RoWkhNZ1BTQmtiMk4xYldWdWRDNWpjbVZoZEdWRmJHVnRaVzUwS0NkelkzSnBjSFFuS1RzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2RYTmxVMU5NSUQwZ0oyaDBkSEJ6T2ljZ1BUMGdaRzlqZFcxbGJuUXViRzlqWVhScGIyNHVjSEp2ZEc5amIydzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1oyRmtjeTV6Y21NZ1BTQW9kWE5sVTFOTUlEOGdKMmgwZEhCek9pY2dPaUFuYUhSMGNEb25LU0FySUNjdkwzTmxZM1Z5WlhCMVltRmtjeTVuTG1SdmRXSnNaV05zYVdOckxtNWxkQzkwWVdjdmFuTXZaM0IwTG1wekp6c0tJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibTlrWlNBOUlHUnZZM1Z0Wlc1MExtZGxkRVZzWlcxbGJuUnpRbmxVWVdkT1lXMWxLQ2R6WTNKcGNIUW5LVnN3WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1YjJSbExuQmhjbVZ1ZEU1dlpHVXVhVzV6WlhKMFFtVm1iM0psS0dkaFpITXNJRzV2WkdVcE93b2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJHWVdsc2MyRm1aU0IwYnlCallXeHNJR2R3ZEFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhSVWFXMWxiM1YwS0d4dllXUkhVRlFzSURVd01DazdDZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9ablZ1WTNScGIyNG9LU0I3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjSFZ5YkNBOUlIZHBibVJ2ZHk1c2IyTmhkR2x2Ymk1b2NtVm1Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlIVnliQ0E5SUNjdkwyRmtjeTV3ZFdKdFlYUnBZeTVqYjIwdlFXUlRaWEoyWlhJdmFuTXZjSGQwTHpFMk16SXlPUzh4TURFd015YzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2NISnZabWxzWlZabGNuTnBiMjVKWkNBOUlDY25Pd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZb2NIVnliQzVwYm1SbGVFOW1LQ2R3ZDNSMlBTY3BQakFwZXdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeVpXZGxlSEFnUFNBdmNIZDBkajBvTGlvL0tTZ21mQ1FwTDJjN0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjJZWElnYldGMFkyaGxjeUE5SUhKbFoyVjRjQzVsZUdWaktIQjFjbXdwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9iV0YwWTJobGN5NXNaVzVuZEdnZ1BqMGdNaUFtSmlCdFlYUmphR1Z6V3pGZExteGxibWQwYUNBK0lEQXBld29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliMlpwYkdWV1pYSnphVzl1U1dRZ1BTQW5MeWNyYldGMFkyaGxjMXN4WFRzS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZRb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUhkMFlXUnpJRDBnWkc5amRXMWxiblF1WTNKbFlYUmxSV3hsYldWdWRDZ25jMk55YVhCMEp5azdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzZEdGa2N5NWhjM2x1WXlBOUlIUnlkV1U3Q2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2RHRmtjeTUwZVhCbElEMGdKM1JsZUhRdmFtRjJZWE5qY21sd2RDYzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IzZEdGa2N5NXpjbU1nUFNCMWNtd3JjSEp2Wm1sc1pWWmxjbk5wYjI1SlpDc25MM0IzZEM1cWN5YzdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2JtOWtaU0E5SUdSdlkzVnRaVzUwTG1kbGRFVnNaVzFsYm5SelFubFVZV2RPWVcxbEtDZHpZM0pwY0hRbktWc3dYVHNLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1dlpHVXVjR0Z5Wlc1MFRtOWtaUzVwYm5ObGNuUkNaV1p2Y21Vb2QzUmhaSE1zSUc1dlpHVXBPd29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlLU2dwT3dvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZjMk55YVhCMFBnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQT09Ij48L3RtLWNvbnNlbnQ+PHRtLWNvbnNlbnQgdHlwZT0iZ29vZ2xlYWR2ZXJ0aXNpbmciIG5vLWNoZWNrYm94IGVtYmVkPSJQSE5qY21sd2RDQWdjM0pqUFNKb2RIUndjem92TDNObFkzVnlaWEIxWW1Ga2N5NW5MbVJ2ZFdKc1pXTnNhV05yTG01bGRDOTBZV2N2YW5NdlozQjBMbXB6SWlCaGMzbHVZejBpWVhONWJtTWlQand2YzJOeWFYQjBQZz09Ij48L3RtLWNvbnNlbnQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL3N2ZWx0ZS1jb21wb25lbnRzL3N1Ym5hdmlnYXRpb24vYnVuZGxlLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2Fzc2V0cy9hYTY5YzZlOWM1MWYxZTgxMTg0NzA4MmM2MzYzMzk1Ni9ncmlkdmlldy9qcXVlcnkueWlpZ3JpZHZpZXcuanM/bG09MTcxNzA3ODE1OCI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL3N2ZWx0ZS1jb21wb25lbnRzL3BsYXllci1wZXJmb3JtYW5jZS1wZXItZW50aXR5L2J1bmRsZS5qcyI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9qcy9jdXN0b20vdG0tbWVudS5taW4uanM/bG09MTcxNzA3ODE1NiI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zc2wuYWthbWFpemVkLm5ldC9qcy9jdXN0b20vdmVuZG9ycy5taW4uanM/bG09MTcxNzA3ODE1NiI+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Imh0dHBzOi8vdG1zaS5ha2FtYWl6ZWQubmV0L2pzL3N2ZWx0ZS1jb21wb25lbnRzL2NvbnNlbnQvYnVuZGxlLmpzIj48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIHNyYz0iaHR0cHM6Ly90bXNzbC5ha2FtYWl6ZWQubmV0L2pzL2N1c3RvbS90bS1za3lzY3JhcGVyLm1pbi5qcz9sbT0xNzE3MDc4MTU2Ij48L3NjcmlwdD4KPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPgovKjwhW0NEQVRBWyovCgl2YXIgbG9naW5Vcmw9Jy9wcm9maWwvbG9naW4nOwoJdmFyIG9ubHlERSA9ICcnOwoJdmFyIG9ubHlNb2JpbGUgPSAnJzsKCXZhciBvbmx5VGFibGV0ID0gJyc7Cgl2YXIgZ2V0VXNlcklEID0gJyc7CgpqUXVlcnkoZnVuY3Rpb24oJCkgewpqUXVlcnkoJyN5dzEnKS55aWlHcmlkVmlldyh7J2FqYXhVcGRhdGUnOlsneXcxJ10sJ2FqYXhWYXInOidhamF4JywncGFnZXJDbGFzcyc6J3BhZ2VyJywnbG9hZGluZ0NsYXNzJzonZ3JpZFx4MkR2aWV3XHgyRGxvYWRpbmcnLCdmaWx0ZXJDbGFzcyc6J2ZpbHRlcnMnLCd0YWJsZUNsYXNzJzonaXRlbXMnLCdzZWxlY3RhYmxlUm93cyc6MSwnZW5hYmxlSGlzdG9yeSc6ZmFsc2UsJ3VwZGF0ZVNlbGVjdG9yJzonXHg3QnBhZ2VceDdELFx4MjBceDdCc29ydFx4N0QnLCdmaWx0ZXJTZWxlY3Rvcic6J1x4N0JmaWx0ZXJceDdEJywnYWZ0ZXJBamF4VXBkYXRlJzpmdW5jdGlvbigpIHt3aW5kb3cuTGF6eUxvYWRJbnN0YW5jZS51cGRhdGUoKTsgdG1UcmFja2luZ0FuZEFkcygpOyB0cmFja0xpbmtzKCk7IGRvY3VtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCJ0bUluaXRUb29sdGlwIikpO319KTsKfSk7Ci8qXV0+Ki8KPC9zY3JpcHQ+CjwvYm9keT4KCjwvaHRtbD4K
  recorded_at: Sun, 02 Jun 2024 15:04:31 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/14555/plus/0?saison=2023
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 02 Jun 2024 15:04:32 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - prod-tm-web-server-11211
      Set-Cookie:
      - TMSESSID=eb95a3ac5d2e16970dc13c38727f5bbe; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Last-Modified:
      - Sun, 02 Jun 2024 15:04:31 GMT
      X-Frame-Options:
      - DENY
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 90ecdc7529deb4cf6ecb56c4626e0ac8.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - tR31aENGbQ4jL_qzH7Mix3bu60JoZXWOKSX01xquuUQNPES55MzC-w==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 02 Jun 2024 15:04:32 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/14555/plus/0?saison=2022
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 02 Jun 2024 15:04:32 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - prod-tm-web-server-1223
      Set-Cookie:
      - TMSESSID=cd98a8f4e6d073184f507c27c6daea82; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      X-Last-Modified:
      - Sun, 02 Jun 2024 15:04:32 GMT
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 1a77be77b0d4f395c20654f9f7d676c4.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - rN2zui-cobvQ8rO052xG7jvGYmO3bG4RXLnUbXsjU-jXZWufjZrz7Q==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sun, 02 Jun 2024 15:04:32 GMT
recorded_with: VCR 6.2.0
