---
http_interactions:
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/plus/0?saison=2023
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 15:14:57 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web03
      Set-Cookie:
      - TMSESSID=ce6ecc72a397e218cee1ebdf1b557fc4; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 28de398d6bd20bc440c06f568b49c876.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - _bGl7_uI6KNCFxgSWAZn4VThJFJrXyHzrjPrOZpU16__3ZsY36ezYg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">

<head>
    
<script type="text/javascript" data-description="sourcepoint stub code">
    !function () { var e = function () { var e, t = "__tcfapiLocator", a = [], n = window; for (; n;) { try { if (n.frames[t]) { e = n; break } } catch (e) { } if (n === window.top) break; n = n.parent } e || (!function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var i = a.createElement("iframe"); i.style.cssText = "display:none", i.name = t, a.body.appendChild(i) } else setTimeout(e, 5); return !r }(), n.__tcfapi = function () { for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++)n[r] = arguments[r]; if (!n.length) return a; if ("setGdprApplies" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && "boolean" == typeof n[3] && (e = n[3], "function" == typeof n[2] && n[2]("set", !0)); else if ("ping" === n[0]) { var i = { gdprApplies: e, cmpLoaded: !1, cmpStatus: "stub" }; "function" == typeof n[2] && n[2](i) } else a.push(n) }, n.addEventListener("message", (function (e) { var t = "string" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data } catch (e) { } var n = a.__tcfapiCall; n && window.__tcfapi(n.command, n.version, (function (a, r) { var i = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId } }; t && (i = JSON.stringify(i)), e.source.postMessage(i, "*") }), n.parameter) }), !1)) }; "undefined" != typeof module ? module.exports = e : e() }();
</script>
<script data-description="sourcepoint configuration">
window._sp_ = {
    config: {"accountId":1254,"propertyId":7427,"gdpr":{"consentLanguage":"en","targetingParams":{"acps":"false"}},"baseEndpoint":"https://cdn.privacy-mgmt.com","isSPA":true,"cpPropertyId":"7a84b340"}}
</script>
<script src="https://cdn.privacy-mgmt.com/wrapperMessagingWithoutDetection.js" async></script>

<script type="text/javascript" data-description="contentpass integration">
    (function() {
        var cpBaseUrl = 'https://cp.transfermarkt.com';
        var cpController = cpBaseUrl + '/now.js';
        var cpPropertyId = '7a84b340';

        !function(C,o,n,t,P,a,s){C['CPObject']=n;C[n]||(C[n]=function(){
        (C[n].q=C[n].q||[]).push(arguments)});C[n].l=+new Date;a=o.createElement(t);
        s=o.getElementsByTagName(t)[0];a.src=P;s.parentNode.insertBefore(a,s)}
        (window,document,'cp','script',cpController);

        !function(C,o,n,t,P){if(!C[n].patched){cp('extension','authenticate');P=C[n].q.push;
        C[n].q.push=function(a){if(a[0]==='authenticate'){if((o['cookie']||'').indexOf('_cpauthhint=')===-1&&
        !(C['localStorage']||{})['_cpuser']&&C.location.href.toLowerCase().indexOf('cpauthenticated')===-1){
        t={isLoggedIn:function(){return false;},hasValidSubscription:function(){return false;}};
        (typeof a[1]==='function'&&a[1](null,t));C[n].afp=true;P.apply(C[n].q,[['authenticate',null]]);
        return t;}}P.apply(C[n].q,[a]);}}}
        (window,document,'cp',false);

        cp('create', cpPropertyId, {
        baseUrl: cpBaseUrl
        });

        cp('render', {
        onFullConsent: function() {
            console.log('[DEMO] onFullConsent');
        }
        })
    })()
</script>

<script type="text/javascript" data-description="contentpass sourcepoint fast path">
(function () {
    cp('authenticate', function(err, user) {
        if (err || (!user.isLoggedIn() && !user.hasValidSubscription())) {
        console.log('[SPCP] Taking fast path');
        (function spExecMsg() {
            if (window._sp_ && window._sp_.executeMessaging) {
            if (!window._sp_.config.isSPA) {
                console.warn('[SPCP] Sourcepoint not in SPA mode!');
            } else if (window._sp_.version) {
                console.log('[SPCP] Sourcepoint already running');
            } else {
                console.log('[SPCP] Starting Sourcepoint');
                window._sp_.executeMessaging();
            }
            } else {
            console.log('[SPCP] Sourcepoint not loaded yet. Retrying.');
            setTimeout(spExecMsg, 10);
            }
        })();
        }
    });
    })();
</script>
    <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" sizes="16x16" href="/favicon-16x16.png">
    <link rel="shortcut icon" sizes="192x192" href="/android-chrome-192x192.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=no" />
<meta name="robots" content="noindex, nofollow" />
<meta name="keywords" content="Nicolò Zaniolo,Aston Villa,Premier League,Italy" />
<meta name="description" content="Player stats of Nicolò Zaniolo (Aston Villa) ➤ Goals ➤ Assists ➤ Matches played ➤ All performance data" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://img.a.transfermarkt.technology/portrait/big/392085-1630498680.jpg?lm=1" />
<meta property="og:description" content="" />
<meta property="og:title" content="Nicolò Zaniolo - Stats 23/24" />
<meta property="og:url" content="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/plus/0?saison=2023" />
<link hreflang="de" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="de-LU" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="de-AT" rel="alternate" href="https://www.transfermarkt.at/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="de-CH" rel="alternate" href="https://www.transfermarkt.ch/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="tr" rel="alternate" href="https://www.transfermarkt.com.tr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="it-CH" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="it" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="pl" rel="alternate" href="https://www.transfermarkt.pl/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="en-GB" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="en-IE" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-ES" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-CL" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-VE" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-EC" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-CU" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="nl" rel="alternate" href="https://www.transfermarkt.nl/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="pt" rel="alternate" href="https://www.transfermarkt.pt/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="ru" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="world" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="fr-CH" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="fr" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="fr-CA" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="fr-CI" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="fr-LU" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="fr-BE" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="pt-BR" rel="alternate" href="https://www.transfermarkt.com.br/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="en-US" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="en-CA" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="en-IN" rel="alternate" href="https://www.transfermarkt.co.in/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="en-ZA" rel="alternate" href="https://www.transfermarkt.co.za/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="x-default" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="en" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="nl-BE" rel="alternate" href="https://www.transfermarkt.be/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="ro" rel="alternate" href="https://www.transfermarkt.ro/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="el-GR" rel="alternate" href="https://www.transfermarkt.gr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="ko-KR" rel="alternate" href="https://www.transfermarkt.co.kr/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-AR" rel="alternate" href="https://www.transfermarkt.com.ar/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-MX" rel="alternate" href="https://www.transfermarkt.mx/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-CO" rel="alternate" href="https://www.transfermarkt.co/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="es-PE" rel="alternate" href="https://www.transfermarkt.pe/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="ms" rel="alternate" href="https://www.transfermarkt.my/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="ja" rel="alternate" href="https://www.transfermarkt.jp/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link hreflang="id" rel="alternate" href="https://www.transfermarkt.co.id/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/menue.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-main.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main_desktop.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/print.css?_sn=1?lm=1703164027" media="print" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/chosen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-player-profile.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/gespieltePositionen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/statistiken.css?lm=1703164027" />
<script type="text/javascript" src="https://tmssl.akamaized.net/js/vendor/jquery.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/b7c5571cf8957553f95f6d9069eaed67/jquery.ba-bbq.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.ajaxaddition.jquery.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/functions.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main_desktop.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.jquery.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
console.info("%c [TM-ADs] Initialize Ads on domain com (wettbewerbe_profile_spieler | spieler/leistungsdaten)", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle1 (div-gpt-ad-1621526463511-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle2 (div-gpt-ad-1621528018930-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraper (div-gpt-ad-1621527521939-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraperbtf (div-gpt-ad-1621528123398-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render billboard (div-gpt-ad-1621524903956-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render fullsize_contentad (div-gpt-ad-1621528173524-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] No ad configuration found for richmedia", "background: #222; color: #bada55")
    var oddsServe = function(placement,competition,match,node) {
        if (!node){
            var s=document.readyState==='loading'?document.getElementsByTagName('script'):[];
            node=s.length?s[s.length-1].parentNode:null;
        }
        oddsServe.queue.push({contentUnitId:placement,competition:competition,match:match,node:node});
    }
    
    oddsServe.onInit=function(callbacks){
        if (typeof window.__tcfapi === 'function') {
            __tcfapi('addEventListener', 2, function(tcdata, success) {
                let tcf20compatibleString;
                if(success) {
                    if (tcdata.eventStatus === 'useractioncomplete') {
                        tcf20compatibleString = tcdata.tcString;
                    } else if (tcdata.eventStatus === 'tcloaded') {
                        tcf20compatibleString = tcdata.tcString;
                    }
                    callbacks.setGdprOptions({
                        gdpr:1,
                        gdpr_pd:1,
                        gdpr_consent:tcf20compatibleString,
                    });
                }
            });
        } else {
            console.warn('E2: __tcfapi not found');
        }
    };
    oddsServe.options={gdpr_wait:true};
    oddsServe.queue=[];
console.info("%c [TM-ADs] Add initScript for slots: rectangle1 | rectangle2 | skyscraper | skyscraperbtf | billboard | fullsize_contentad", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Register slots with JS vendor lib", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render ad slots js for google", "background: #222; color: #bada55")
PWT = {};
window.googletag = window.googletag || {cmd: []};
googletag.cmd.push(() => {
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-1",
    [[960,90],[970,250],[950,90],[728,90],[970,90]],
    "div-gpt-ad-1621524903956-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-1",
    [[300,250],[336,280]],
    "div-gpt-ad-1621526463511-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-2",
    [[300,250],[336,280]],
    "div-gpt-ad-1621528018930-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-1",
    [[160,600],[336,280],[300,250],[300,600],[120, 600]],
    "div-gpt-ad-1621527521939-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-2",
    [[300,250],[336,280],[160,600],[300,600],[120, 600]],
    "div-gpt-ad-1621528123398-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-2",
    [[950,90],[970,250],[728,90],[970,90],[960,90],[300, 250]],
    "div-gpt-ad-1621528173524-0"
  ) 
.addService(googletag.pubads());
  googletag.pubads().enableLazyLoad({
    fetchMarginPercent: 500,
    renderMarginPercent: 200,
    mobileScaling: 2.0
  });
  googletag.pubads().setCentering(true);
  googletag.pubads().disableInitialLoad();
  googletag.pubads().enableSingleRequest();
  googletag.pubads().setTargeting("cg1", ["spieler"]);
  googletag.pubads().setTargeting("URL", "www.transfermarkt.com");
  googletag.enableServices();
});

console.info("%c [TM-ADs] Added external ad script(s) for vendor google", "background: #222; color: #bada55")
/*]]>*/
</script>
<title>Nicolò Zaniolo - Stats 23/24 | Transfermarkt</title>
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-152x152.png">
            <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/manager/base/es6/bundle.js" as="script" id="IOMmBundle">
        <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js" as="script">
        <script type="text/javascript" src="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js"></script>
    
<script type="text/javascript">
   tmData = {
       loggedIn : "0",
       tmTraffic: "0",
   };
</script>
<script>// Set to the same value as the web property used on the site
		var gaProperty = 'UA-3816204-13';

		// Disable tracking if the opt-out cookie exists.
		var disableStr = 'ga-disable-' + gaProperty;
		if (document.cookie.indexOf(disableStr + '=true') > -1) {
			window[disableStr] = true;
		}

		// Opt-out function
		function gaOptout() {
			document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
			window[disableStr] = true;
		}</script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag() { dataLayer.push(arguments); } 
   gtag('set', 'linker', { 'domains': [/^transfermarkt\.(com|de|nl|it|at|ch|es|fr|com\.tr|pt|tv|pl|co\.uk)$/]});
   gtag('js', new Date()); 
   gtag('set',
  {
    'custom_map': {
                    'dimension1': 'loggedIn',
                    'dimension2': 'tmTraffic'
                }
  });
        gtag('config', 'UA-3816204-13', {
                'anonymize_ip': true,
                'transport_type': 'beacon',
                'content_group1': 'statistik',
                'content_group2': 'spieler',
                'content_group3': 'leistungsdaten',
                'content_group4': '392085',
                'loggedIn': tmData.loggedIn,
                'tmTraffic': tmData.tmTraffic
            }); 
   function tmEvent(category, action, label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event',
                    action,
                    {
                        'event_category': category,
                        'event_label': label
                    }
                );
            }

            function tmTiming(value, name, event_category, event_label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event', 'timing_complete', {
                    name,
                    value,
                    event_category,
                    event_label
                });
            }
            
	</script>    <script type="text/javascript" src="https://tmssl.akamaized.net//ads/ads.js"></script>
    <script type="text/javascript">
        window.tmGaId = "UA-3816204-13";
    </script>

            <link rel="canonical" href="https://www.transfermarkt.com/nicolo-zaniolo/leistungsdaten/spieler/392085">
    <!-- no Tisoomi -->
    </head>

<body class="" itemscope itemtype="http://schema.org/WebPage" data-tm-tld="com" data-cmp-layer-id="910164">
    
                <tm-language-hint></tm-language-hint>
        <div id="main">
                <div class="werbung-skyscraper-container">
            <div class="werbung werbung-skyscraper">
  <div id="div-gpt-ad-1621527521939-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621527521939-0"); });</script>
  </div>
</div>
        </div>

        <div class="werbung-skyscraperbtf-container">
            <div class="werbung werbung-skyscraperbtf">
  <div id="div-gpt-ad-1621528123398-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528123398-0"); });</script>
  </div>
</div>
        </div>
        
        <header class="tm-header">
                            <div class="tm-header__box ">
                                            <a href="/">
                            <img class="icon-logo" src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" height="62" width="156" title="Transfermarkt" alt="Transfermarkt">
                        </a>
                                                                <tm-domainswitcher open-list="false" tld="com"></tm-domainswitcher>
                                            <div class="tm-header__social-box">
                        <a href="https://www.facebook.com/Transfermarkt.global" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Facebook');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/fb_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://twitter.com/TMuk_news" target="_blank" class="header__social-link header__social-link--twitter" onclick="tmEvent('SM-Icons_Header','click','Twitter');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/twitter.svg" width="20" height="20" class="header__icon header__icon--twitter">
                </a>
                <a href="http://instagram.com/transfermarkt_official" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Instagram');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/instagram_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="/intern/rssguide" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','RSS');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/rss_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://www.tiktok.com/@transfermarkt" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Tiktok');
">
                    <img src="https://tmsi.akamaized.net/icons/tiktokRebrush.svg" width="20" height="20" class="header__icon">
                </a>
                    </div>
                            <div class="tm-header__input-wrapper " id="schnellsuche-platz">
                            <form name="schnellsuche" id="schnellsuche" class="tm-header__form" action="/schnellsuche/ergebnis/schnellsuche">
                                <input type="text" name="query" class="tm-header__input--search-field" onClick="" placeholder="Enter your search term" autocorrect="off" spellcheck="false" value="" />
                                <input type="submit" value="" class="tm-header__input--search-send" alt="search" />
                            </form>
                            <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="tm-header__search-detail">
                                <img src="https://tmsi.akamaized.net/icons/search_icon_plus_blue_white.svg" alt="search" class="tm-header__icon-detail-search" height="26" width="26">
                            </a>
                        </div>
                                    </div>
            
            <nav class="main-navbar navihalter">
                                                                        <ul class="main-navbar__container megamenu_dark_bar megamenu_dark" itemscope="itemscope" itemtype="http://www.schema.org/SiteNavigationElement">
                    <a href="/" class="sticky-logo hide-for-small">
                <span title="Transfermarkt" class="tm_svg"></span>
            </a>
            
    <li class="main-navbar__list" data-nav-group="news">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('News','click','menu');
"
            >
            News        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="transfers">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Transfers & Gerüchte','click','menu');
"
            >
            Transfers & rumours        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="marktwerte">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Marktwerte','click','menu');
"
            >
            Market values        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list aktiv" data-nav-group="wettbewerbe">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Wettbewerbe','click','menu');
"
            >
            Competitions        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="foren">
                <a
            class="main-navbar__list-title tm-main-nav-el"
            href="/uebersicht/index/forum/com"
            onClick="tmEvent('Foren','click','menu');
"
            >
            Forums                    </a>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="meintm">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('MeinTM','click','menu');
"
            >
            My TM        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" >
                <a
            class="main-navbar__list-title tm-main-nav-el live-navilink"
            href="/ticker/index/live"
            onClick="tmEvent('Live','click','menu');
"
            >
            Live                            <tm-live-match-counter auto-request="true" content='["Live maches", "Live matches"]'></tm-live-match-counter>
                    </a>
            </li>
</ul>

                
                <form name="schnellsuche" id="schnellsuche-sticky" class="noclose sticky-suche" action="/schnellsuche/ergebnis/schnellsuche">
                    <input type="text" name="query" class="header-suche" onClick="" placeholder="Enter your search term" />
                    <input type="image" class="header-suche-abschicken" src="https://tmssl.akamaized.net//images/suchicon.png" alt="search" />
                </form>
                <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="header-suche-detailsuche">
                    <span class="icon-detailsuche"></span>
                </a>
                                    <a id="arrow-up-xy" href="#">
                        <svg style="fill: white; width: 20px; height: 20px;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                            <g>
                                <path d="M78.016,49.132L51.961,12.714c-0.471-0.66-1.233-1.049-2.043-1.051c-0.006,0-0.006,0-0.006,0
                                c-0.815,0.002-1.575,0.396-2.048,1.059L21.977,49.14c-0.546,0.767-0.616,1.776-0.183,2.612c0.426,0.835,1.292,1.361,2.236,1.361
                                h12.183l-0.001,32.709c0,1.39,1.125,2.515,2.516,2.515l22.541-0.001c1.389,0.001,2.515-1.124,2.516-2.517l0-32.705h12.187
                                c0.94,0,1.803-0.53,2.237-1.367C78.641,50.911,78.566,49.9,78.016,49.132z" />
                            </g>
                        </svg>
                    </a>
                <div class="tm-login " id="login" onClick="tmEvent('login','click','sign_in_button');
">
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     fill="#FFF" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="tm-login__image">
        <g>
            <path d="M80.161,60.441l-15.66-7.47l-6.622-3.159c2.892-1.822,5.241-4.634,6.778-8.022c1.22-2.69,1.946-5.734,1.946-8.99
                c0-1.827-0.29-3.562-0.694-5.236C63.94,19.453,57.605,13.477,50,13.477c-7.461,0-13.701,5.763-15.792,13.645
                c-0.482,1.808-0.815,3.688-0.815,5.68c0,3.459,0.808,6.684,2.181,9.489c1.587,3.254,3.94,5.937,6.804,7.662l-6.342,2.953
                l-16.168,7.53c-1.404,0.658-2.327,2.242-2.327,4.011v15.062v2.703c0,2.381,1.659,4.312,3.708,4.312h57.505
                c2.048,0,3.708-1.93,3.708-4.312v-2.703V64.446C82.46,62.683,81.552,61.114,80.161,60.441z"/>
        </g>
    </svg>
    <span class="tm-login__cta">
        Log in    </span>
</div>
            </nav>

            
            <div class="quick-select-wrapper">
    <div id="quickselect-skeleton" class="ssc" style="height: 40px;">
        <div class="ssc-wrapper flex" style="height: 100%; padding: 0">
            <div class="ssc-square quickselect-element" style="width: 40px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 171.06px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 170.84px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 138.03px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 141.5px;"></div>
        </div>
    </div>

    <tm-quick-select-bar
        default-country="189"
        default-competition="GB1"
        default-club="405"
        default-player="392085"
        dropdown-visible=""
        translations='{&quot;home&quot;:&quot;Home&quot;,&quot;country&quot;:&quot;Country&quot;,&quot;competition&quot;:&quot;Competition&quot;,&quot;club&quot;:&quot;Club&quot;,&quot;player&quot;:&quot;Player&quot;,&quot;attack&quot;:&quot;Striker&quot;,&quot;midfield&quot;:&quot;Mittelfeld&quot;,&quot;defense&quot;:&quot;Defender&quot;,&quot;goalkeeper&quot;:&quot;Goalkeeper&quot;}'
        >
    </tm-quick-select-bar>
</div>


            <div class="werbung werbung-billboard">
  <div id="div-gpt-ad-1621524903956-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621524903956-0"); });</script>
  </div>
</div>
        </header>
        <main>

            
            
    <div id="modal-1" class="modal micromodal-slide" aria-hidden="true" tabindex="1">
        <div class="modal__overlay" tabindex="-1" data-custom-close>
            <div
                class="modal__container"
                role="dialog"
                aria-modal="true"
                aria-labelledby="modal-1-title"
                data-custom-close
                >
                <header class="modal__header">
                    <button
                        class="modal__close modal__close--profile-img"
                        aria-label="Close modal"
                        data-custom-close
                        >
                    </button>
                </header>
                <div id="modal-1-content" class="modal__content">
                                        <img src='https://img.a.transfermarkt.technology/portrait/big/392085-1630498680.jpg?lm=1' alt='Nicolò Zaniolo' title='Nicolò Zaniolo' data-custom-close loading="lazy">
                </div>
            </div>
        </div>
    </div>


<header class="data-header" itemscope itemtype="https://schema.org/Person">
                        <div class="data-header__ribbon">
                <a title="On loan from Galatasaray until Jun 30, 2024" href="/galatasaray/kadernaechstesaison/verein/141/saison_id/2023"><span>on loan</span></a>            </div>
                <div class="data-header__headline-container">
            <h1 class="data-header__headline-wrapper">
                                    <span class="data-header__shirt-number">
                        #22                    </span>
                                Nicolò <strong>Zaniolo</strong>            </h1>
                                </div>
                    <div class="data-header__badge-container">
                                                    <a href="/nicolo-zaniolo/erfolge/spieler/392085" title="Conference League winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/856.png?lm=1639997104" title="Conference League winner" alt="Conference League winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/nicolo-zaniolo/erfolge/spieler/392085" title="Turkish champion" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/20.png?lm=1520606999" title="Turkish champion" alt="Turkish champion" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/nicolo-zaniolo/erfolge/spieler/392085" title="Italian Youth champion (Primavera)" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/365.png?lm=1461847499" title="Italian Youth champion (Primavera)" alt="Italian Youth champion (Primavera)" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                            </div>
        
                    <div class="data-header__box--big">
                                    <a href="/aston-villa/startseite/verein/405" class="data-header__box__club-link">
                                            <img srcset="
                            https://tmssl.akamaized.net/images/wappen/normquad/405.png?lm=1469443765 1x,
                            https://tmssl.akamaized.net/images/wappen/homepageWappen150x150/405.png?lm=1469443765 2x
                            " alt="Aston Villa" height="100" width="100" />
                                        </a>
                                <div class="data-header__club-info">
                    <span class="data-header__club" itemprop="affiliation">
                        <a title="Aston Villa" href="/aston-villa/startseite/verein/405">Aston Villa</a>                    </span><br />                    
                                                                            <span class="data-header__league">
                                    <a class="data-header__league-link" href="/premier-league/startseite/wettbewerb/GB1">
                                        <img src="https://tmssl.akamaized.net/images/logo/verytiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League                                    </a>
                                </span>
                                                                            <span class="data-header__label">League level:
                                <span class="data-header__content">
                                    <img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" />First Tier                                </span>
                            </span>
                                                                                                        <span class="data-header__label">Joined: <span class="data-header__content">Aug 18, 2023</span></span>
                            <span class="data-header__label">Contract expires: <span class="data-header__content">Jun 30, 2024</span></span>
                                                            </div>
            </div>
        
        <div class="data-header__profile-container">
                            <div class="modal-trigger" data-custom-open="modal-1" id="fotoauswahlOeffnen" style="cursor:pointer" onclick="tmEvent('spielerprofil','click','profilbild');">
            
                                <img src="https://img.a.transfermarkt.technology/portrait/header/392085-1630498680.jpg?lm=1" title="Nicolò Zaniolo" alt="Nicolò Zaniolo" class="data-header__profile-image" height="181" width="139" /><div class="bildquelle"><span title="imago images">imago images</span></div>
                                    <span class="modal-trigger-icon">+</span>
                </div>
                        </div>
        <div class="data-header__info-box ">
            <div class="data-header__details">
                <ul class="data-header__items">
                                            <li class="data-header__label">Date of birth/Age:
                            <span itemprop="birthDate" class="data-header__content">
                                Jul 2, 1999 (24)                            </span>
                        </li>

                                                    <li class="data-header__label">Place of birth:
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                <span class="data-header__content" itemprop="birthPlace">
                                    Massa                                </span>
                            </li>
                        
                                            <li class="data-header__label">Citizenship:
                            <span itemprop="nationality" class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                Italy                            </span>
                        </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li class="data-header__label">Height:
                            <span itemprop="height" class="data-header__content">
                                1,90 m                            </span>
                        </li>
                    
                    <li class="data-header__label">Position:
                        <span class="data-header__content">
                            Attacking Midfield                        </span>
                    </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li for="" class="data-header__label">
                                                            Current international:
                                                        <span class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen flagge" /><a title="Italy" href="/italien/startseite/verein/3376">Italy</a>                            </span>
                        </li>
                                                    <li class="data-header__label">Caps/Goals:
                                <a class="data-header__content data-header__content--highlight" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376">17                                </a>/
                                <a class="data-header__content data-header__content--highlight" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376">2                                </a>
                            </li>
                                    </ul>
            </div>
        </div>
        
    
            <div class="data-header__box--small">
                <a href="/nicolo-zaniolo/marktwertverlauf/spieler/392085" class="data-header__market-value-wrapper"><span class="waehrung">€</span>25.00<span class="waehrung">m</span>                <p class="data-header__last-update">Last update: Dec 19, 2023</p></a>
            </div>

            
    </header>
    <div class="row hide-on-print" id="subnavi" data-season="" data-controller="spieler" data-action="leistungsdaten" data-path="player-path/leistungsdaten/spieler/392085/plus/0" data-id="392085">
        <div class="page_wrapper subnavi">
            <div class="large-12 columns">
                <div class="subnavi_box" id="subnavigation">
                    <div class="submenu-text show-for-small">
                        <a name="SubNavi" title="Navigation">
                            <span>≡ Sub navigation</span>
                        </a>
                    </div>
                    <nav>
                        <ul id="submenu">
                                                <li id="close_submenu" class="show-for-small">
                            <div id="submenu-icon">
                                <span class="clicked"></span>
                                <span class="clicked"></span>
                            </div>
                            <a>Close subnavigation</a>
                        </li>
                                                    <li id="profile" class="first-button  " data-nav-group="profile">
                                <a name="SubNavi" href="/nicolo-zaniolo/profil/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','profil');
">Profile</a>
                                                            </li>
                                                        <li id="stats" class="  " data-nav-group="stats">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','leistungsdaten');
">Stats</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="market-values" class="  " data-nav-group="market-values">
                                <a name="SubNavi" href="/nicolo-zaniolo/marktwertverlauf/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','marktwert');
">Market values</a>
                                                            </li>
                                                        <li id="transfers" class="  " data-nav-group="transfers">
                                <a name="SubNavi" href="/nicolo-zaniolo/transfers/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','transfers');
">Transfers</a>
                                                            </li>
                                                        <li id="rumors" class="  " data-nav-group="rumors">
                                <a name="SubNavi" href="/nicolo-zaniolo/geruechte/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','geruchte');
">Rumors</a>
                                                            </li>
                                                        <li id="national-team" class="  " data-nav-group="national-team">
                                <a name="SubNavi" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','nationalmannschaft');
">National team</a>
                                                            </li>
                                                        <li id="news" class="  " data-nav-group="news">
                                <a name="SubNavi" href="/nicolo-zaniolo/news/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','news');
">News</a>
                                                            </li>
                                                        <li id="achievements" class="  " data-nav-group="achievements">
                                <a name="SubNavi" href="/nicolo-zaniolo/erfolge/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','erfolge');
">Achievements</a>
                                                            </li>
                                                        <li id="career" class="  " data-nav-group="career">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','karriere');
">Career</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="subnavi-edit" class="  subnavi-edit" data-nav-group="subnavi-edit">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','edit');
"></a>
                                <div class="dropdown_fullwidth gasthinweis" title="Log in or register now"><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                    </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <script>
        var stickySubTop = $('#subnavigation').offset().top;
        stickySubTop = stickySubTop - 60;
        var main = $("#main");
        $(document).ready(function() {
            $(window).on('scroll load', function() {
                if (!main.hasClass("stickySubnavigation")) {
                    stickySubTop = $('#subnavigation').offset().top;
                }
                if ($(window).scrollTop() > stickySubTop) {
                    main.addClass("stickySubnavigation");
                } else {
                    main.removeClass("stickySubnavigation");
                }
            });
        });
    </script>
    <style>
        .forum-anchor {
            margin-top: -80px;
        }
    </style>

                        
<div class="row">
    <div class="large-8 columns">

        <div class="box">
            <h2 class="content-box-headline">
                Stats of Nicolò Zaniolo            </h2>
            <p class="info-content">
                This page contains information about a player's detailed stats. In the info box, you can filter by period, club, type of league and competition. The "Detailed stats" tab shows a player's total appearances, goals, cards and cumulative minutes of play for each competition, and indicates the season in which it occurred.            </p>
            <div class="content">
                <form action="/nicolo-zaniolo/leistungsdaten/spieler/392085/plus/0" method="get">                <div class="row">
                    <div class="large-12 columns">
                        <table class="auflistung">
                            <tbody>
                                <tr>
                                    <td>Filter by season:</td>
                                    <td>
                                        <div class="inline-select">
                                            <select name="saison" data-placeholder="Filter by season" class="chzn-select" tabindex="0">
                                                <option value="ges">Overall balance</option>
                                                                                                    <option  selected="selected"value="2023">23/24</option>
                                                                                                    <option value="2022">22/23</option>
                                                                                                    <option value="2021">21/22</option>
                                                                                                    <option value="2020">20/21</option>
                                                                                                    <option value="2019">19/20</option>
                                                                                                    <option value="2018">18/19</option>
                                                                                                    <option value="2017">17/18</option>
                                                                                                    <option value="2016">16/17</option>
                                                                                                    <option value="2015">15/16</option>
                                                                                                    <option value="2014">14/15</option>
                                                                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="submit" class="small button" value="Show">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                </form>            </div>
        </div>
        <div class="box">
            <h2 class="content-box-headline">
                Stats 23/24            </h2>
            
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023#gesamt"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023/plus/1#gesamt"><div class=""><span>Detailed</span></div></a></div>
            <div class="responsive-table">
                <div id="yw1" class="grid-view">
<div class="summary"></div>
<table class="items">
<thead>
<tr>
<th colspan="2" id="yw1_c0"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/wettbewerb">Competition</a></th><th class="hide" id="yw1_c1"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/wettbewerb">wettbewerb</a></th><th class="zentriert" id="yw1_c2"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/einsaetze.desc"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></a></th><th class="zentriert" id="yw1_c3"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/tore.desc"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></a></th><th class="zentriert" id="yw1_c4"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/vorlagen.desc"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></a></th><th class="zentriert" id="yw1_c5"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/gelbe.desc"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c6"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/gelbrote.desc"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c7"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/rote.desc"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></a></th><th class="rechts" id="yw1_c8"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2023/plus/0/sort/einsatzzeit.desc"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></a></th></tr>
</thead>
<tfoot>
<tr>
<td colspan="2" class="rechts">Total  23/24:</td><td class="hide">&nbsp;</td><td class="zentriert">21</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">6</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">928'</td></tr>
</tfoot>
<tbody>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td><td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/wettbewerb/GB1/verein/405">13</a></td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">4</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">501'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/ucol.png?lm=1610377631" title="UEFA Europa Conference League" alt="UEFA Europa Conference League" class="" /></td><td class="hauptlink no-border-links"><a title="Conference League" href="/uefa-europa-conference-league/startseite/pokalwettbewerb/UCOL">Conference League</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/wettbewerb/UCOL/verein/405">6</a></td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">2</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">295'</td></tr>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/clq.png?lm=1626812672" title="UEFA Champions League Qualifying" alt="UEFA Champions League Qualifying" class="" /></td><td class="hauptlink no-border-links"><a title="Champions League Qu." href="/uefa-champions-league-qualifikation/startseite/pokalwettbewerb/CLQ">Champions League Qu.</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/wettbewerb/CLQ/verein/141">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">73'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cgb.png?lm=1566937342" title="EFL Cup" alt="EFL Cup" class="" /></td><td class="hauptlink no-border-links"><a title="EFL Cup" href="/efl-cup/startseite/pokalwettbewerb/CGB">EFL Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/wettbewerb/CGB/verein/405">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">59'</td></tr>
</tbody>
</table>
<div class="keys" style="display:none" title="/player-path/leistungsdaten/spieler/392085/plus/0?saison=2023"><span>Premier League</span><span>Conference League</span><span>Champions League Qu.</span><span>EFL Cup</span></div>
</div>            </div>
        </div>

        <div class="box">
    <div class="table-header img-vat">
        <a name="UCOL" href="/uefa-europa-conference-league/startseite/wettbewerb/UCOL/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/ucol.png?lm=1610377631" title="UEFA Europa Conference League" alt="UEFA Europa Conference League" class="" />UEFA Europa Conference League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league/spieltag/pokalwettbewerb/UCOL/saison_id/2023/gruppe/E">Group E</a>
                </td>
                                    <td class="zentriert">9/21/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Legia Warszawa" href="/legia-warschau/spielplan/verein/255/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/255.png?lm=1463410132" title="Legia Warszawa" alt="Legia Warszawa" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Legia Warszawa" href="/legia-warschau/spielplan/verein/255/saison_id/2023">Legia Warszawa</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4172285" href="/legia-warszawa_aston-villa/index/spielbericht/4172285"><span class="redtext">3:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Winger">LW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">53'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">67'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league/spieltag/pokalwettbewerb/UCOL/saison_id/2023/gruppe/E">Group E</a>
                </td>
                                    <td class="zentriert">10/5/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="HSK Zrinjski Mostar" href="/hsk-zrinjski-mostar/spielplan/verein/6808/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6808.png?lm=1474921934" title="HSK Zrinjski Mostar" alt="HSK Zrinjski Mostar" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="HSK Zrinjski Mostar" href="/hsk-zrinjski-mostar/spielplan/verein/6808/saison_id/2023">Zrinjski Mostar</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4172283" href="/aston-villa_hsk-zrinjski-mostar/index/spielbericht/4172283"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league/spieltag/pokalwettbewerb/UCOL/saison_id/2023/gruppe/E">Group E</a>
                </td>
                                    <td class="zentriert">10/26/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="AZ Alkmaar" href="/az-alkmaar/spielplan/verein/1090/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1090.png?lm=1586848339" title="AZ Alkmaar" alt="AZ Alkmaar" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="AZ Alkmaar" href="/az-alkmaar/spielplan/verein/1090/saison_id/2023">AZ Alkmaar</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4172278" href="/az-alkmaar_aston-villa/index/spielbericht/4172278"><span class="greentext">1:4 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">21'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league/spieltag/pokalwettbewerb/UCOL/saison_id/2023/gruppe/E">Group E</a>
                </td>
                                    <td class="zentriert">11/9/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="AZ Alkmaar" href="/az-alkmaar/spielplan/verein/1090/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1090.png?lm=1586848339" title="AZ Alkmaar" alt="AZ Alkmaar" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AZ Alkmaar" href="/az-alkmaar/spielplan/verein/1090/saison_id/2023">AZ Alkmaar</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4172281" href="/aston-villa_az-alkmaar/index/spielbericht/4172281"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">16'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league/spieltag/pokalwettbewerb/UCOL/saison_id/2023/gruppe/E">Group E</a>
                </td>
                                    <td class="zentriert">11/30/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Legia Warszawa" href="/legia-warschau/spielplan/verein/255/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/255.png?lm=1463410132" title="Legia Warszawa" alt="Legia Warszawa" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Legia Warszawa" href="/legia-warschau/spielplan/verein/255/saison_id/2023">Legia Warszawa</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4172282" href="/aston-villa_legia-warszawa/index/spielbericht/4172282"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">11'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league/spieltag/pokalwettbewerb/UCOL/saison_id/2023/gruppe/E">Group E</a>
                </td>
                                    <td class="zentriert">12/14/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="HSK Zrinjski Mostar" href="/hsk-zrinjski-mostar/spielplan/verein/6808/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6808.png?lm=1474921934" title="HSK Zrinjski Mostar" alt="HSK Zrinjski Mostar" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="HSK Zrinjski Mostar" href="/hsk-zrinjski-mostar/spielplan/verein/6808/saison_id/2023">Zrinjski Mostar</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4172288" href="/hsk-zrinjski-mostar_aston-villa/index/spielbericht/4172288"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">37'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 6,
                        Starting eleven: 3,
                        Substituted in: 3,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="CLQ" href="/uefa-champions-league-qualifying/startseite/wettbewerb/CLQ/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/clq.png?lm=1626812672" title="UEFA Champions League Qualifying" alt="UEFA Champions League Qualifying" class="" />UEFA Champions League Qualifying        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/uefa-champions-league-qualifying/spieltag/pokalwettbewerb/CLQ/saison_id/2023/gruppe/2RH">Second Round 1st leg</a>
                </td>
                                    <td class="zentriert">7/25/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="FK Zalgiris Vilnius" href="/zalgiris-vilnius/spielplan/verein/602/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/602.png?lm=1475601977" title="FK Zalgiris Vilnius" alt="FK Zalgiris Vilnius" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="FK Zalgiris Vilnius" href="/zalgiris-vilnius/spielplan/verein/602/saison_id/2023">Zalgiris</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4126810" href="/fk-zalgiris-vilnius_galatasaray/index/spielbericht/4126810"><span class="">2:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">73'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league-qualifying/spieltag/pokalwettbewerb/CLQ/saison_id/2023/gruppe/2RR">Second Round 2nd leg</a>
                </td>
                                    <td class="zentriert">8/2/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="FK Zalgiris Vilnius" href="/zalgiris-vilnius/spielplan/verein/602/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/602.png?lm=1475601977" title="FK Zalgiris Vilnius" alt="FK Zalgiris Vilnius" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="FK Zalgiris Vilnius" href="/zalgiris-vilnius/spielplan/verein/602/saison_id/2023">Zalgiris</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4129370" href="/galatasaray_fk-zalgiris-vilnius/index/spielbericht/4129370"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Groin problems" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Groin problems</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league-qualifying/spieltag/pokalwettbewerb/CLQ/saison_id/2023/gruppe/3RH">3rd round 1st leg</a>
                </td>
                                    <td class="zentriert">8/8/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="NK Olimpija Ljubljana" href="/nk-olimpija-ljubljana/spielplan/verein/4772/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4772.png?lm=1420820214" title="NK Olimpija Ljubljana" alt="NK Olimpija Ljubljana" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="NK Olimpija Ljubljana" href="/nk-olimpija-ljubljana/spielplan/verein/4772/saison_id/2023">NK Olimpija</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4146791" href="/nk-olimpija-ljubljana_galatasaray/index/spielbericht/4146791"><span class="greentext">0:3 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Groin problems" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Groin problems</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-champions-league-qualifying/spieltag/pokalwettbewerb/CLQ/saison_id/2023/gruppe/3RR">3rd round 2nd leg</a>
                </td>
                                    <td class="zentriert">8/15/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="NK Olimpija Ljubljana" href="/nk-olimpija-ljubljana/spielplan/verein/4772/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/4772.png?lm=1420820214" title="NK Olimpija Ljubljana" alt="NK Olimpija Ljubljana" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="NK Olimpija Ljubljana" href="/nk-olimpija-ljubljana/spielplan/verein/4772/saison_id/2023">NK Olimpija</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4146792" href="/galatasaray_nk-olimpija-ljubljana/index/spielbericht/4146792"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Groin problems" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Groin problems</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 3                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="ECLQ" href="/uefa-europa-conference-league-qualifiers/startseite/wettbewerb/ECLQ/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/eclq.png?lm=1622563928" title="UEFA Europa Conference League Qualifiers" alt="UEFA Europa Conference League Qualifiers" class="" />UEFA Europa Conference League Qualifiers        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league-qualifiers/spieltag/pokalwettbewerb/ECLQ/saison_id/2023/gruppe/QRH">Qualifying Round 1st leg</a>
                </td>
                                    <td class="zentriert">8/23/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Hibernian FC" href="/hibernian-fc/spielplan/verein/903/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/903.png?lm=1534336641" title="Hibernian FC" alt="Hibernian FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Hibernian FC" href="/hibernian-fc/spielplan/verein/903/saison_id/2023">Hibernian FC</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4162619" href="/hibernian-fc_aston-villa/index/spielbericht/4162619"><span class="greentext">0:5 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-europa-conference-league-qualifiers/spieltag/pokalwettbewerb/ECLQ/saison_id/2023/gruppe/QRR">Qualifying Round 2nd leg</a>
                </td>
                                    <td class="zentriert">8/31/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Hibernian FC" href="/hibernian-fc/spielplan/verein/903/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/903.png?lm=1534336641" title="Hibernian FC" alt="Hibernian FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Hibernian FC" href="/hibernian-fc/spielplan/verein/903/saison_id/2023">Hibernian FC</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4162643" href="/aston-villa_hibernian-fc/index/spielbericht/4162643"><span class="greentext">3:0 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 0,
                        Starting eleven: 0,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="GB1" href="/premier-league/startseite/wettbewerb/GB1/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/2">2</a>
                </td>
                                    <td class="zentriert">8/20/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(9.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/29.png?lm=1445949846" title="Everton FC" alt="Everton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023">Everton</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087934" href="/aston-villa_everton-fc/index/spielbericht/4087934"><span class="greentext">4:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Groin problems" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Groin problems</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/3">3</a>
                </td>
                                    <td class="zentriert">8/27/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(7.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1132.png?lm=1686818840" title="Burnley FC" alt="Burnley FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023">Burnley</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087948" href="/burnley-fc_aston-villa/index/spielbericht/4087948"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">17'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">9/3/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(10.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31.png?lm=1456567819" title="Liverpool FC" alt="Liverpool FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Liverpool FC" href="/fc-liverpool/spielplan/verein/31/saison_id/2023">Liverpool</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087960" href="/liverpool-fc_aston-villa/index/spielbericht/4087960"><span class="redtext">3:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Midfield">LM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">25'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">9/16/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(7.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/873.png?lm=1457723287" title="Crystal Palace" alt="Crystal Palace" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Crystal Palace" href="/crystal-palace/spielplan/verein/873/saison_id/2023">Crystal Palace</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087965" href="/aston-villa_crystal-palace/index/spielbericht/4087965"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Winger">LW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">45 + 4'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">57'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/6">6</a>
                </td>
                                    <td class="zentriert">9/24/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/631.png?lm=1682435911" title="Chelsea FC" alt="Chelsea FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Chelsea FC" href="/fc-chelsea/spielplan/verein/631/saison_id/2023">Chelsea</a>&nbsp;&nbsp;<span class="tabellenplatz">(14.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095066" href="/chelsea-fc_aston-villa/index/spielbericht/4095066"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Winger">LW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">75'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/7">7</a>
                </td>
                                    <td class="zentriert">9/30/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1237.png?lm=1492718902" title="Brighton & Hove Albion" alt="Brighton & Hove Albion" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Brighton &amp; Hove Albion" href="/brighton-amp-hove-albion/spielplan/verein/1237/saison_id/2023">Brighton</a>&nbsp;&nbsp;<span class="tabellenplatz">(6.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095137" href="/aston-villa_brighton-amp-hove-albion/index/spielbericht/4095137"><span class="greentext">6:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Winger">LW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">57'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/8">8</a>
                </td>
                                    <td class="zentriert">10/8/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/543.png?lm=1467496784" title="Wolverhampton Wanderers" alt="Wolverhampton Wanderers" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Wolverhampton Wanderers" href="/wolverhampton-wanderers/spielplan/verein/543/saison_id/2023">Wolves</a>&nbsp;&nbsp;<span class="tabellenplatz">(14.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095155" href="/wolverhampton-wanderers_aston-villa/index/spielbericht/4095155"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">28'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/9">9</a>
                </td>
                                    <td class="zentriert">10/22/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/379.png?lm=1464675260" title="West Ham United" alt="West Ham United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="West Ham United" href="/west-ham-united/spielplan/verein/379/saison_id/2023">West Ham</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095157" href="/aston-villa_west-ham-united/index/spielbericht/4095157"><span class="greentext">4:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Midfield">LM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">76'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/10">10</a>
                </td>
                                    <td class="zentriert">10/29/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Luton Town" href="/luton-town/spielplan/verein/1031/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1031.png?lm=1457723228" title="Luton Town" alt="Luton Town" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Luton Town" href="/luton-town/spielplan/verein/1031/saison_id/2023">Luton</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095168" href="/aston-villa_luton-town/index/spielbericht/4095168"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Winger">LW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">28'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/11">11</a>
                </td>
                                    <td class="zentriert">11/5/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/703.png?lm=1598890289" title="Nottingham Forest" alt="Nottingham Forest" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Nottingham Forest" href="/nottingham-forest/spielplan/verein/703/saison_id/2023">Nottm Forest</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095183" href="/nottingham-forest_aston-villa/index/spielbericht/4095183"><span class="redtext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Midfield">LM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/12">12</a>
                </td>
                                    <td class="zentriert">11/12/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/931.png?lm=1556831687" title="Fulham FC" alt="Fulham FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fulham FC" href="/fc-fulham/spielplan/verein/931/saison_id/2023">Fulham</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095188" href="/aston-villa_fulham-fc/index/spielbericht/4095188"><span class="greentext">3:1 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/13">13</a>
                </td>
                                    <td class="zentriert">11/26/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/148.png?lm=1544345801" title="Tottenham Hotspur" alt="Tottenham Hotspur" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Tottenham Hotspur" href="/tottenham-hotspur/spielplan/verein/148/saison_id/2023">Tottenham</a>&nbsp;&nbsp;<span class="tabellenplatz">(5.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095205" href="/tottenham-hotspur_aston-villa/index/spielbericht/4095205"><span class="greentext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/14">14</a>
                </td>
                                    <td class="zentriert">12/3/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/989.png?lm=1457991811" title="AFC Bournemouth" alt="AFC Bournemouth" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="AFC Bournemouth" href="/afc-bournemouth/spielplan/verein/989/saison_id/2023">Bournemouth</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095206" href="/afc-bournemouth_aston-villa/index/spielbericht/4095206"><span class="">2:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">43'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/15">15</a>
                </td>
                                    <td class="zentriert">12/6/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/281.png?lm=1467356331" title="Manchester City" alt="Manchester City" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Manchester City" href="/manchester-city/spielplan/verein/281/saison_id/2023">Man City</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095216" href="/aston-villa_manchester-city/index/spielbericht/4095216"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/16">16</a>
                </td>
                                    <td class="zentriert">12/9/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11.png?lm=1489787850" title="Arsenal FC" alt="Arsenal FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Arsenal FC" href="/fc-arsenal/spielplan/verein/11/saison_id/2023">Arsenal</a>&nbsp;&nbsp;<span class="tabellenplatz">(2.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095226" href="/aston-villa_arsenal-fc/index/spielbericht/4095226"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/17">17</a>
                </td>
                                    <td class="zentriert">12/17/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Brentford FC" href="/fc-brentford/spielplan/verein/1148/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1148.png?lm=1625150543" title="Brentford FC" alt="Brentford FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Brentford FC" href="/fc-brentford/spielplan/verein/1148/saison_id/2023">Brentford</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095238" href="/brentford-fc_aston-villa/index/spielbericht/4095238"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">9'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/18">18</a>
                </td>
                                    <td class="zentriert">12/22/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/350.png?lm=1409254138" title="Sheffield United" alt="Sheffield United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sheffield United" href="/sheffield-united/spielplan/verein/350/saison_id/2023">Sheff Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095246" href="/aston-villa_sheffield-united/index/spielbericht/4095246"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">90 + 5'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">9'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/19">19</a>
                </td>
                                    <td class="zentriert">12/26/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/985.png?lm=1457975903" title="Manchester United" alt="Manchester United" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Manchester United" href="/manchester-united/spielplan/verein/985/saison_id/2023">Man Utd</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095263" href="/manchester-united_aston-villa/index/spielbericht/4095263"><span class="redtext">3:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">13'</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/premier-league/spieltag/wettbewerb/GB1/saison_id/2023/spieltag/20">20</a>
                </td>
                                    <td class="zentriert">12/30/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1132.png?lm=1686818840" title="Burnley FC" alt="Burnley FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Burnley FC" href="/fc-burnley/spielplan/verein/1132/saison_id/2023">Burnley</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4095266" href="/aston-villa_burnley-fc/index/spielbericht/4095266"><span class="greentext">3:2 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 17,
                        Starting eleven: 7,
                        Substituted in: 6,
                        On the bench: 4,
                        Suspended: 0,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="TR1" href="/super-lig/startseite/wettbewerb/TR1/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/tr1.png?lm=1694093655" title="Süper Lig" alt="Süper Lig" class="" />Süper Lig        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2023/spieltag/1">1</a>
                </td>
                                    <td class="zentriert">8/12/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(11.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Kayserispor" href="/kayserispor/spielplan/verein/3205/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/3205.png?lm=1520239955" title="Kayserispor" alt="Kayserispor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Kayserispor" href="/kayserispor/spielplan/verein/3205/saison_id/2023">Kayserispor</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4126774" href="/kayserispor_galatasaray/index/spielbericht/4126774"><span class="">0:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Groin problems" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Groin problems</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 0,
                        Starting eleven: 0,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="CGB" href="/efl-cup/startseite/wettbewerb/CGB/saison_id/2023">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cgb.png?lm=1566937342" title="EFL Cup" alt="EFL Cup" class="" />EFL Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2023/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/efl-cup/spieltag/pokalwettbewerb/CGB/saison_id/2023/gruppe/3R">Third Round</a>
                </td>
                                    <td class="zentriert">9/27/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/29.png?lm=1445949846" title="Everton FC" alt="Everton FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Everton FC" href="/fc-everton/spielplan/verein/29/saison_id/2023">Everton</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4188446" href="/aston-villa_everton-fc/index/spielbericht/4188446"><span class="redtext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">59'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 0,
                        Substituted in: 1,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
</div>
    <div class="large-4 columns">
        <div class="werbung werbung-rectangle1">
  <div id="div-gpt-ad-1621526463511-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621526463511-0"); });</script>
  </div>
</div>
        <div class="box hide">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                                    <span class="position_12" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);background-color: rgba(167, 27, 30, 0.98);font-size:16px !important" title="20">1</span>
                                        <span class="position_14" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);background-color: rgba(167, 27, 30, 0.98);font-size:16px !important" title="20">1</span>
                                        <span class="position_13" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);background-color: rgba(167, 27, 30, 0.98);font-size:16px !important" title="20">1</span>
                                        <span class="position_10" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:20px !important" title="40">2</span>
                                        <span class="position_9" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:20px !important" title="60">3</span>
                                        <span class="position_11" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:22px !important" title="100">5</span>
                                </div>
        </div>
    </div>
</div>
<div class="box">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                
                    <div class="zahl-anzeige pos-box positionsbox_12" title="Right Winger">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/12">
                            <div class="text-box p-12" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                1                                <div class="zusatz-kreis">RW</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_12" title="Right Winger">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/12">
                            <div class="text-box p-12" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                RW                                <div class="zusatz-kreis">1</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_14" title="Centre-Forward">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/14">
                            <div class="text-box p-14" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                1                                <div class="zusatz-kreis">CF</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_14" title="Centre-Forward">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/14">
                            <div class="text-box p-14" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                CF                                <div class="zusatz-kreis">1</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/13">
                            <div class="text-box p-13" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                1                                <div class="zusatz-kreis">SS</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/13">
                            <div class="text-box p-13" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                SS                                <div class="zusatz-kreis">1</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/10">
                            <div class="text-box p-10" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                2                                <div class="zusatz-kreis">AM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/10">
                            <div class="text-box p-10" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                AM                                <div class="zusatz-kreis">2</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_9" title="Left Midfield">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/9">
                            <div class="text-box p-9" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                3                                <div class="zusatz-kreis">LM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_9" title="Left Midfield">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/9">
                            <div class="text-box p-9" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                LM                                <div class="zusatz-kreis">3</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_11" title="Left Winger">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/11">
                            <div class="text-box p-11" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                5                                <div class="zusatz-kreis">LW</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_11" title="Left Winger">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/11">
                            <div class="text-box p-11" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                LW                                <div class="zusatz-kreis">5</div>
                            </div>
                            </a>
                        </div>
                    </div>

                                </div>
        </div>
    </div>
        <table>
        <thead>
            <tr>
                <th>Played as...</th>
                <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                        </tr>
        </thead>
        <tbody>
                        <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/11">Left Winger</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/11">5</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/11">-</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/11">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/9">Left Midfield</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/9">3</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/9">-</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/9">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/10">Attacking Midfield</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/10">2</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/10">1</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/10">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/13">Second Striker</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/13">1</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/13">-</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/13">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/14">Centre-Forward</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/14">1</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/14">-</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/14">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/12">Right Winger</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/12">1</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/12">-</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/pos/12">-</a></td>
                            </tr>
                        </tbody>
    </table>
</div>
        <div class="box">
    <h2 class="content-box-headline">
        Stats by club    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Club</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2018"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2018">AS Roma</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/12">128</a></td>
                            <td class="zentriert">24</td>
                <td class="zentriert">18</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Inter Milan Primavera" href="/inter-mailand-u19/spielplan/verein/5380/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46_1617091918.png?lm=1617091918" title="&nbsp;" alt="Inter Milan Primavera" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Inter Milan Primavera" href="/inter-mailand-u19/spielplan/verein/5380/saison_id/2017">Inter U19</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/5380">29</a></td>
                            <td class="zentriert">14</td>
                <td class="zentriert">9</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Fiorentina Under 17" href="/ac-florenz-u17/spielplan/verein/49741/saison_id/2015"><img src="https://tmssl.akamaized.net/images/wappen/tiny/430_1655114235.png?lm=1655114235" title="&nbsp;" alt="Fiorentina Under 17" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Fiorentina Under 17" href="/ac-florenz-u17/spielplan/verein/49741/saison_id/2015">Fiorentina U17</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/49741">22</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Virtus Entella Primavera" href="/virtus-entella-u19/spielplan/verein/27354/saison_id/2016"><img src="https://tmssl.akamaized.net/images/wappen/tiny/27354.png?lm=1424769530" title="Virtus Entella Primavera" alt="Virtus Entella Primavera" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Virtus Entella Primavera" href="/virtus-entella-u19/spielplan/verein/27354/saison_id/2016">Entella U19</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/27354">22</a></td>
                            <td class="zentriert">9</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023">Aston Villa</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/405">20</a></td>
                            <td class="zentriert">2</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023">Galatasaray</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/141">12</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Virtus Entella" href="/virtus-entella/spielplan/verein/20519/saison_id/2016"><img src="https://tmssl.akamaized.net/images/wappen/tiny/20519.png?lm=1424769530" title="Virtus Entella" alt="Virtus Entella" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Virtus Entella" href="/virtus-entella/spielplan/verein/20519/saison_id/2016">Virtus Entella</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/20519">7</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Inter Mailand UEFA U19" href="/inter-mailand-uefa-u19/spielplan/verein/62104/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46_1617091918.png?lm=1617091918" title="&nbsp;" alt="Inter Mailand UEFA U19" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Inter Mailand UEFA U19" href="/inter-mailand-uefa-u19/spielplan/verein/62104/saison_id/2017">Inter YL</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/62104">6</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">2</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46_1617091918.png?lm=1617091918" title="&nbsp;" alt="Inter Milan" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2017">Inter</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/46">-</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Nicolò Zaniolo" class="content-link" href="/nicolo-zaniolo/leistungsdatenverein/spieler/392085">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        Performance by competition    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Competition</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie A" href="/serie-a/startseite/wettbewerb/IT1">Serie A</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/wettbewerb/IT1">94</a></td>
                            <td class="zentriert">13</td>
                <td class="zentriert">10</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/ij1.png?lm=1639129220" title="Primavera 1" alt="Primavera 1" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera 1" href="/primavera-1/startseite/wettbewerb/IJ1">Primavera 1</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2017/wettbewerb/IJ1/verein/5380">26</a></td>
                            <td class="zentriert">13</td>
                <td class="zentriert">8</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itj4.png?lm=1697114822" title="Campionato Under 17 - A" alt="Campionato Under 17 - A" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Under 17 - A" href="/campionato-nazionale-under-17-a/startseite/wettbewerb/ITJ4">Under 17 - A</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/wettbewerb/ITJ4/verein/49741">19</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itj3.png?lm=1514453455" title="Campionato Primavera Girone C" alt="Campionato Primavera Girone C" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera C" href="/campionato-primavera-girone-c/startseite/wettbewerb/ITJ3">Primavera C</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2016/wettbewerb/ITJ3/verein/27354">16</a></td>
                            <td class="zentriert">7</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/wettbewerb/GB1/verein/405">13</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/tr1.png?lm=1694093655" title="Süper Lig" alt="Süper Lig" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Süper Lig" href="/super-lig/startseite/wettbewerb/TR1">Süper Lig</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/wettbewerb/TR1/verein/141">10</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it2.png?lm=1548242827" title="Serie B" alt="Serie B" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie B" href="/serie-b/startseite/wettbewerb/IT2">Serie B</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2016/wettbewerb/IT2/verein/20519">7</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itje.png?lm=1600081543" title="Campionato Primavera Fase Finale" alt="Campionato Primavera Fase Finale" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera Fase Finale" href="/campionato-primavera-finalrunde/startseite/wettbewerb/ITJE">Primavera Fase Finale</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/wettbewerb/ITJE">3</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itjf.png?lm=1697114816" title="Campionato Under 17 - Finals" alt="Campionato Under 17 - Finals" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Under 17 - Finals" href="/campionato-under-17-finalrunde/startseite/pokalwettbewerb/ITJF">Under 17 - Finals</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2015/wettbewerb/ITJF/verein/49741">3</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Nicolò Zaniolo" class="content-link" href="/nicolo-zaniolo/detaillierteleistungsdaten/spieler/392085">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        National team career    </h2>
    <table>
        <thead>
        <tr>
            <th class="zentriert">#</th>
            <th colspan="2" class="hide-for-small">National team</th>
            <th class="zentriert">Debut</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Matches">&nbsp;</span></th>
            <th class="zentriert"><span class="icons_sprite icon-tor-table-header"></span></th>
                    </tr>
        </thead>
        <tbody>
            <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy" href="/italien/startseite/verein/3376">Italy</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_gruen_20">
            
                20
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy" href="/italien/startseite/verein/3376">Italy</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/3131103" title="European Qualifiers: Italy - Finland 2:0">Mar 23, 2019</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376">17</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376/nurEinsatz/2">2</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                10
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/3112875" title="International Friendlies: Italy U21 - Belgium U21 0:1">Oct 11, 2018</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/11947">8</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/11947/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
            <td class="zentriert">
                                    -                            </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21100">-</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21100/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                5
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2842204" title="UEFA EURO U19 Championship Qualifiers: Republic of Ireland U19 - Italy U19 2:0">Mar 23, 2017</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21426">18</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21426/nurEinsatz/2">6</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2768269" title="International Friendlies: Italy U18 - Austria U18 1:0">Nov 11, 2016</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21746">2</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21746/nurEinsatz/2">-</a></td>
                    </tr>
                </tbody>
    </table>
            <a title="Nicolò Zaniolo" class="content-link" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085">Go to national player profile</a>    </div>
        <div class="werbung werbung-rectangle2">
  <div id="div-gpt-ad-1621528018930-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528018930-0"); });</script>
  </div>
</div>
    </div>
</div>

<script async src="/js/custom/tm-track-links.min.js" type="module"></script>
<div class="werbung werbung-fullsize_contentad">
  <div id="div-gpt-ad-1621528173524-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528173524-0"); });</script>
  </div>
</div>
        </main>

        <footer>
            <div class="tm-footer">
            <a href="/"
           class="tm-footer__logo">
          <img src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" alt="Transfermarkt" height="33" width="80"/>
        </a>
          <ul class="tm-footer__links">
    <li class="tm-footer__links-item">
      <a href="/intern/impressum">
          Legal notice      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/web/datenschutz">
          Data protection      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="javascript:void(0)" class="cmp-link">
          Privacy      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/anb">
          General conditions of use      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/tmteam">
          TM-Team      </a>
    </li>
                        <li class="tm-footer__links-item">
      <a href="/intern/faq">
          FAQ      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/fehlermelden">
          Found a mistake?      </a>
    </li>
  </ul>
</div>
        </footer>
                <div id="menue_overlay"></div>
    </div>
        <script type="text/javascript">
        var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r",
"co":""
}
    </script>
        <script type="module">
        var defaultOptions = {
            tracking: !0,
            refreshAds: !0
        };
        export var refreshAd = function() {
            var e, n;
            [ASCDP.hasOwnProperty("adS"), null === (e = ASCDP.adS) || void 0 === e ? void 0 : e.hasOwnProperty("reloadAds"), "function" == typeof(null === (n = ASCDP.adS) || void 0 === n ? void 0 : n.reloadAds)].every(function(e) {
                return e
            }) && ASCDP.adS.reloadAds()
        };
        export var TmTrackingAndAds = function(e, n) {
            void 0 === n && (n = defaultOptions);
            var r = ["tabelle", "reiter", "forum"].includes(e) ? e : "";
            n.tracking && (gtag("event", "page_view", {
                page_path: "/jsContent" + window.location.pathname
            }), sendIvwData(r)), n.refreshAds && "undefined" != typeof ASCDP && refreshAd()
        };
        window.tmTrackingAndAds = function(e, n) {
            return TmTrackingAndAds(e, n)
        };
    </script>
            <script type="text/javascript">
            const iommInterval = setInterval(() => {
                if (typeof IOMm === 'function') {
                    IOMm('configure', {
                        st: iam_data.st,
                        dn: 'data-84a0f3455d.transfermarkt.com',
                        mh: 5
                    });
                    IOMm('pageview', {
                        cp: iam_data.cp,
                        co: iam_data.co
                    });
                    clearInterval(iommInterval);
                }
            }, 250);
        </script>
    <script type="text/javascript">
	if(typeof(adet) == "boolean" && adet == false){
		img_src="/static/singlepictures/jk99hhfsdh209nbnkjldgh90sghfsdlk";
	} else {
		img_src="/static/singlepictures/jku90whjlkjbwbta1g4b8h89fh8sgh8d";
	}
	var elem = document.createElement("img");
	document.body.appendChild(elem);
	elem.src = img_src;
</script>

            <script>
            $(function() {
                var cnt = $('div.large-4.columns').length;
                if (cnt == 1) {
                    var sidebarDiv = document.querySelector('div.large-4.columns');
                    if (sidebarDiv !== null) {
                        $('#werbung_recommender_sidebar_wrapper').appendTo(sidebarDiv);
                        $('#werbung_recommender_sidebar_wrapper').show();
                    }
                }
            });
        </script>
        <div id="werbung_recommender_sidebar_wrapper" style="display: none;">
            <div 
    id="recommender_sidebar" 
    class="box"
    >
    <div class="OUTBRAIN" data-widget-id="SL_DT_SB"></div>
<tm-consent 
    no-checkbox 
    type="outbrain" 
    embed="PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jPSJhc3luYyIgc3JjPSIvL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzIj48L3NjcmlwdD4=">
</tm-consent>
</div>
        </div>
    <script type="module" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.esm.js" defer></script><script nomodule="" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.js" defer></script><tm-consent type="adition" no-checkbox embed="PHNjcmlwdCBzcmM9Imh0dHBzOi8vY3JlYXRpdmUtY2RuLm9kZHNzZXJ2ZS5jb20vbG9hZGVyLmpzP3B1Ymxpc2hlcj10bSIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4="></tm-consent><tm-consent type="googleanalytics" no-checkbox embed="PHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMzgxNjIwNC0xMyI+PC9zY3JpcHQ+"></tm-consent>
<tm-consent type="pubmatic" no-checkbox embed="PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBXVD17fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncHRSYW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBXVC5qc0xvYWRlZCA9ICgpID0+IHsgLy9QdWJNYXRpYyBwd3QuanMgb24gbG9hZCBjYWxsYmFjayBpcyB1c2VkIHRvIGxvYWQgR1BUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEdQVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkR1BUID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGdwdFJhbiBmbGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncHRSYW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B0UmFuID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWRzLnNyYyA9ICh1c2VTU0wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0L3RhZy9qcy9ncHQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbHNhZmUgdG8gY2FsbCBncHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEdQVCwgNTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9wd3QvMTYzMjI5LzEwMTAzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZlcnNpb25JZCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1cmwuaW5kZXhPZigncHd0dj0nKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IC9wd3R2PSguKj8pKCZ8JCkvZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHJlZ2V4cC5leGVjKHB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoID49IDIgJiYgbWF0Y2hlc1sxXS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVZlcnNpb25JZCA9ICcvJyttYXRjaGVzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3RhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dGFkcy5hc3luYyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3RhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd0YWRzLnNyYyA9IHVybCtwcm9maWxlVmVyc2lvbklkKycvcHd0LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHd0YWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICA="></tm-consent><tm-consent type="amazonadvertising" no-checkbox embed="PHNjcmlwdD4hZnVuY3Rpb24odCwkLGUscyxpLGEsbyl7JFt0XXx8KCRbdF09e2luaXQ6ZnVuY3Rpb24oKXtfKCJpIixhcmd1bWVudHMpfSxmZXRjaEJpZHM6ZnVuY3Rpb24oKXtfKCJmIixhcmd1bWVudHMpfSxzZXREaXNwbGF5QmlkczpmdW5jdGlvbigpe30sdGFyZ2V0aW5nS2V5czpmdW5jdGlvbigpe3JldHVybltdfSxfUTpbXX0sKGE9ZS5jcmVhdGVFbGVtZW50KHMpKS5hc3luYz0hMCxhLnNyYz1pLChvPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbykpO2Z1bmN0aW9uIF8oZSxzKXskW3RdLl9RLnB1c2goW2Usc10pfX0oImFwc3RhZyIsd2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCIvL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIpLGFwc3RhZy5pbml0KHtwdWJJRDoiNTEzNCIsYWRTZXJ2ZXI6Imdvb2dsZXRhZyJ9KTtjb25zdCBpbml0QW1hem9uQWRCaWRzPSh0LCQpPT57KCQmJiJ0Y2xvYWRlZCI9PT10LmV2ZW50U3RhdHVzfHwidXNlcmFjdGlvbmNvbXBsZXRlIj09PXQuZXZlbnRTdGF0dXMpJiZhcHN0YWcuZmV0Y2hCaWRzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90czpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIixzbG90TmFtZToiNTg3NzgxNjQvRGVza3RvcC1CaWxsYm9hcmQtMSIsc2l6ZXM6W1s5NjAsOTBdLFs5NzAsMjUwXSxbOTUwLDkwXSxbNzI4LDkwXSxbOTcwLDkwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLU1lZGl1bVJlY3RhbmdsZS0xIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLVNreXNjcmFwZXItMSIsc2l6ZXM6W1sxNjAsNjAwXSxbMzM2LDI4MF0sWzMwMCwyNTBdLFszMDAsNjAwXSxbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLHNpemVzOltbMzM2LDI4MF0sWzMwMCwyNTBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0yIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxbMTYwLDYwMF0sWzMwMCw2MDBdLCBbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtQmlsbGJvYXJkLTIiLHNpemVzOltbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQyODkyOTYtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1NZWRpdW1SZWN0YW5nbGUtMSIsc2l6ZXM6W1szMDAsMTAwXSxbMzAwLDI1MF0sXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTY3OTM0MTQ2ODE5My0wIixzbG90TmFtZToiNTg3NzgxNjQvTW9iaWxlLU1lZGl1bVJlY3RhbmdsZS0yIixzaXplczpbWzMwMCwgMjUwXSwgWzMyMCwgNTBdLCBbMjUwLCAyNTBdLCBbMzAwLCAxMDBdLCBbMzM2LCAyODBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQzNjkyOTQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1IYWxmcGFnZS0xIixzaXplczpbWzMwMCw2MDBdLFszMDAsMjUwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTM0NDMyODI5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9Nb2JpbGUtU3RpY2t5IixzaXplczpbWzMwMCw1MF0sWzMyMCw1MF0sXX0sXSx0aW1lb3V0OjJlM30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpe2dvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpe2Fwc3RhZy5zZXREaXNwbGF5QmlkcygpLGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCl9KX0pfTsiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7PC9zY3JpcHQ+"></tm-consent><tm-consent type="googleadvertising" no-checkbox embed="PHNjcmlwdCAgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg=="></tm-consent>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/aa69c6e9c51f1e811847082c63633956/gridview/jquery.yiigridview.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-menu.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/vendors.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmsi.akamaized.net/js/svelte-components/consent/bundle.js"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-skyscraper.min.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
	var loginUrl='/profil/login';
	var onlyDE = '';
	var onlyMobile = '';
	var onlyTablet = '';
	var getUserID = '';

    function sendIvwData(typ) {
        if(typ == 'tabelle') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_t",
"co":""
}

        }else if(typ == 'reiter') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_r",
"co":""
}

        }else if(typ == 'forum') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_forum",
"co":""
}

        }else {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_s",
"co":""
}

        }
        if(typeof IOMm === 'function') {
            IOMm('pageview', { cp: iam_data.cp, co: iam_data.co });
        }
    }
jQuery(function($) {
jQuery('#yw1').yiiGridView({'ajaxUpdate':['yw1'],'ajaxVar':'ajax','pagerClass':'pager','loadingClass':'grid\x2Dview\x2Dloading','filterClass':'filters','tableClass':'items','selectableRows':1,'enableHistory':false,'updateSelector':'\x7Bpage\x7D,\x20\x7Bsort\x7D','filterSelector':'\x7Bfilter\x7D','afterAjaxUpdate':function() {window.LazyLoadInstance.update(); tmTrackingAndAds(); trackLinks(); document.dispatchEvent(new CustomEvent("tmInitTooltip"));}});
});
/*]]>*/
</script>
</body>

</html>
  recorded_at: Sun, 31 Dec 2023 15:14:57 GMT
- request:
    method: get
    uri: https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/plus/0?saison=2022
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept:
      - "*/*"
      User-Agent:
      - product/version
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Host:
      - www.transfermarkt.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - text/html; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Server:
      - nginx
      Date:
      - Sun, 31 Dec 2023 15:14:57 GMT
      Vary:
      - Accept-Encoding
      X-Host:
      - web08
      Set-Cookie:
      - TMSESSID=b3b3897642db7d9fccaeb97409d4323e; path=/; domain=.transfermarkt.com;
        secure; HttpOnly; SameSite=lax
      Expires:
      - Thu, 19 Nov 1981 08:52:00 GMT
      Cache-Control:
      - no-store, no-cache, must-revalidate
      Pragma:
      - no-cache
      X-User:
      - '0'
      Permissions-Policy:
      - interest-cohort=()
      Access-Control-Allow-Origin:
      - "*"
      X-Cache-Status:
      - MISS
      X-Cache:
      - Miss from cloudfront
      Via:
      - 1.1 befaf84d2b5b5495b5f5f2179d57efc0.cloudfront.net (CloudFront)
      X-Amz-Cf-Pop:
      - WAW51-P1
      X-Amz-Cf-Id:
      - NwJMIrOQu2fpIlwrg4M1PtXsbGTaulYHSw2p_u9Qzr-H0Z_SIgXHZg==
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!DOCTYPE html>
<html lang="en">

<head>
    
<script type="text/javascript" data-description="sourcepoint stub code">
    !function () { var e = function () { var e, t = "__tcfapiLocator", a = [], n = window; for (; n;) { try { if (n.frames[t]) { e = n; break } } catch (e) { } if (n === window.top) break; n = n.parent } e || (!function e() { var a = n.document, r = !!n.frames[t]; if (!r) if (a.body) { var i = a.createElement("iframe"); i.style.cssText = "display:none", i.name = t, a.body.appendChild(i) } else setTimeout(e, 5); return !r }(), n.__tcfapi = function () { for (var e, t = arguments.length, n = new Array(t), r = 0; r < t; r++)n[r] = arguments[r]; if (!n.length) return a; if ("setGdprApplies" === n[0]) n.length > 3 && 2 === parseInt(n[1], 10) && "boolean" == typeof n[3] && (e = n[3], "function" == typeof n[2] && n[2]("set", !0)); else if ("ping" === n[0]) { var i = { gdprApplies: e, cmpLoaded: !1, cmpStatus: "stub" }; "function" == typeof n[2] && n[2](i) } else a.push(n) }, n.addEventListener("message", (function (e) { var t = "string" == typeof e.data, a = {}; try { a = t ? JSON.parse(e.data) : e.data } catch (e) { } var n = a.__tcfapiCall; n && window.__tcfapi(n.command, n.version, (function (a, r) { var i = { __tcfapiReturn: { returnValue: a, success: r, callId: n.callId } }; t && (i = JSON.stringify(i)), e.source.postMessage(i, "*") }), n.parameter) }), !1)) }; "undefined" != typeof module ? module.exports = e : e() }();
</script>
<script data-description="sourcepoint configuration">
window._sp_ = {
    config: {"accountId":1254,"propertyId":7427,"gdpr":{"consentLanguage":"en","targetingParams":{"acps":"false"}},"baseEndpoint":"https://cdn.privacy-mgmt.com","isSPA":true,"cpPropertyId":"7a84b340"}}
</script>
<script src="https://cdn.privacy-mgmt.com/wrapperMessagingWithoutDetection.js" async></script>

<script type="text/javascript" data-description="contentpass integration">
    (function() {
        var cpBaseUrl = 'https://cp.transfermarkt.com';
        var cpController = cpBaseUrl + '/now.js';
        var cpPropertyId = '7a84b340';

        !function(C,o,n,t,P,a,s){C['CPObject']=n;C[n]||(C[n]=function(){
        (C[n].q=C[n].q||[]).push(arguments)});C[n].l=+new Date;a=o.createElement(t);
        s=o.getElementsByTagName(t)[0];a.src=P;s.parentNode.insertBefore(a,s)}
        (window,document,'cp','script',cpController);

        !function(C,o,n,t,P){if(!C[n].patched){cp('extension','authenticate');P=C[n].q.push;
        C[n].q.push=function(a){if(a[0]==='authenticate'){if((o['cookie']||'').indexOf('_cpauthhint=')===-1&&
        !(C['localStorage']||{})['_cpuser']&&C.location.href.toLowerCase().indexOf('cpauthenticated')===-1){
        t={isLoggedIn:function(){return false;},hasValidSubscription:function(){return false;}};
        (typeof a[1]==='function'&&a[1](null,t));C[n].afp=true;P.apply(C[n].q,[['authenticate',null]]);
        return t;}}P.apply(C[n].q,[a]);}}}
        (window,document,'cp',false);

        cp('create', cpPropertyId, {
        baseUrl: cpBaseUrl
        });

        cp('render', {
        onFullConsent: function() {
            console.log('[DEMO] onFullConsent');
        }
        })
    })()
</script>

<script type="text/javascript" data-description="contentpass sourcepoint fast path">
(function () {
    cp('authenticate', function(err, user) {
        if (err || (!user.isLoggedIn() && !user.hasValidSubscription())) {
        console.log('[SPCP] Taking fast path');
        (function spExecMsg() {
            if (window._sp_ && window._sp_.executeMessaging) {
            if (!window._sp_.config.isSPA) {
                console.warn('[SPCP] Sourcepoint not in SPA mode!');
            } else if (window._sp_.version) {
                console.log('[SPCP] Sourcepoint already running');
            } else {
                console.log('[SPCP] Starting Sourcepoint');
                window._sp_.executeMessaging();
            }
            } else {
            console.log('[SPCP] Sourcepoint not loaded yet. Retrying.');
            setTimeout(spExecMsg, 10);
            }
        })();
        }
    });
    })();
</script>
    <meta charset="utf-8" />
        <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="shortcut icon" sizes="16x16" href="/favicon-16x16.png">
    <link rel="shortcut icon" sizes="192x192" href="/android-chrome-192x192.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=2.0, user-scalable=no" />
<meta name="robots" content="noindex, nofollow" />
<meta name="keywords" content="Nicolò Zaniolo,Aston Villa,Premier League,Italy" />
<meta name="description" content="Player stats of Nicolò Zaniolo (Aston Villa) ➤ Goals ➤ Assists ➤ Matches played ➤ All performance data" />
<meta property="og:type" content="article" />
<meta property="og:image" content="https://img.a.transfermarkt.technology/portrait/big/392085-1630498680.jpg?lm=1" />
<meta property="og:description" content="" />
<meta property="og:title" content="Nicolò Zaniolo - Stats 22/23" />
<meta property="og:url" content="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/plus/0?saison=2022" />
<link hreflang="de" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="de-LU" rel="alternate" href="https://www.transfermarkt.de/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="de-AT" rel="alternate" href="https://www.transfermarkt.at/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="de-CH" rel="alternate" href="https://www.transfermarkt.ch/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="tr" rel="alternate" href="https://www.transfermarkt.com.tr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="it-CH" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="it" rel="alternate" href="https://www.transfermarkt.it/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="pl" rel="alternate" href="https://www.transfermarkt.pl/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="en-GB" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="en-IE" rel="alternate" href="https://www.transfermarkt.co.uk/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-ES" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-CL" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-VE" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-EC" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-CU" rel="alternate" href="https://www.transfermarkt.es/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="nl" rel="alternate" href="https://www.transfermarkt.nl/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="pt" rel="alternate" href="https://www.transfermarkt.pt/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="ru" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="world" rel="alternate" href="https://www.transfermarkt.world/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="fr-CH" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="fr" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="fr-CA" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="fr-CI" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="fr-LU" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="fr-BE" rel="alternate" href="https://www.transfermarkt.fr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="pt-BR" rel="alternate" href="https://www.transfermarkt.com.br/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="en-US" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="en-CA" rel="alternate" href="https://www.transfermarkt.us/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="en-IN" rel="alternate" href="https://www.transfermarkt.co.in/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="en-ZA" rel="alternate" href="https://www.transfermarkt.co.za/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="x-default" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="en" rel="alternate" href="https://www.transfermarkt.com/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="nl-BE" rel="alternate" href="https://www.transfermarkt.be/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="ro" rel="alternate" href="https://www.transfermarkt.ro/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="el-GR" rel="alternate" href="https://www.transfermarkt.gr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="ko-KR" rel="alternate" href="https://www.transfermarkt.co.kr/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-AR" rel="alternate" href="https://www.transfermarkt.com.ar/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-MX" rel="alternate" href="https://www.transfermarkt.mx/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-CO" rel="alternate" href="https://www.transfermarkt.co/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="es-PE" rel="alternate" href="https://www.transfermarkt.pe/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="ms" rel="alternate" href="https://www.transfermarkt.my/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="ja" rel="alternate" href="https://www.transfermarkt.jp/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link hreflang="id" rel="alternate" href="https://www.transfermarkt.co.id/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/menue.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-main.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main_desktop.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/print.css?_sn=1?lm=1703164027" media="print" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/chosen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/stylesheets/main.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/styles/tm-player-profile.min.css?lm=1703163982" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/gespieltePositionen.css?lm=1703164027" />
<link rel="stylesheet" type="text/css" href="https://tmssl.akamaized.net/css/statistiken.css?lm=1703164027" />
<script type="text/javascript" src="https://tmssl.akamaized.net/js/vendor/jquery.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/b7c5571cf8957553f95f6d9069eaed67/jquery.ba-bbq.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.ajaxaddition.jquery.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/functions.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/main_desktop.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/chosen.jquery.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
console.info("%c [TM-ADs] Initialize Ads on domain com (wettbewerbe_profile_spieler | spieler/leistungsdaten)", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle1 (div-gpt-ad-1621526463511-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render rectangle2 (div-gpt-ad-1621528018930-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraper (div-gpt-ad-1621527521939-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render skyscraperbtf (div-gpt-ad-1621528123398-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render billboard (div-gpt-ad-1621524903956-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render fullsize_contentad (div-gpt-ad-1621528173524-0) for google", "background: #222; color: #bada55")
console.info("%c [TM-ADs] No ad configuration found for richmedia", "background: #222; color: #bada55")
    var oddsServe = function(placement,competition,match,node) {
        if (!node){
            var s=document.readyState==='loading'?document.getElementsByTagName('script'):[];
            node=s.length?s[s.length-1].parentNode:null;
        }
        oddsServe.queue.push({contentUnitId:placement,competition:competition,match:match,node:node});
    }
    
    oddsServe.onInit=function(callbacks){
        if (typeof window.__tcfapi === 'function') {
            __tcfapi('addEventListener', 2, function(tcdata, success) {
                let tcf20compatibleString;
                if(success) {
                    if (tcdata.eventStatus === 'useractioncomplete') {
                        tcf20compatibleString = tcdata.tcString;
                    } else if (tcdata.eventStatus === 'tcloaded') {
                        tcf20compatibleString = tcdata.tcString;
                    }
                    callbacks.setGdprOptions({
                        gdpr:1,
                        gdpr_pd:1,
                        gdpr_consent:tcf20compatibleString,
                    });
                }
            });
        } else {
            console.warn('E2: __tcfapi not found');
        }
    };
    oddsServe.options={gdpr_wait:true};
    oddsServe.queue=[];
console.info("%c [TM-ADs] Add initScript for slots: rectangle1 | rectangle2 | skyscraper | skyscraperbtf | billboard | fullsize_contentad", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Register slots with JS vendor lib", "background: #222; color: #bada55")
console.info("%c [TM-ADs] Render ad slots js for google", "background: #222; color: #bada55")
PWT = {};
window.googletag = window.googletag || {cmd: []};
googletag.cmd.push(() => {
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-1",
    [[960,90],[970,250],[950,90],[728,90],[970,90]],
    "div-gpt-ad-1621524903956-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-1",
    [[300,250],[336,280]],
    "div-gpt-ad-1621526463511-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-MediumRectangle-2",
    [[300,250],[336,280]],
    "div-gpt-ad-1621528018930-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-1",
    [[160,600],[336,280],[300,250],[300,600],[120, 600]],
    "div-gpt-ad-1621527521939-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Skyscraper-2",
    [[300,250],[336,280],[160,600],[300,600],[120, 600]],
    "div-gpt-ad-1621528123398-0"
  ) 
.addService(googletag.pubads());
  googletag.defineSlot(
    "/58778164/Desktop-Billboard-2",
    [[950,90],[970,250],[728,90],[970,90],[960,90],[300, 250]],
    "div-gpt-ad-1621528173524-0"
  ) 
.addService(googletag.pubads());
  googletag.pubads().enableLazyLoad({
    fetchMarginPercent: 500,
    renderMarginPercent: 200,
    mobileScaling: 2.0
  });
  googletag.pubads().setCentering(true);
  googletag.pubads().disableInitialLoad();
  googletag.pubads().enableSingleRequest();
  googletag.pubads().setTargeting("cg1", ["spieler"]);
  googletag.pubads().setTargeting("URL", "www.transfermarkt.com");
  googletag.enableServices();
});

console.info("%c [TM-ADs] Added external ad script(s) for vendor google", "background: #222; color: #bada55")
/*]]>*/
</script>
<title>Nicolò Zaniolo - Stats 22/23 | Transfermarkt</title>
    <link rel="apple-touch-icon-precomposed" href="/apple-touch-icon-152x152.png">
            <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/manager/base/es6/bundle.js" as="script" id="IOMmBundle">
        <link rel="preload" href="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js" as="script">
        <script type="text/javascript" src="//data-84a0f3455d.transfermarkt.com/iomm/latest/bootstrap/loader.js"></script>
    
<script type="text/javascript">
   tmData = {
       loggedIn : "0",
       tmTraffic: "0",
   };
</script>
<script>// Set to the same value as the web property used on the site
		var gaProperty = 'UA-3816204-13';

		// Disable tracking if the opt-out cookie exists.
		var disableStr = 'ga-disable-' + gaProperty;
		if (document.cookie.indexOf(disableStr + '=true') > -1) {
			window[disableStr] = true;
		}

		// Opt-out function
		function gaOptout() {
			document.cookie = disableStr + '=true; expires=Thu, 31 Dec 2099 23:59:59 UTC; path=/';
			window[disableStr] = true;
		}</script>
	<script>
	window.dataLayer = window.dataLayer || [];
	function gtag() { dataLayer.push(arguments); } 
   gtag('set', 'linker', { 'domains': [/^transfermarkt\.(com|de|nl|it|at|ch|es|fr|com\.tr|pt|tv|pl|co\.uk)$/]});
   gtag('js', new Date()); 
   gtag('set',
  {
    'custom_map': {
                    'dimension1': 'loggedIn',
                    'dimension2': 'tmTraffic'
                }
  });
        gtag('config', 'UA-3816204-13', {
                'anonymize_ip': true,
                'transport_type': 'beacon',
                'content_group1': 'statistik',
                'content_group2': 'spieler',
                'content_group3': 'leistungsdaten',
                'content_group4': '392085',
                'loggedIn': tmData.loggedIn,
                'tmTraffic': tmData.tmTraffic
            }); 
   function tmEvent(category, action, label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event',
                    action,
                    {
                        'event_category': category,
                        'event_label': label
                    }
                );
            }

            function tmTiming(value, name, event_category, event_label) {
                if (typeof gtag !== 'function') {
                    return;
                }
                gtag('event', 'timing_complete', {
                    name,
                    value,
                    event_category,
                    event_label
                });
            }
            
	</script>    <script type="text/javascript" src="https://tmssl.akamaized.net//ads/ads.js"></script>
    <script type="text/javascript">
        window.tmGaId = "UA-3816204-13";
    </script>

            <link rel="canonical" href="https://www.transfermarkt.com/nicolo-zaniolo/leistungsdaten/spieler/392085">
    <!-- no Tisoomi -->
    </head>

<body class="" itemscope itemtype="http://schema.org/WebPage" data-tm-tld="com" data-cmp-layer-id="910164">
    
                <tm-language-hint></tm-language-hint>
        <div id="main">
                <div class="werbung-skyscraper-container">
            <div class="werbung werbung-skyscraper">
  <div id="div-gpt-ad-1621527521939-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621527521939-0"); });</script>
  </div>
</div>
        </div>

        <div class="werbung-skyscraperbtf-container">
            <div class="werbung werbung-skyscraperbtf">
  <div id="div-gpt-ad-1621528123398-0" style="min-width: 160px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528123398-0"); });</script>
  </div>
</div>
        </div>
        
        <header class="tm-header">
                            <div class="tm-header__box ">
                                            <a href="/">
                            <img class="icon-logo" src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" height="62" width="156" title="Transfermarkt" alt="Transfermarkt">
                        </a>
                                                                <tm-domainswitcher open-list="false" tld="com"></tm-domainswitcher>
                                            <div class="tm-header__social-box">
                        <a href="https://www.facebook.com/Transfermarkt.global" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Facebook');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/fb_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://twitter.com/TMuk_news" target="_blank" class="header__social-link header__social-link--twitter" onclick="tmEvent('SM-Icons_Header','click','Twitter');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/twitter.svg" width="20" height="20" class="header__icon header__icon--twitter">
                </a>
                <a href="http://instagram.com/transfermarkt_official" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Instagram');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/instagram_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="/intern/rssguide" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','RSS');
">
                    <img src="https://tmsi.akamaized.net/icons/socialMedia/rss_icon_hover.svg" width="20" height="20" class="header__icon">
                </a>
                <a href="https://www.tiktok.com/@transfermarkt" target="_blank" class="header__social-link" onclick="tmEvent('SM-Icons_Header','click','Tiktok');
">
                    <img src="https://tmsi.akamaized.net/icons/tiktokRebrush.svg" width="20" height="20" class="header__icon">
                </a>
                    </div>
                            <div class="tm-header__input-wrapper " id="schnellsuche-platz">
                            <form name="schnellsuche" id="schnellsuche" class="tm-header__form" action="/schnellsuche/ergebnis/schnellsuche">
                                <input type="text" name="query" class="tm-header__input--search-field" onClick="" placeholder="Enter your search term" autocorrect="off" spellcheck="false" value="" />
                                <input type="submit" value="" class="tm-header__input--search-send" alt="search" />
                            </form>
                            <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="tm-header__search-detail">
                                <img src="https://tmsi.akamaized.net/icons/search_icon_plus_blue_white.svg" alt="search" class="tm-header__icon-detail-search" height="26" width="26">
                            </a>
                        </div>
                                    </div>
            
            <nav class="main-navbar navihalter">
                                                                        <ul class="main-navbar__container megamenu_dark_bar megamenu_dark" itemscope="itemscope" itemtype="http://www.schema.org/SiteNavigationElement">
                    <a href="/" class="sticky-logo hide-for-small">
                <span title="Transfermarkt" class="tm_svg"></span>
            </a>
            
    <li class="main-navbar__list" data-nav-group="news">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('News','click','menu');
"
            >
            News        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="transfers">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Transfers & Gerüchte','click','menu');
"
            >
            Transfers & rumours        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="marktwerte">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Marktwerte','click','menu');
"
            >
            Market values        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list aktiv" data-nav-group="wettbewerbe">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('Wettbewerbe','click','menu');
"
            >
            Competitions        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="foren">
                <a
            class="main-navbar__list-title tm-main-nav-el"
            href="/uebersicht/index/forum/com"
            onClick="tmEvent('Foren','click','menu');
"
            >
            Forums                    </a>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" data-nav-group="meintm">
                <span
            class="main-navbar__list-title tm-main-nav-el"
            onClick="tmEvent('MeinTM','click','menu');
"
            >
            My TM        </span>
                    <div class="main-navbar__drop-down">
                                    <img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/>
                                </div>
        
    <li class="main-navbar__list" >
                <a
            class="main-navbar__list-title tm-main-nav-el live-navilink"
            href="/ticker/index/live"
            onClick="tmEvent('Live','click','menu');
"
            >
            Live                            <tm-live-match-counter auto-request="true" content='["Live maches", "Live matches"]'></tm-live-match-counter>
                    </a>
            </li>
</ul>

                
                <form name="schnellsuche" id="schnellsuche-sticky" class="noclose sticky-suche" action="/schnellsuche/ergebnis/schnellsuche">
                    <input type="text" name="query" class="header-suche" onClick="" placeholder="Enter your search term" />
                    <input type="image" class="header-suche-abschicken" src="https://tmssl.akamaized.net//images/suchicon.png" alt="search" />
                </form>
                <a href="/detailsuche/spielerdetail/suche" title="to detailed player search" id="detailsuche-head" class="header-suche-detailsuche">
                    <span class="icon-detailsuche"></span>
                </a>
                                    <a id="arrow-up-xy" href="#">
                        <svg style="fill: white; width: 20px; height: 20px;" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve">
                            <g>
                                <path d="M78.016,49.132L51.961,12.714c-0.471-0.66-1.233-1.049-2.043-1.051c-0.006,0-0.006,0-0.006,0
                                c-0.815,0.002-1.575,0.396-2.048,1.059L21.977,49.14c-0.546,0.767-0.616,1.776-0.183,2.612c0.426,0.835,1.292,1.361,2.236,1.361
                                h12.183l-0.001,32.709c0,1.39,1.125,2.515,2.516,2.515l22.541-0.001c1.389,0.001,2.515-1.124,2.516-2.517l0-32.705h12.187
                                c0.94,0,1.803-0.53,2.237-1.367C78.641,50.911,78.566,49.9,78.016,49.132z" />
                            </g>
                        </svg>
                    </a>
                <div class="tm-login " id="login" onClick="tmEvent('login','click','sign_in_button');
">
    <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
     fill="#FFF" width="100px" height="100px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve" class="tm-login__image">
        <g>
            <path d="M80.161,60.441l-15.66-7.47l-6.622-3.159c2.892-1.822,5.241-4.634,6.778-8.022c1.22-2.69,1.946-5.734,1.946-8.99
                c0-1.827-0.29-3.562-0.694-5.236C63.94,19.453,57.605,13.477,50,13.477c-7.461,0-13.701,5.763-15.792,13.645
                c-0.482,1.808-0.815,3.688-0.815,5.68c0,3.459,0.808,6.684,2.181,9.489c1.587,3.254,3.94,5.937,6.804,7.662l-6.342,2.953
                l-16.168,7.53c-1.404,0.658-2.327,2.242-2.327,4.011v15.062v2.703c0,2.381,1.659,4.312,3.708,4.312h57.505
                c2.048,0,3.708-1.93,3.708-4.312v-2.703V64.446C82.46,62.683,81.552,61.114,80.161,60.441z"/>
        </g>
    </svg>
    <span class="tm-login__cta">
        Log in    </span>
</div>
            </nav>

            
            <div class="quick-select-wrapper">
    <div id="quickselect-skeleton" class="ssc" style="height: 40px;">
        <div class="ssc-wrapper flex" style="height: 100%; padding: 0">
            <div class="ssc-square quickselect-element" style="width: 40px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 171.06px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 170.84px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 138.03px;"></div>
            <div class="ssc-square quickselect-element quickselect-selector" style="width: 141.5px;"></div>
        </div>
    </div>

    <tm-quick-select-bar
        default-country="189"
        default-competition="GB1"
        default-club="405"
        default-player="392085"
        dropdown-visible=""
        translations='{&quot;home&quot;:&quot;Home&quot;,&quot;country&quot;:&quot;Country&quot;,&quot;competition&quot;:&quot;Competition&quot;,&quot;club&quot;:&quot;Club&quot;,&quot;player&quot;:&quot;Player&quot;,&quot;attack&quot;:&quot;Striker&quot;,&quot;midfield&quot;:&quot;Mittelfeld&quot;,&quot;defense&quot;:&quot;Defender&quot;,&quot;goalkeeper&quot;:&quot;Goalkeeper&quot;}'
        >
    </tm-quick-select-bar>
</div>


            <div class="werbung werbung-billboard">
  <div id="div-gpt-ad-1621524903956-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621524903956-0"); });</script>
  </div>
</div>
        </header>
        <main>

            
            
    <div id="modal-1" class="modal micromodal-slide" aria-hidden="true" tabindex="1">
        <div class="modal__overlay" tabindex="-1" data-custom-close>
            <div
                class="modal__container"
                role="dialog"
                aria-modal="true"
                aria-labelledby="modal-1-title"
                data-custom-close
                >
                <header class="modal__header">
                    <button
                        class="modal__close modal__close--profile-img"
                        aria-label="Close modal"
                        data-custom-close
                        >
                    </button>
                </header>
                <div id="modal-1-content" class="modal__content">
                                        <img src='https://img.a.transfermarkt.technology/portrait/big/392085-1630498680.jpg?lm=1' alt='Nicolò Zaniolo' title='Nicolò Zaniolo' data-custom-close loading="lazy">
                </div>
            </div>
        </div>
    </div>


<header class="data-header" itemscope itemtype="https://schema.org/Person">
                        <div class="data-header__ribbon">
                <a title="On loan from Galatasaray until Jun 30, 2024" href="/galatasaray/kadernaechstesaison/verein/141/saison_id/2023"><span>on loan</span></a>            </div>
                <div class="data-header__headline-container">
            <h1 class="data-header__headline-wrapper">
                                    <span class="data-header__shirt-number">
                        #22                    </span>
                                Nicolò <strong>Zaniolo</strong>            </h1>
                                </div>
                    <div class="data-header__badge-container">
                                                    <a href="/nicolo-zaniolo/erfolge/spieler/392085" title="Conference League winner" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/856.png?lm=1639997104" title="Conference League winner" alt="Conference League winner" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/nicolo-zaniolo/erfolge/spieler/392085" title="Turkish champion" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/20.png?lm=1520606999" title="Turkish champion" alt="Turkish champion" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                    <a href="/nicolo-zaniolo/erfolge/spieler/392085" title="Italian Youth champion (Primavera)" class="data-header__success-data">
                                                    <img src="https://tmssl.akamaized.net/images/erfolge/header/365.png?lm=1461847499" title="Italian Youth champion (Primavera)" alt="Italian Youth champion (Primavera)" class="" />                                                <span class="data-header__success-number">1</span>
                    </a>
                                            </div>
        
                    <div class="data-header__box--big">
                                    <a href="/aston-villa/startseite/verein/405" class="data-header__box__club-link">
                                            <img srcset="
                            https://tmssl.akamaized.net/images/wappen/normquad/405.png?lm=1469443765 1x,
                            https://tmssl.akamaized.net/images/wappen/homepageWappen150x150/405.png?lm=1469443765 2x
                            " alt="Aston Villa" height="100" width="100" />
                                        </a>
                                <div class="data-header__club-info">
                    <span class="data-header__club" itemprop="affiliation">
                        <a title="Aston Villa" href="/aston-villa/startseite/verein/405">Aston Villa</a>                    </span><br />                    
                                                                            <span class="data-header__league">
                                    <a class="data-header__league-link" href="/premier-league/startseite/wettbewerb/GB1">
                                        <img src="https://tmssl.akamaized.net/images/logo/verytiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" />Premier League                                    </a>
                                </span>
                                                                            <span class="data-header__label">League level:
                                <span class="data-header__content">
                                    <img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" />First Tier                                </span>
                            </span>
                                                                                                        <span class="data-header__label">Joined: <span class="data-header__content">Aug 18, 2023</span></span>
                            <span class="data-header__label">Contract expires: <span class="data-header__content">Jun 30, 2024</span></span>
                                                            </div>
            </div>
        
        <div class="data-header__profile-container">
                            <div class="modal-trigger" data-custom-open="modal-1" id="fotoauswahlOeffnen" style="cursor:pointer" onclick="tmEvent('spielerprofil','click','profilbild');">
            
                                <img src="https://img.a.transfermarkt.technology/portrait/header/392085-1630498680.jpg?lm=1" title="Nicolò Zaniolo" alt="Nicolò Zaniolo" class="data-header__profile-image" height="181" width="139" /><div class="bildquelle"><span title="imago images">imago images</span></div>
                                    <span class="modal-trigger-icon">+</span>
                </div>
                        </div>
        <div class="data-header__info-box ">
            <div class="data-header__details">
                <ul class="data-header__items">
                                            <li class="data-header__label">Date of birth/Age:
                            <span itemprop="birthDate" class="data-header__content">
                                Jul 2, 1999 (24)                            </span>
                        </li>

                                                    <li class="data-header__label">Place of birth:
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                <span class="data-header__content" itemprop="birthPlace">
                                    Massa                                </span>
                            </li>
                        
                                            <li class="data-header__label">Citizenship:
                            <span itemprop="nationality" class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />                                Italy                            </span>
                        </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li class="data-header__label">Height:
                            <span itemprop="height" class="data-header__content">
                                1,90 m                            </span>
                        </li>
                    
                    <li class="data-header__label">Position:
                        <span class="data-header__content">
                            Attacking Midfield                        </span>
                    </li>
                                    </ul>
                <ul class="data-header__items">
                                            <li for="" class="data-header__label">
                                                            Current international:
                                                        <span class="data-header__content">
                                <img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen flagge" /><a title="Italy" href="/italien/startseite/verein/3376">Italy</a>                            </span>
                        </li>
                                                    <li class="data-header__label">Caps/Goals:
                                <a class="data-header__content data-header__content--highlight" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376">17                                </a>/
                                <a class="data-header__content data-header__content--highlight" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376">2                                </a>
                            </li>
                                    </ul>
            </div>
        </div>
        
    
            <div class="data-header__box--small">
                <a href="/nicolo-zaniolo/marktwertverlauf/spieler/392085" class="data-header__market-value-wrapper"><span class="waehrung">€</span>25.00<span class="waehrung">m</span>                <p class="data-header__last-update">Last update: Dec 19, 2023</p></a>
            </div>

            
    </header>
    <div class="row hide-on-print" id="subnavi" data-season="" data-controller="spieler" data-action="leistungsdaten" data-path="player-path/leistungsdaten/spieler/392085/plus/0" data-id="392085">
        <div class="page_wrapper subnavi">
            <div class="large-12 columns">
                <div class="subnavi_box" id="subnavigation">
                    <div class="submenu-text show-for-small">
                        <a name="SubNavi" title="Navigation">
                            <span>≡ Sub navigation</span>
                        </a>
                    </div>
                    <nav>
                        <ul id="submenu">
                                                <li id="close_submenu" class="show-for-small">
                            <div id="submenu-icon">
                                <span class="clicked"></span>
                                <span class="clicked"></span>
                            </div>
                            <a>Close subnavigation</a>
                        </li>
                                                    <li id="profile" class="first-button  " data-nav-group="profile">
                                <a name="SubNavi" href="/nicolo-zaniolo/profil/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','profil');
">Profile</a>
                                                            </li>
                                                        <li id="stats" class="  " data-nav-group="stats">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','leistungsdaten');
">Stats</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="market-values" class="  " data-nav-group="market-values">
                                <a name="SubNavi" href="/nicolo-zaniolo/marktwertverlauf/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','marktwert');
">Market values</a>
                                                            </li>
                                                        <li id="transfers" class="  " data-nav-group="transfers">
                                <a name="SubNavi" href="/nicolo-zaniolo/transfers/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','transfers');
">Transfers</a>
                                                            </li>
                                                        <li id="rumors" class="  " data-nav-group="rumors">
                                <a name="SubNavi" href="/nicolo-zaniolo/geruechte/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','geruchte');
">Rumors</a>
                                                            </li>
                                                        <li id="national-team" class="  " data-nav-group="national-team">
                                <a name="SubNavi" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','nationalmannschaft');
">National team</a>
                                                            </li>
                                                        <li id="news" class="  " data-nav-group="news">
                                <a name="SubNavi" href="/nicolo-zaniolo/news/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','news');
">News</a>
                                                            </li>
                                                        <li id="achievements" class="  " data-nav-group="achievements">
                                <a name="SubNavi" href="/nicolo-zaniolo/erfolge/spieler/392085" class="tm-subnav-item megamenu" onClick="tmEvent('subnavigation_spieler','click','erfolge');
">Achievements</a>
                                                            </li>
                                                        <li id="career" class="  " data-nav-group="career">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','karriere');
">Career</a>
                                <div class="dropdown_fullwidth " title=""><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                        <li id="subnavi-edit" class="  subnavi-edit" data-nav-group="subnavi-edit">
                                <a name="SubNavi" href="#subnavi" class="tm-subnav-item megamenu_drop" onClick="tmEvent('subnavigation_spieler','click','edit');
"></a>
                                <div class="dropdown_fullwidth gasthinweis" title="Log in or register now"><div><img src="https://tmsi.akamaized.net/icons/tm_spinner_inverted.min.svg" width="40" height="40" class="navigation-loading-spinner"/></div></div>                            </li>
                                                    </ul>
                    </nav>
                </div>
            </div>
        </div>
    </div>
    <script>
        var stickySubTop = $('#subnavigation').offset().top;
        stickySubTop = stickySubTop - 60;
        var main = $("#main");
        $(document).ready(function() {
            $(window).on('scroll load', function() {
                if (!main.hasClass("stickySubnavigation")) {
                    stickySubTop = $('#subnavigation').offset().top;
                }
                if ($(window).scrollTop() > stickySubTop) {
                    main.addClass("stickySubnavigation");
                } else {
                    main.removeClass("stickySubnavigation");
                }
            });
        });
    </script>
    <style>
        .forum-anchor {
            margin-top: -80px;
        }
    </style>

                        
<div class="row">
    <div class="large-8 columns">

        <div class="box">
            <h2 class="content-box-headline">
                Stats of Nicolò Zaniolo            </h2>
            <p class="info-content">
                This page contains information about a player's detailed stats. In the info box, you can filter by period, club, type of league and competition. The "Detailed stats" tab shows a player's total appearances, goals, cards and cumulative minutes of play for each competition, and indicates the season in which it occurred.            </p>
            <div class="content">
                <form action="/nicolo-zaniolo/leistungsdaten/spieler/392085/plus/0" method="get">                <div class="row">
                    <div class="large-12 columns">
                        <table class="auflistung">
                            <tbody>
                                <tr>
                                    <td>Filter by season:</td>
                                    <td>
                                        <div class="inline-select">
                                            <select name="saison" data-placeholder="Filter by season" class="chzn-select" tabindex="0">
                                                <option value="ges">Overall balance</option>
                                                                                                    <option value="2023">23/24</option>
                                                                                                    <option  selected="selected"value="2022">22/23</option>
                                                                                                    <option value="2021">21/22</option>
                                                                                                    <option value="2020">20/21</option>
                                                                                                    <option value="2019">19/20</option>
                                                                                                    <option value="2018">18/19</option>
                                                                                                    <option value="2017">17/18</option>
                                                                                                    <option value="2016">16/17</option>
                                                                                                    <option value="2015">15/16</option>
                                                                                                    <option value="2014">14/15</option>
                                                                                            </select>
                                        </div>
                                    </td>
                                    <td>
                                        <input type="submit" class="small button" value="Show">
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                </form>            </div>
        </div>
        <div class="box">
            <h2 class="content-box-headline">
                Stats 22/23            </h2>
            
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022#gesamt"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1#gesamt"><div class=""><span>Detailed</span></div></a></div>
            <div class="responsive-table">
                <div id="yw1" class="grid-view">
<div class="summary"></div>
<table class="items">
<thead>
<tr>
<th colspan="2" id="yw1_c0"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/wettbewerb">Competition</a></th><th class="hide" id="yw1_c1"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/wettbewerb">wettbewerb</a></th><th class="zentriert" id="yw1_c2"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/einsaetze.desc"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></a></th><th class="zentriert" id="yw1_c3"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/tore.desc"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></a></th><th class="zentriert" id="yw1_c4"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/vorlagen.desc"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></a></th><th class="zentriert" id="yw1_c5"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/gelbe.desc"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c6"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/gelbrote.desc"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></a></th><th class="zentriert" id="yw1_c7"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/rote.desc"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></a></th><th class="rechts" id="yw1_c8"><a class="sort-link" href="/player-path/leistungsdaten/spieler/392085/saison/2022/plus/0/sort/einsatzzeit.desc"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></a></th></tr>
</thead>
<tfoot>
<tr>
<td colspan="2" class="rechts">Total  22/23:</td><td class="hide">&nbsp;</td><td class="zentriert">28</td><td class="zentriert">7</td><td class="zentriert">4</td><td class="zentriert">7</td><td class="zentriert">-</td><td class="zentriert">2</td><td class="rechts">1.607'</td></tr>
</tfoot>
<tbody>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" /></td><td class="hauptlink no-border-links"><a title="Serie A" href="/serie-a/startseite/wettbewerb/IT1">Serie A</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/wettbewerb/IT1/verein/12">13</a></td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">4</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">896'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/tr1.png?lm=1694093655" title="Süper Lig" alt="Süper Lig" class="" /></td><td class="hauptlink no-border-links"><a title="Süper Lig" href="/super-lig/startseite/wettbewerb/TR1">Süper Lig</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/wettbewerb/TR1/verein/141">10</a></td><td class="zentriert">5</td><td class="zentriert">-</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">1</td><td class="rechts">349'</td></tr>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/el.png?lm=1626811059" title="UEFA Europa League" alt="UEFA Europa League" class="" /></td><td class="hauptlink no-border-links"><a title="Europa League" href="/europa-league/startseite/pokalwettbewerb/EL">Europa League</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/wettbewerb/EL/verein/12">3</a></td><td class="zentriert">1</td><td class="zentriert">3</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">1</td><td class="rechts">210'</td></tr>
<tr class="even">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/trp.png?lm=1646477111" title="Türkiye Kupasi" alt="Türkiye Kupasi" class="" /></td><td class="hauptlink no-border-links"><a title="Türkiye Kupasi" href="/turkiye-kupasi/startseite/pokalwettbewerb/TRP">Türkiye Kupasi</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/wettbewerb/TRP/verein/141">1</a></td><td class="zentriert">-</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">66'</td></tr>
<tr class="odd">
<td class="hauptlink no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/cit.png?lm=1613033113" title="Italy Cup" alt="Italy Cup" class="" /></td><td class="hauptlink no-border-links"><a title="Italy Cup" href="/coppa-italia/startseite/pokalwettbewerb/CIT">Italy Cup</a></td><td class="zentriert player-profile-performance-data"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/wettbewerb/CIT/verein/12">1</a></td><td class="zentriert">-</td><td class="zentriert">-</td><td class="zentriert">1</td><td class="zentriert">-</td><td class="zentriert">-</td><td class="rechts">86'</td></tr>
</tbody>
</table>
<div class="keys" style="display:none" title="/player-path/leistungsdaten/spieler/392085/plus/0?saison=2022"><span>Serie A</span><span>Süper Lig</span><span>Europa League</span><span>Türkiye Kupasi</span><span>Italy Cup</span></div>
</div>            </div>
        </div>

        <div class="box">
    <div class="table-header img-vat">
        <a name="EL" href="/uefa-europa-league/startseite/wettbewerb/EL/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/el.png?lm=1626811059" title="UEFA Europa League" alt="UEFA Europa League" class="" />UEFA Europa League        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-europa-league/spieltag/pokalwettbewerb/EL/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">9/8/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Ludogorets Razgrad" href="/pfk-ludogorets-razgrad/spielplan/verein/31614/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31614.png?lm=1629528048" title="Ludogorets Razgrad" alt="Ludogorets Razgrad" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Ludogorets Razgrad" href="/pfk-ludogorets-razgrad/spielplan/verein/31614/saison_id/2022">Ludogorets</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3912562" href="/ludogorets-razgrad_as-roma/index/spielbericht/3912562"><span class="redtext">2:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Shoulder injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Shoulder injury</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-league/spieltag/pokalwettbewerb/EL/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">9/15/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="HJK Helsinki" href="/hjk-helsinki/spielplan/verein/1008/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1008.png?lm=1653665348" title="HJK Helsinki" alt="HJK Helsinki" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="HJK Helsinki" href="/hjk-helsinki/spielplan/verein/1008/saison_id/2022">HJK Helsinki</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3912561" href="/as-roma_hjk-helsinki/index/spielbericht/3912561"><span class="greentext">3:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">76'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-league/spieltag/pokalwettbewerb/EL/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">10/6/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Real Betis Balompié" href="/real-betis-sevilla/spielplan/verein/150/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/150.png?lm=1663358526" title="Real Betis Balompié" alt="Real Betis Balompié" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Real Betis Balompié" href="/real-betis-sevilla/spielplan/verein/150/saison_id/2022">Real Betis</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3912560" href="/as-roma_real-betis-balompie/index/spielbericht/3912560"><span class="redtext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">90 + 3'</td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-europa-league/spieltag/pokalwettbewerb/EL/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">10/13/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Real Betis Balompié" href="/real-betis-sevilla/spielplan/verein/150/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/150.png?lm=1663358526" title="Real Betis Balompié" alt="Real Betis Balompié" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Real Betis Balompié" href="/real-betis-sevilla/spielplan/verein/150/saison_id/2022">Real Betis</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3912565" href="/real-betis-balompie_as-roma/index/spielbericht/3912565"><span class="">1:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span class="icons_sprite icon-rotekarte-table" title="Red card suspension">&nbsp;</span>Red card suspension</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-europa-league/spieltag/pokalwettbewerb/EL/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">10/27/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="HJK Helsinki" href="/hjk-helsinki/spielplan/verein/1008/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1008.png?lm=1653665348" title="HJK Helsinki" alt="HJK Helsinki" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="HJK Helsinki" href="/hjk-helsinki/spielplan/verein/1008/saison_id/2022">HJK Helsinki</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3912568" href="/hjk-helsinki_as-roma/index/spielbericht/3912568"><span class="greentext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span class="icons_sprite icon-rotekarte-table" title="Red card suspension">&nbsp;</span>Red card suspension</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-europa-league/spieltag/pokalwettbewerb/EL/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">11/3/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Ludogorets Razgrad" href="/pfk-ludogorets-razgrad/spielplan/verein/31614/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/31614.png?lm=1629528048" title="Ludogorets Razgrad" alt="Ludogorets Razgrad" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Ludogorets Razgrad" href="/pfk-ludogorets-razgrad/spielplan/verein/31614/saison_id/2022">Ludogorets</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3912559" href="/as-roma_ludogorets-razgrad/index/spielbericht/3912559"><span class="greentext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert">2</td>
                                        <td class="zentriert">87'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 3,
                        Starting eleven: 2,
                        Substituted in: 1,
                        On the bench: 0,
                        Suspended: 2,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="EMQ" href="/european-qualifiers/startseite/wettbewerb/EMQ/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/emq.png?lm=1410165817" title="European Qualifiers" alt="European Qualifiers" class="" />European Qualifiers        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">3/23/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(36.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="England" href="/england/spielplan/verein/3299/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="England" href="/england/spielplan/verein/3299/saison_id/2022">England</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941430" href="/italy_england/index/spielbericht/3941430"><span class="redtext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">3/26/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(20.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Malta" href="/malta/spielplan/verein/3587/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/106.png?lm=1520611569" title="Malta" alt="Malta" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Malta" href="/malta/spielplan/verein/3587/saison_id/2022">Malta</a>&nbsp;&nbsp;<span class="tabellenplatz">(46.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941437" href="/malta_italy/index/spielbericht/3941437"><span class="greentext">0:2 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">9/9/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="North Macedonia" href="/nordmazedonien/spielplan/verein/5148/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/100.png?lm=1520611569" title="North Macedonia" alt="North Macedonia" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="North Macedonia" href="/nordmazedonien/spielplan/verein/5148/saison_id/2022">North Macedonia</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941436" href="/north-macedonia_italy/index/spielbericht/3941436"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">79'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">9/12/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Ukraine" href="/ukraine/spielplan/verein/3699/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/177.png?lm=1520611569" title="Ukraine" alt="Ukraine" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Ukraine" href="/ukraine/spielplan/verein/3699/saison_id/2022">Ukraine</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941431" href="/italy_ukraine/index/spielbericht/3941431"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">72'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">10/14/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Malta" href="/malta/spielplan/verein/3587/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/106.png?lm=1520611569" title="Malta" alt="Malta" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Malta" href="/malta/spielplan/verein/3587/saison_id/2022">Malta</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941433" href="/italy_malta/index/spielbericht/3941433"><span class="greentext">4:0 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">10/17/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="England" href="/england/spielplan/verein/3299/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="England" href="/england/spielplan/verein/3299/saison_id/2022">England</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941434" href="/england_italy/index/spielbericht/3941434"><span class="redtext">3:1 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">11/17/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="North Macedonia" href="/nordmazedonien/spielplan/verein/5148/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/100.png?lm=1520611569" title="North Macedonia" alt="North Macedonia" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="North Macedonia" href="/nordmazedonien/spielplan/verein/5148/saison_id/2022">North Macedonia</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941432" href="/italy_north-macedonia/index/spielbericht/3941432"><span class="greentext">5:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Left Winger">LW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">72'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">28'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/european-qualifiers/spieltag/pokalwettbewerb/EMQ/saison_id/2022/gruppe/C">Group C</a>
                </td>
                                    <td class="zentriert">11/20/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Ukraine" href="/ukraine/spielplan/verein/3699/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/177.png?lm=1520611569" title="Ukraine" alt="Ukraine" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Ukraine" href="/ukraine/spielplan/verein/3699/saison_id/2022">Ukraine</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3941435" href="/ukraine_italy/index/spielbericht/3941435"><span class="">0:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">71'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 4,
                        Starting eleven: 2,
                        Substituted in: 2,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="FS" href="/international-friendlies/startseite/wettbewerb/FS/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/fs.png?lm=1405063091" title="International Friendlies" alt="International Friendlies" class="" />International Friendlies        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/international-friendlies/spieltag/wettbewerb/FS/saison_id/2022/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">11/16/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Albania" href="/albanien/spielplan/verein/3561/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/3.png?lm=1520611569" title="Albania" alt="Albania" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Albania" href="/albanien/spielplan/verein/3561/saison_id/2022">Albania</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3958510" href="/albania_italy/index/spielbericht/3958510"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">77'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/international-friendlies/spieltag/wettbewerb/FS/saison_id/2022/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">11/20/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Austria" href="/osterreich/spielplan/verein/3383/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/127.png?lm=1520611569" title="Austria" alt="Austria" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Austria" href="/osterreich/spielplan/verein/3383/saison_id/2022">Austria</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3928314" href="/austria_italy/index/spielbericht/3928314"><span class="redtext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 2,
                        Starting eleven: 1,
                        Substituted in: 1,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="UNLA" href="/uefa-nations-league-a/startseite/wettbewerb/UNLA/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/unla.png?lm=1512858223" title="UEFA Nations League A" alt="UEFA Nations League A" class="" />UEFA Nations League A        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/3">Group 3</a>
                </td>
                                    <td class="zentriert">6/4/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Germany" href="/deutschland/spielplan/verein/3262/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/40.png?lm=1520612525" title="Germany" alt="Germany" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Germany" href="/deutschland/spielplan/verein/3262/saison_id/2022">Germany</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716444" href="/italy_germany/index/spielbericht/3716444"><span class="">1:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="unknown injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>unknown injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/3">Group 3</a>
                </td>
                                    <td class="zentriert">6/7/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Hungary" href="/ungarn/spielplan/verein/3468/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/178.png?lm=1521635893" title="Hungary" alt="Hungary" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Hungary" href="/ungarn/spielplan/verein/3468/saison_id/2022">Hungary</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716451" href="/italy_hungary/index/spielbericht/3716451"><span class="greentext">2:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="unknown injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>unknown injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/3">Group 3</a>
                </td>
                                    <td class="zentriert">6/11/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="England" href="/england/spielplan/verein/3299/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="England" href="/england/spielplan/verein/3299/saison_id/2022">England</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716460" href="/england_italy/index/spielbericht/3716460"><span class="">0:0 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/3">Group 3</a>
                </td>
                                    <td class="zentriert">6/14/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Germany" href="/deutschland/spielplan/verein/3262/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/40.png?lm=1520612525" title="Germany" alt="Germany" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Germany" href="/deutschland/spielplan/verein/3262/saison_id/2022">Germany</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716467" href="/germany_italy/index/spielbericht/3716467"><span class="redtext">5:2 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/3">Group 3</a>
                </td>
                                    <td class="zentriert">9/23/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="England" href="/england/spielplan/verein/3299/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/189.png?lm=1520611569" title="England" alt="England" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="England" href="/england/spielplan/verein/3299/saison_id/2022">England</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716473" href="/italy_england/index/spielbericht/3716473"><span class="greentext">1:0 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/uefa-nations-league-a/spieltag/pokalwettbewerb/UNLA/saison_id/2022/gruppe/3">Group 3</a>
                </td>
                                    <td class="zentriert">9/26/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Hungary" href="/ungarn/spielplan/verein/3468/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/178.png?lm=1521635893" title="Hungary" alt="Hungary" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Hungary" href="/ungarn/spielplan/verein/3468/saison_id/2022">Hungary</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3716481" href="/hungary_italy/index/spielbericht/3716481"><span class="greentext">0:2 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 0,
                        Starting eleven: 0,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 2                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="UNFI" href="/uefa-nations-league-finals/startseite/wettbewerb/UNFI/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/unfi.png?lm=1543845323" title="UEFA Nations League Finals" alt="UEFA Nations League Finals" class="" />UEFA Nations League Finals        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/uefa-nations-league-finals/spieltag/pokalwettbewerb/UNFI/saison_id/2022/gruppe/HF">Semi-Finals</a>
                </td>
                                    <td class="zentriert">6/15/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Spain" href="/spanien/spielplan/verein/3375/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/157.png?lm=1520611569" title="Spain" alt="Spain" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Spain" href="/spanien/spielplan/verein/3375/saison_id/2022">Spain</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4014330" href="/spain_italy/index/spielbericht/4014330"><span class="redtext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">90 + 3'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/uefa-nations-league-finals/spieltag/pokalwettbewerb/UNFI/saison_id/2022/gruppe/PD">Third Place Play-Off</a>
                </td>
                                    <td class="zentriert">6/18/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert" colspan="2"><a title="Italy" href="/italien/spielplan/verein/3376/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Netherlands" href="/niederlande/spielplan/verein/3379/saison_id/2022"><img src="https://tmssl.akamaized.net/images/flagge/tiny/122.png?lm=1520611569" title="Netherlands" alt="Netherlands" class="flaggenrahmen" /></a></td>
                    <td class="no-border-links "><a title="Netherlands" href="/niederlande/spielplan/verein/3379/saison_id/2022">Netherlands</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4087914" href="/netherlands_italy/index/spielbericht/4087914"><span class="greentext">2:3 </span></a></td>
                                    <td class="zentriert"><a href="" title=""></a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">27'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 2,
                        Starting eleven: 1,
                        Substituted in: 1,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="TRP" href="/turkiye-kupasi/startseite/wettbewerb/TRP/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/trp.png?lm=1646477111" title="Türkiye Kupasi" alt="Türkiye Kupasi" class="" />Türkiye Kupasi        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/turkiye-kupasi/spieltag/pokalwettbewerb/TRP/saison_id/2022/gruppe/VF">Quarter-Finals</a>
                </td>
                                    <td class="zentriert">4/5/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Basaksehir FK" href="/istanbul-basaksehir-fk/spielplan/verein/6890/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6890.png?lm=1521449959" title="Basaksehir FK" alt="Basaksehir FK" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Basaksehir FK" href="/istanbul-basaksehir-fk/spielplan/verein/6890/saison_id/2022">Basaksehir</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4007872" href="/galatasaray_basaksehir-fk/index/spielbericht/4007872"><span class="redtext">2:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">1</td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">66'</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="IT1" href="/serie-a/startseite/wettbewerb/IT1/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" />Serie A        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/1">1</a>
                </td>
                                    <td class="zentriert">8/14/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(9.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="US Salernitana 1919" href="/us-salernitana-1919/spielplan/verein/380/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/380.png?lm=1601390035" title="US Salernitana 1919" alt="US Salernitana 1919" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="US Salernitana 1919" href="/us-salernitana-1919/spielplan/verein/380/saison_id/2022">Salernitana</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844743" href="/us-salernitana-1919_as-roma/index/spielbericht/3844743"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">78'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/2">2</a>
                </td>
                                    <td class="zentriert">8/22/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="US Cremonese" href="/us-cremonese/spielplan/verein/2239/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2239.png?lm=1501770762" title="US Cremonese" alt="US Cremonese" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="US Cremonese" href="/us-cremonese/spielplan/verein/2239/saison_id/2022">Cremonese</a>&nbsp;&nbsp;<span class="tabellenplatz">(17.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844751" href="/as-roma_us-cremonese/index/spielbericht/3844751"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/3">3</a>
                </td>
                                    <td class="zentriert">8/27/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Juventus FC" href="/juventus-turin/spielplan/verein/506/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/506.png?lm=1626441487" title="Juventus FC" alt="Juventus FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Juventus FC" href="/juventus-turin/spielplan/verein/506/saison_id/2022">Juventus</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844759" href="/juventus-fc_as-roma/index/spielbericht/3844759"><span class="">1:1 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Shoulder injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Shoulder injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/4">4</a>
                </td>
                                    <td class="zentriert">8/30/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(2.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AC Monza" href="/ac-monza/spielplan/verein/2919/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2919.png?lm=1562072734" title="AC Monza" alt="AC Monza" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="AC Monza" href="/ac-monza/spielplan/verein/2919/saison_id/2022">Monza</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844772" href="/as-roma_ac-monza/index/spielbericht/3844772"><span class="greentext">3:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Shoulder injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Shoulder injury</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/5">5</a>
                </td>
                                    <td class="zentriert">9/4/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Udinese Calcio" href="/udinese-calcio/spielplan/verein/410/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/410.png?lm=1688982584" title="Udinese Calcio" alt="Udinese Calcio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Udinese Calcio" href="/udinese-calcio/spielplan/verein/410/saison_id/2022">Udinese Calcio</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844785" href="/udinese-calcio_as-roma/index/spielbericht/3844785"><span class="redtext">4:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="Shoulder injury" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>Shoulder injury</td>
                            </tr>
                            <tr class="bg_gelb_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/6">6</a>
                </td>
                                    <td class="zentriert">9/12/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="FC Empoli" href="/fc-empoli/spielplan/verein/749/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/749.png?lm=1626441481" title="FC Empoli" alt="FC Empoli" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="FC Empoli" href="/fc-empoli/spielplan/verein/749/saison_id/2022">FC Empoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844788" href="/fc-empoli_as-roma/index/spielbericht/3844788"><span class="greentext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert">on the bench</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/7">7</a>
                </td>
                                    <td class="zentriert">9/18/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Atalanta BC" href="/atalanta-bergamo/spielplan/verein/800/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/800.png?lm=1438547428" title="Atalanta BC" alt="Atalanta BC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Atalanta BC" href="/atalanta-bergamo/spielplan/verein/800/saison_id/2022">Atalanta BC</a>&nbsp;&nbsp;<span class="tabellenplatz">(2.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844801" href="/as-roma_atalanta-bc/index/spielbericht/3844801"><span class="redtext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/8">8</a>
                </td>
                                    <td class="zentriert">10/1/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46.png?lm=1618900989" title="Inter Milan" alt="Inter Milan" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2022">Inter</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844809" href="/inter-milan_as-roma/index/spielbericht/3844809"><span class="greentext">1:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">54'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">86'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/9">9</a>
                </td>
                                    <td class="zentriert">10/9/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="US Lecce" href="/us-lecce/spielplan/verein/1005/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1005.png?lm=1689169528" title="US Lecce" alt="US Lecce" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="US Lecce" href="/us-lecce/spielplan/verein/1005/saison_id/2022">Lecce</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844821" href="/as-roma_us-lecce/index/spielbericht/3844821"><span class="greentext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/10">10</a>
                </td>
                                    <td class="zentriert">10/17/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="UC Sampdoria" href="/sampdoria-genua/spielplan/verein/1038/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1038.png?lm=1520934353" title="UC Sampdoria" alt="UC Sampdoria" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="UC Sampdoria" href="/sampdoria-genua/spielplan/verein/1038/saison_id/2022">Sampdoria</a>&nbsp;&nbsp;<span class="tabellenplatz">(20.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844833" href="/uc-sampdoria_as-roma/index/spielbericht/3844833"><span class="greentext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">90 + 3'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">22'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/11">11</a>
                </td>
                                    <td class="zentriert">10/23/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SSC Napoli" href="/ssc-neapel/spielplan/verein/6195/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6195.png?lm=1688982522" title="SSC Napoli" alt="SSC Napoli" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="SSC Napoli" href="/ssc-neapel/spielplan/verein/6195/saison_id/2022">SSC Napoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844842" href="/as-roma_ssc-napoli/index/spielbericht/3844842"><span class="redtext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/12">12</a>
                </td>
                                    <td class="zentriert">10/31/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Hellas Verona" href="/hellas-verona/spielplan/verein/276/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/276.png?lm=1617228746" title="Hellas Verona" alt="Hellas Verona" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Hellas Verona" href="/hellas-verona/spielplan/verein/276/saison_id/2022">Hellas Verona</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844848" href="/hellas-verona_as-roma/index/spielbericht/3844848"><span class="greentext">1:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">57'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/13">13</a>
                </td>
                                    <td class="zentriert">11/6/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SS Lazio" href="/lazio-rom/spielplan/verein/398/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/398.png?lm=1601537785" title="SS Lazio" alt="SS Lazio" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="SS Lazio" href="/lazio-rom/spielplan/verein/398/saison_id/2022">Lazio</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844862" href="/as-roma_ss-lazio/index/spielbericht/3844862"><span class="redtext">0:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/14">14</a>
                </td>
                                    <td class="zentriert">11/9/22</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="US Sassuolo" href="/us-sassuolo/spielplan/verein/6574/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6574.png?lm=1601389908" title="US Sassuolo" alt="US Sassuolo" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="US Sassuolo" href="/us-sassuolo/spielplan/verein/6574/saison_id/2022">Sassuolo</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844873" href="/us-sassuolo_as-roma/index/spielbericht/3844873"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">26'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">78'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/15">15</a>
                </td>
                                    <td class="zentriert">11/13/22</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Torino FC" href="/fc-turin/spielplan/verein/416/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/416.png?lm=1438548174" title="Torino FC" alt="Torino FC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Torino FC" href="/fc-turin/spielplan/verein/416/saison_id/2022">Torino</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844884" href="/as-roma_torino-fc/index/spielbericht/3844884"><span class="">1:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">90'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/16">16</a>
                </td>
                                    <td class="zentriert">1/4/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(5.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Bologna FC 1909" href="/fc-bologna/spielplan/verein/1025/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/1025.png?lm=1626441324" title="Bologna FC 1909" alt="Bologna FC 1909" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Bologna FC 1909" href="/fc-bologna/spielplan/verein/1025/saison_id/2022">Bologna</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844890" href="/as-roma_bologna-fc-1909/index/spielbericht/3844890"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">60'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/17">17</a>
                </td>
                                    <td class="zentriert">1/8/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="AC Milan" href="/ac-mailand/spielplan/verein/5/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/5.png?lm=1605166627" title="AC Milan" alt="AC Milan" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="AC Milan" href="/ac-mailand/spielplan/verein/5/saison_id/2022">AC Milan</a>&nbsp;&nbsp;<span class="tabellenplatz">(2.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844901" href="/ac-milan_as-roma/index/spielbericht/3844901"><span class="">2:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">45 + 1'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">65'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/18">18</a>
                </td>
                                    <td class="zentriert">1/15/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="ACF Fiorentina" href="/ac-florenz/spielplan/verein/430/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/430.png?lm=1656660160" title="ACF Fiorentina" alt="ACF Fiorentina" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="ACF Fiorentina" href="/ac-florenz/spielplan/verein/430/saison_id/2022">Fiorentina</a>&nbsp;&nbsp;<span class="tabellenplatz">(10.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844912" href="/as-roma_acf-fiorentina/index/spielbericht/3844912"><span class="greentext">2:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="flu" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>flu</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/19">19</a>
                </td>
                                    <td class="zentriert">1/22/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(4.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Spezia Calcio" href="/spezia-calcio/spielplan/verein/3522/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/3522_1688719361.png?lm=1688719361" title="&nbsp;" alt="Spezia Calcio" class="" /></a></td>
                    <td class="no-border-links "><a title="Spezia Calcio" href="/spezia-calcio/spielplan/verein/3522/saison_id/2022">Spezia Calcio</a>&nbsp;&nbsp;<span class="tabellenplatz">(16.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844925" href="/spezia-calcio_as-roma/index/spielbericht/3844925"><span class="greentext">0:2 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/20">20</a>
                </td>
                                    <td class="zentriert">1/29/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(6.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="SSC Napoli" href="/ssc-neapel/spielplan/verein/6195/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6195.png?lm=1688982522" title="SSC Napoli" alt="SSC Napoli" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="SSC Napoli" href="/ssc-neapel/spielplan/verein/6195/saison_id/2022">SSC Napoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(1.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844934" href="/ssc-napoli_as-roma/index/spielbericht/3844934"><span class="redtext">2:1 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/serie-a/spieltag/wettbewerb/IT1/saison_id/2022/spieltag/21">21</a>
                </td>
                                    <td class="zentriert">2/4/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(3.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="FC Empoli" href="/fc-empoli/spielplan/verein/749/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/749.png?lm=1626441481" title="FC Empoli" alt="FC Empoli" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="FC Empoli" href="/fc-empoli/spielplan/verein/749/saison_id/2022">FC Empoli</a>&nbsp;&nbsp;<span class="tabellenplatz">(11.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3844941" href="/as-roma_fc-empoli/index/spielbericht/3844941"><span class="greentext">2:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="depression" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>depression</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 14,
                        Starting eleven: 12,
                        Substituted in: 1,
                        On the bench: 1,
                        Suspended: 0,
                        Injured: 5                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="TR1" href="/super-lig/startseite/wettbewerb/TR1/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/tr1.png?lm=1694093655" title="Süper Lig" alt="Süper Lig" class="" />Süper Lig        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/24">24</a>
                </td>
                                    <td class="zentriert">3/5/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Gaziantep FK" href="/gaziantep-fk/spielplan/verein/2832/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2832.png?lm=1618435990" title="Gaziantep FK" alt="Gaziantep FK" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Gaziantep FK" href="/gaziantep-fk/spielplan/verein/2832/saison_id/2022">Gaziantep FK</a>&nbsp;&nbsp;<span class="tabellenplatz">(12.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860372" href="/gaziantep-fk_galatasaray/index/spielbericht/3860372"><span class="greentext">0:3 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/25">25</a>
                </td>
                                    <td class="zentriert">3/11/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Kasimpasa" href="/kasimpasa/spielplan/verein/10484/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/10484.png?lm=1408653850" title="Kasimpasa" alt="Kasimpasa" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Kasimpasa" href="/kasimpasa/spielplan/verein/10484/saison_id/2022">Kasimpasa</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860507" href="/galatasaray_kasimpasa/index/spielbericht/3860507"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">90 + 4'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">45'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/26">26</a>
                </td>
                                    <td class="zentriert">3/17/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Konyaspor" href="/konyaspor/spielplan/verein/2293/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2293.png?lm=1519828204" title="Konyaspor" alt="Konyaspor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Konyaspor" href="/konyaspor/spielplan/verein/2293/saison_id/2022">Konyaspor</a>&nbsp;&nbsp;<span class="tabellenplatz">(8.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860399" href="/konyaspor_galatasaray/index/spielbericht/3860399"><span class="redtext">2:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">34'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/27">27</a>
                </td>
                                    <td class="zentriert">4/1/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Adana Demirspor" href="/adana-demirspor/spielplan/verein/3840/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/3840.png?lm=1442129502" title="Adana Demirspor" alt="Adana Demirspor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Adana Demirspor" href="/adana-demirspor/spielplan/verein/3840/saison_id/2022">Adana Demirspor</a>&nbsp;&nbsp;<span class="tabellenplatz">(4.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860501" href="/galatasaray_adana-demirspor/index/spielbericht/3860501"><span class="greentext">2:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">25'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/29">29</a>
                </td>
                                    <td class="zentriert">4/14/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Kayserispor" href="/kayserispor/spielplan/verein/3205/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/3205.png?lm=1520239955" title="Kayserispor" alt="Kayserispor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Kayserispor" href="/kayserispor/spielplan/verein/3205/saison_id/2022">Kayserispor</a>&nbsp;&nbsp;<span class="tabellenplatz">(7.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860468" href="/galatasaray_kayserispor/index/spielbericht/3860468"><span class="greentext">6:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert">1</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">24'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/30">30</a>
                </td>
                                    <td class="zentriert">4/18/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Alanyaspor" href="/alanyaspor/spielplan/verein/11282/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/11282.png?lm=1489273987" title="Alanyaspor" alt="Alanyaspor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Alanyaspor" href="/alanyaspor/spielplan/verein/11282/saison_id/2022">Alanyaspor</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860471" href="/alanyaspor_galatasaray/index/spielbericht/3860471"><span class="greentext">1:4 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">25'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/31">31</a>
                </td>
                                    <td class="zentriert">4/23/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Fatih Karagümrük" href="/fatih-karagumruk/spielplan/verein/6646/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6646.png?lm=1441625196" title="Fatih Karagümrük" alt="Fatih Karagümrük" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fatih Karagümrük" href="/fatih-karagumruk/spielplan/verein/6646/saison_id/2022">Karagümrük</a>&nbsp;&nbsp;<span class="tabellenplatz">(9.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860443" href="/galatasaray_fatih-karagumruk/index/spielbericht/3860443"><span class="">3:3 </span></a></td>
                                    <td class="zentriert"><a href="" title="Centre-Forward">CF</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">60'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/32">32</a>
                </td>
                                    <td class="zentriert">4/30/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Besiktas JK" href="/besiktas-istanbul/spielplan/verein/114/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/114.png?lm=1502974502" title="Besiktas JK" alt="Besiktas JK" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Besiktas JK" href="/besiktas-istanbul/spielplan/verein/114/saison_id/2022">Besiktas</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860489" href="/besiktas-jk_galatasaray/index/spielbericht/3860489"><span class="redtext">3:1 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">28'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/33">33</a>
                </td>
                                    <td class="zentriert">5/8/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Basaksehir FK" href="/istanbul-basaksehir-fk/spielplan/verein/6890/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/6890.png?lm=1521449959" title="Basaksehir FK" alt="Basaksehir FK" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Basaksehir FK" href="/istanbul-basaksehir-fk/spielplan/verein/6890/saison_id/2022">Basaksehir</a>&nbsp;&nbsp;<span class="tabellenplatz">(5.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860483" href="/galatasaray_basaksehir-fk/index/spielbericht/3860483"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Attacking Midfield">AM</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">16'</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/34">34</a>
                </td>
                                    <td class="zentriert">5/16/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Istanbulspor" href="/istanbulspor/spielplan/verein/924/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/924.png?lm=1442723454" title="Istanbulspor" alt="Istanbulspor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Istanbulspor" href="/istanbulspor/spielplan/verein/924/saison_id/2022">Istanbulspor</a>&nbsp;&nbsp;<span class="tabellenplatz">(15.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860453" href="/istanbulspor_galatasaray/index/spielbericht/3860453"><span class="greentext">0:2 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert">75'</td>
                                        <td class="rechts">6'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/35">35</a>
                </td>
                                    <td class="zentriert">5/20/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Sivasspor" href="/sivasspor/spielplan/verein/2381/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2381.png?lm=1408653992" title="Sivasspor" alt="Sivasspor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Sivasspor" href="/sivasspor/spielplan/verein/2381/saison_id/2022">Sivasspor</a>&nbsp;&nbsp;<span class="tabellenplatz">(14.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860517" href="/galatasaray_sivasspor/index/spielbericht/3860517"><span class="greentext">2:0 </span></a></td>
                                    <td colspan="8" class="zentriert"><span class="icons_sprite icon-rotekarte-table" title="Red card suspension">&nbsp;</span>Red card suspension</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/36">36</a>
                </td>
                                    <td class="zentriert">5/30/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="MKE Ankaragücü" href="/mke-ankaragucu/spielplan/verein/868/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/868.png?lm=1582635029" title="MKE Ankaragücü" alt="MKE Ankaragücü" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="MKE Ankaragücü" href="/mke-ankaragucu/spielplan/verein/868/saison_id/2022">Ankaragücü</a>&nbsp;&nbsp;<span class="tabellenplatz">(13.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860525" href="/mke-ankaragucu_galatasaray/index/spielbericht/3860525"><span class="greentext">1:4 </span></a></td>
                                    <td colspan="8" class="zentriert"><span class="icons_sprite icon-rotekarte-table" title="Red card suspension">&nbsp;</span>Red card suspension</td>
                            </tr>
                            <tr class="">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/37">37</a>
                </td>
                                    <td class="zentriert">6/4/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Fenerbahce" href="/fenerbahce-istanbul/spielplan/verein/36/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/36.png?lm=1406739123" title="Fenerbahce" alt="Fenerbahce" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Fenerbahce" href="/fenerbahce-istanbul/spielplan/verein/36/saison_id/2022">Fenerbahce</a>&nbsp;&nbsp;<span class="tabellenplatz">(3.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3860430" href="/galatasaray_fenerbahce/index/spielbericht/3860430"><span class="greentext">3:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Right Winger">RW</a></td>
                    <td class="zentriert">2</td>
                    <td class="zentriert"></td>
                                        <td class="zentriert"></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">87'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/super-lig/spieltag/wettbewerb/TR1/saison_id/2022/spieltag/38">38</a>
                </td>
                                    <td class="zentriert">6/6/23</td>
                    <td class="zentriert hauptlink">A</td>
                                            <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
                        <td class="zentriert no-border-links"><span class="tabellenplatz">(1.)</span></td>
                                        <td class="zentriert no-border-rechts"><a title="Hatayspor" href="/hatayspor/spielplan/verein/7775/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/7775.png?lm=1441723606" title="Hatayspor" alt="Hatayspor" class="tiny_wappen" /></a></td>
                    <td class="no-border-links "><a title="Hatayspor" href="/hatayspor/spielplan/verein/7775/saison_id/2022">Hatayspor</a>&nbsp;&nbsp;<span class="tabellenplatz">(19.)</span></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4072496" href="/hatayspor_galatasaray/index/spielbericht/4072496"><span class="greentext">0:3 </span></a></td>
                                    <td colspan="8" class="zentriert">Not in squad</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 10,
                        Starting eleven: 2,
                        Substituted in: 8,
                        On the bench: 0,
                        Suspended: 2,
                        Injured: 0                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
<div class="box">
    <div class="table-header img-vat">
        <a name="CIT" href="/italy-cup/startseite/wettbewerb/CIT/saison_id/2022">
            <img src="https://tmssl.akamaized.net/images/logo/tiny/cit.png?lm=1613033113" title="Italy Cup" alt="Italy Cup" class="" />Italy Cup        </a>
    </div>
    
<div class="tm-tabs">
    <a class="tm-tab tm-tab__active--parent" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022"><div class=" tm-tab__active"><span>Compact</span></div></a><a class="tm-tab" href="/nicolo-zaniolo/leistungsdaten/spieler/392085/saison/2022/plus/1"><div class=""><span>Detailed</span></div></a></div>
    <div class="responsive-table">
        <table>
            <thead>
                <tr>
                    <th class="zentriert">Matchday</th>
                                            <th class="zentriert">Date</th>
                        <th class="zentriert">Venue</th>
                        <th class="zentriert" colspan="2">For</th>
                        <th colspan="2">Opponent</th>
                                        <th class="zentriert">Result</th>
                    <th class="zentriert">Pos.</th>
                    <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                                        <th class="zentriert"><span class="icons_sprite icon-gelbekarte-table-header" title="Yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-gelbrotekarte-table-header" title="Second yellow cards">&nbsp;</span></th>
                    <th class="zentriert"><span class="icons_sprite icon-rotekarte-table-header" title="Red cards">&nbsp;</span></th>
                                        <th class="rechts"><span class="icons_sprite icon-minuten-table-header" title="Minutes played">&nbsp;</span></th>
                </tr>
            </thead>
            <tbody>
                        <tr class="">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2022/gruppe/AF">Round of 16</a>
                </td>
                                    <td class="zentriert">1/12/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/252.png?lm=1655305880" title="Genoa CFC" alt="Genoa CFC" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="Genoa CFC" href="/genua-cfc/spielplan/verein/252/saison_id/2022">Genoa</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="3947774" href="/as-roma_genoa-cfc/index/spielbericht/3947774"><span class="greentext">1:0 </span></a></td>
                                    <td class="zentriert"><a href="" title="Second Striker">SS</a></td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="zentriert">57'</td>
                    <td class="zentriert"></td>
                    <td class="zentriert"></td>
                                        <td class="rechts">86'</td>
                            </tr>
                            <tr class="bg_rot_20">
                <td class="zentriert">
                    <a href="/italy-cup/spieltag/pokalwettbewerb/CIT/saison_id/2022/gruppe/VF">Quarter-Finals</a>
                </td>
                                    <td class="zentriert">2/1/23</td>
                    <td class="zentriert hauptlink">H</td>
                                            <td class="zentriert" colspan="2"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
                                        <td class="zentriert no-border-rechts"><a title="US Cremonese" href="/us-cremonese/spielplan/verein/2239/saison_id/2022"><img src="https://tmssl.akamaized.net/images/wappen/tiny/2239.png?lm=1501770762" title="US Cremonese" alt="US Cremonese" class="tiny_wappen" /></a></td>
                    <td class="no-border-links hauptlink"><a title="US Cremonese" href="/us-cremonese/spielplan/verein/2239/saison_id/2022">Cremonese</a></td>
                                <td class="zentriert"><a title="" class="ergebnis-link" id="4003975" href="/as-roma_us-cremonese/index/spielbericht/4003975"><span class="redtext">1:2 </span></a></td>
                                    <td colspan="8" class="zentriert"><span title="depression" class="verletzt-table mittig-vom-text icons_sprite">&nbsp;</span>depression</td>
                            </tr>
                            </tbody>
            <tfoot>
                <tr>
                    <td colspan="18">
                        Squad: 1,
                        Starting eleven: 1,
                        Substituted in: 0,
                        On the bench: 0,
                        Suspended: 0,
                        Injured: 1                    </td>
                </tr>
                </tfoot>
        </table>
    </div>
</div>
</div>
    <div class="large-4 columns">
        <div class="werbung werbung-rectangle1">
  <div id="div-gpt-ad-1621526463511-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621526463511-0"); });</script>
  </div>
</div>
        <div class="box hide">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                                    <span class="position_14" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);background-color: rgba(167, 27, 30, 0.98);font-size:16px !important" title="25">3</span>
                                        <span class="position_12" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);box-shadow: 0px 0px 15px 9px rgba(167, 27, 30, 0.98);background-color: rgba(167, 27, 30, 0.98);font-size:16px !important" title="33.333333333333">4</span>
                                        <span class="position_13" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:20px !important" title="75">9</span>
                                        <span class="position_10" style="-webkit-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);-moz-box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);box-shadow: 0px 0px 15px 9px rgba(224, 53, 0, 0.98);background-color: rgba(224, 53, 0, 0.98);font-size:22px !important" title="100">12</span>
                                </div>
        </div>
    </div>
</div>
<div class="box">
    <h2 class="content-box-headline">
        Positions played    </h2>
    <div class="content">
        <div class="gespieltePositionen">
            <div class="feld">
                
                    <div class="zahl-anzeige pos-box positionsbox_14" title="Centre-Forward">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/14">
                            <div class="text-box p-14" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                3                                <div class="zusatz-kreis">CF</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_14" title="Centre-Forward">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/14">
                            <div class="text-box p-14" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                CF                                <div class="zusatz-kreis">3</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_12" title="Right Winger">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/12">
                            <div class="text-box p-12" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                4                                <div class="zusatz-kreis">RW</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_12" title="Right Winger">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/12">
                            <div class="text-box p-12" style="font-size:16px !important;width:30px;height:30px;border-radius:15px;line-height:30px;">
                                RW                                <div class="zusatz-kreis">4</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/13">
                            <div class="text-box p-13" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                9                                <div class="zusatz-kreis">SS</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_13" title="Second Striker">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/13">
                            <div class="text-box p-13" style="font-size:20px !important;width:40px;height:40px;border-radius:20px;line-height:39px;">
                                SS                                <div class="zusatz-kreis">9</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    
                    <div class="zahl-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/10">
                            <div class="text-box p-10" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                12                                <div class="zusatz-kreis">AM</div>
                            </div>
                            </a>
                        </div>
                    </div>

                    <div class="pos-anzeige pos-box positionsbox_10" title="Attacking Midfield">
                        <div class="aussen">
                            <a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/10">
                            <div class="text-box p-10" style="font-size:22px !important;width:50px;height:50px;border-radius:25px;line-height:49px;">
                                AM                                <div class="zusatz-kreis">12</div>
                            </div>
                            </a>
                        </div>
                    </div>

                                </div>
        </div>
    </div>
        <table>
        <thead>
            <tr>
                <th>Played as...</th>
                <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                        </tr>
        </thead>
        <tbody>
                        <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/10">Attacking Midfield</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/10">12</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/10">2</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/10">1</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/13">Second Striker</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/13">9</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/13">1</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/13">-</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/12">Right Winger</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/12">4</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/12">3</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/12">1</a></td>
                            </tr>
                            <tr>
                <td class="hauptlink"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/14">Centre-Forward</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/14">3</a></td>
                                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/14">1</a></td>
                <td class="zentriert"><a href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/pos/14">2</a></td>
                            </tr>
                        </tbody>
    </table>
</div>
        <div class="box">
    <h2 class="content-box-headline">
        Stats by club    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Club</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2018"><img src="https://tmssl.akamaized.net/images/wappen/tiny/12_1701079422.png?lm=1701079423" title="&nbsp;" alt="AS Roma" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="AS Roma" href="/as-rom/spielplan/verein/12/saison_id/2018">AS Roma</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/12">128</a></td>
                            <td class="zentriert">24</td>
                <td class="zentriert">18</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Inter Milan Primavera" href="/inter-mailand-u19/spielplan/verein/5380/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46_1617091918.png?lm=1617091918" title="&nbsp;" alt="Inter Milan Primavera" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Inter Milan Primavera" href="/inter-mailand-u19/spielplan/verein/5380/saison_id/2017">Inter U19</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/5380">29</a></td>
                            <td class="zentriert">14</td>
                <td class="zentriert">9</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Fiorentina Under 17" href="/ac-florenz-u17/spielplan/verein/49741/saison_id/2015"><img src="https://tmssl.akamaized.net/images/wappen/tiny/430_1655114235.png?lm=1655114235" title="&nbsp;" alt="Fiorentina Under 17" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Fiorentina Under 17" href="/ac-florenz-u17/spielplan/verein/49741/saison_id/2015">Fiorentina U17</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/49741">22</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Virtus Entella Primavera" href="/virtus-entella-u19/spielplan/verein/27354/saison_id/2016"><img src="https://tmssl.akamaized.net/images/wappen/tiny/27354.png?lm=1424769530" title="Virtus Entella Primavera" alt="Virtus Entella Primavera" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Virtus Entella Primavera" href="/virtus-entella-u19/spielplan/verein/27354/saison_id/2016">Entella U19</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/27354">22</a></td>
                            <td class="zentriert">9</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/405.png?lm=1469443765" title="Aston Villa" alt="Aston Villa" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Aston Villa" href="/aston-villa/spielplan/verein/405/saison_id/2023">Aston Villa</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/405">20</a></td>
                            <td class="zentriert">2</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023"><img src="https://tmssl.akamaized.net/images/wappen/tiny/141.png?lm=1406739071" title="Galatasaray" alt="Galatasaray" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Galatasaray" href="/galatasaray-istanbul/spielplan/verein/141/saison_id/2023">Galatasaray</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/141">12</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Virtus Entella" href="/virtus-entella/spielplan/verein/20519/saison_id/2016"><img src="https://tmssl.akamaized.net/images/wappen/tiny/20519.png?lm=1424769530" title="Virtus Entella" alt="Virtus Entella" class="tiny_wappen" /></a></td>
            <td class="hauptlink no-border-links"><a title="Virtus Entella" href="/virtus-entella/spielplan/verein/20519/saison_id/2016">Virtus Entella</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/20519">7</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Inter Mailand UEFA U19" href="/inter-mailand-uefa-u19/spielplan/verein/62104/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46_1617091918.png?lm=1617091918" title="&nbsp;" alt="Inter Mailand UEFA U19" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Inter Mailand UEFA U19" href="/inter-mailand-uefa-u19/spielplan/verein/62104/saison_id/2017">Inter YL</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/62104">6</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">2</td>
                    </tr>
                <td class="zentriert no-border-rechts"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2017"><img src="https://tmssl.akamaized.net/images/wappen/tiny/46_1617091918.png?lm=1617091918" title="&nbsp;" alt="Inter Milan" class="" /></a></td>
            <td class="hauptlink no-border-links"><a title="Inter Milan" href="/inter-mailand/spielplan/verein/46/saison_id/2017">Inter</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/verein/46">-</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Nicolò Zaniolo" class="content-link" href="/nicolo-zaniolo/leistungsdatenverein/spieler/392085">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        Performance by competition    </h2>
    <table>
        <thead>
        <tr>
            <th colspan="2">Competition</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Appearances">&nbsp;</span></th>
                            <th class="zentriert"><span class="icons_sprite icon-tor-table-header" title="Goals">&nbsp;</span></th>
                <th class="zentriert"><span class="icons_sprite icon-vorlage-table-header" title="Assists">&nbsp;</span></th>
                    </tr>
        </thead>
        <tbody>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it1.png?lm=1656073460" title="Serie A" alt="Serie A" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie A" href="/serie-a/startseite/wettbewerb/IT1">Serie A</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/wettbewerb/IT1">94</a></td>
                            <td class="zentriert">13</td>
                <td class="zentriert">10</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/ij1.png?lm=1639129220" title="Primavera 1" alt="Primavera 1" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera 1" href="/primavera-1/startseite/wettbewerb/IJ1">Primavera 1</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2017/wettbewerb/IJ1/verein/5380">26</a></td>
                            <td class="zentriert">13</td>
                <td class="zentriert">8</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itj4.png?lm=1697114822" title="Campionato Under 17 - A" alt="Campionato Under 17 - A" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Under 17 - A" href="/campionato-nazionale-under-17-a/startseite/wettbewerb/ITJ4">Under 17 - A</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/wettbewerb/ITJ4/verein/49741">19</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itj3.png?lm=1514453455" title="Campionato Primavera Girone C" alt="Campionato Primavera Girone C" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera C" href="/campionato-primavera-girone-c/startseite/wettbewerb/ITJ3">Primavera C</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2016/wettbewerb/ITJ3/verein/27354">16</a></td>
                            <td class="zentriert">7</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/gb1.png?lm=1521104656" title="Premier League" alt="Premier League" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Premier League" href="/premier-league/startseite/wettbewerb/GB1">Premier League</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2023/wettbewerb/GB1/verein/405">13</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/tr1.png?lm=1694093655" title="Süper Lig" alt="Süper Lig" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Süper Lig" href="/super-lig/startseite/wettbewerb/TR1">Süper Lig</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2022/wettbewerb/TR1/verein/141">10</a></td>
                            <td class="zentriert">5</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/it2.png?lm=1548242827" title="Serie B" alt="Serie B" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Serie B" href="/serie-b/startseite/wettbewerb/IT2">Serie B</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2016/wettbewerb/IT2/verein/20519">7</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itje.png?lm=1600081543" title="Campionato Primavera Fase Finale" alt="Campionato Primavera Fase Finale" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Primavera Fase Finale" href="/campionato-primavera-finalrunde/startseite/wettbewerb/ITJE">Primavera Fase Finale</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/wettbewerb/ITJE">3</a></td>
                            <td class="zentriert">1</td>
                <td class="zentriert">1</td>
                    </tr>
                <td class="zentriert no-border-rechts"><img src="https://tmssl.akamaized.net/images/logo/tiny/itjf.png?lm=1697114816" title="Campionato Under 17 - Finals" alt="Campionato Under 17 - Finals" class="" /></td>
            <td class="hauptlink no-border-links"><a title="Under 17 - Finals" href="/campionato-under-17-finalrunde/startseite/pokalwettbewerb/ITJF">Under 17 - Finals</a></td>
            <td class="zentriert"><a title="Nicolò Zaniolo" href="/nicolo-zaniolo/leistungsdatendetails/spieler/392085/saison/2015/wettbewerb/ITJF/verein/49741">3</a></td>
                            <td class="zentriert">-</td>
                <td class="zentriert">-</td>
                    </tr>
            </tbody>
    </table>
    <a title="Nicolò Zaniolo" class="content-link" href="/nicolo-zaniolo/detaillierteleistungsdaten/spieler/392085">More details</a></div>
        <div class="box">
    <h2 class="content-box-headline">
        National team career    </h2>
    <table>
        <thead>
        <tr>
            <th class="zentriert">#</th>
            <th colspan="2" class="hide-for-small">National team</th>
            <th class="zentriert">Debut</th>
            <th class="zentriert"><span class="icons_sprite icon-einsaetze-table-header" title="Matches">&nbsp;</span></th>
            <th class="zentriert"><span class="icons_sprite icon-tor-table-header"></span></th>
                    </tr>
        </thead>
        <tbody>
            <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy" href="/italien/startseite/verein/3376">Italy</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_gruen_20">
            
                20
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy" href="/italien/startseite/verein/3376">Italy</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/3131103" title="European Qualifiers: Italy - Finland 2:0">Mar 23, 2019</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376">17</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/3376/nurEinsatz/2">2</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                10
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U21" href="/italien-u21/startseite/verein/11947">Italy U21</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/3112875" title="International Friendlies: Italy U21 - Belgium U21 0:1">Oct 11, 2018</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/11947">8</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/11947/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U20" href="/italien-u20/startseite/verein/21100">Italy U20</a>            </td>
            <td class="zentriert">
                                    -                            </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21100">-</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21100/nurEinsatz/2">-</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                5
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U19" href="/italien-u19/startseite/verein/21426">Italy U19</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2842204" title="UEFA EURO U19 Championship Qualifiers: Republic of Ireland U19 - Italy U19 2:0">Mar 23, 2017</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21426">18</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21426/nurEinsatz/2">6</a></td>
                    </tr>
                <tr>
            <td class="no-border-rechts zentriert ueberzeile show-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td colspan="5" class="hauptlink no-border-links ueberzeile show-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
        </tr>
        <tr>
                        <td class="zentriert bg_rot_20">
            
                -
            </td>
            <td class="no-border-rechts zentriert hide-for-small">
                <img src="https://tmssl.akamaized.net/images/flagge/verysmall/75.png?lm=1520611569" title="Italy" alt="Italy" class="flaggenrahmen" />            </td>
            <td class="hauptlink no-border-links hide-for-small">
                <a title="Italy U18" href="/italien-u18/startseite/verein/21746">Italy U18</a>            </td>
            <td class="zentriert">
                                    <a href="/spiel/index/spielbericht/2768269" title="International Friendlies: Italy U18 - Austria U18 1:0">Nov 11, 2016</a>
                                </td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21746">2</a></td>
            <td class="zentriert"><a href="/nicolo-zaniolo/nationalmannschaft/spieler/392085/verein_id/21746/nurEinsatz/2">-</a></td>
                    </tr>
                </tbody>
    </table>
            <a title="Nicolò Zaniolo" class="content-link" href="/nicolo-zaniolo/nationalmannschaft/spieler/392085">Go to national player profile</a>    </div>
        <div class="werbung werbung-rectangle2">
  <div id="div-gpt-ad-1621528018930-0" style="min-width: 300px; min-height: 250px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528018930-0"); });</script>
  </div>
</div>
    </div>
</div>

<script async src="/js/custom/tm-track-links.min.js" type="module"></script>
<div class="werbung werbung-fullsize_contentad">
  <div id="div-gpt-ad-1621528173524-0" style="min-width: 728px; min-height: 90px;">
<script>googletag.cmd.push(() => { googletag.display("div-gpt-ad-1621528173524-0"); });</script>
  </div>
</div>
        </main>

        <footer>
            <div class="tm-footer">
            <a href="/"
           class="tm-footer__logo">
          <img src="https://tmsi.akamaized.net/head/transfermarkt_logo.svg" alt="Transfermarkt" height="33" width="80"/>
        </a>
          <ul class="tm-footer__links">
    <li class="tm-footer__links-item">
      <a href="/intern/impressum">
          Legal notice      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/web/datenschutz">
          Data protection      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="javascript:void(0)" class="cmp-link">
          Privacy      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/anb">
          General conditions of use      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/tmteam">
          TM-Team      </a>
    </li>
                        <li class="tm-footer__links-item">
      <a href="/intern/faq">
          FAQ      </a>
    </li>
    <li class="tm-footer__links-item">
      <a href="/intern/fehlermelden">
          Found a mistake?      </a>
    </li>
  </ul>
</div>
        </footer>
                <div id="menue_overlay"></div>
    </div>
        <script type="text/javascript">
        var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r",
"co":""
}
    </script>
        <script type="module">
        var defaultOptions = {
            tracking: !0,
            refreshAds: !0
        };
        export var refreshAd = function() {
            var e, n;
            [ASCDP.hasOwnProperty("adS"), null === (e = ASCDP.adS) || void 0 === e ? void 0 : e.hasOwnProperty("reloadAds"), "function" == typeof(null === (n = ASCDP.adS) || void 0 === n ? void 0 : n.reloadAds)].every(function(e) {
                return e
            }) && ASCDP.adS.reloadAds()
        };
        export var TmTrackingAndAds = function(e, n) {
            void 0 === n && (n = defaultOptions);
            var r = ["tabelle", "reiter", "forum"].includes(e) ? e : "";
            n.tracking && (gtag("event", "page_view", {
                page_path: "/jsContent" + window.location.pathname
            }), sendIvwData(r)), n.refreshAds && "undefined" != typeof ASCDP && refreshAd()
        };
        window.tmTrackingAndAds = function(e, n) {
            return TmTrackingAndAds(e, n)
        };
    </script>
            <script type="text/javascript">
            const iommInterval = setInterval(() => {
                if (typeof IOMm === 'function') {
                    IOMm('configure', {
                        st: iam_data.st,
                        dn: 'data-84a0f3455d.transfermarkt.com',
                        mh: 5
                    });
                    IOMm('pageview', {
                        cp: iam_data.cp,
                        co: iam_data.co
                    });
                    clearInterval(iommInterval);
                }
            }, 250);
        </script>
    <script type="text/javascript">
	if(typeof(adet) == "boolean" && adet == false){
		img_src="/static/singlepictures/jk99hhfsdh209nbnkjldgh90sghfsdlk";
	} else {
		img_src="/static/singlepictures/jku90whjlkjbwbta1g4b8h89fh8sgh8d";
	}
	var elem = document.createElement("img");
	document.body.appendChild(elem);
	elem.src = img_src;
</script>

            <script>
            $(function() {
                var cnt = $('div.large-4.columns').length;
                if (cnt == 1) {
                    var sidebarDiv = document.querySelector('div.large-4.columns');
                    if (sidebarDiv !== null) {
                        $('#werbung_recommender_sidebar_wrapper').appendTo(sidebarDiv);
                        $('#werbung_recommender_sidebar_wrapper').show();
                    }
                }
            });
        </script>
        <div id="werbung_recommender_sidebar_wrapper" style="display: none;">
            <div 
    id="recommender_sidebar" 
    class="box"
    >
    <div class="OUTBRAIN" data-widget-id="SL_DT_SB"></div>
<tm-consent 
    no-checkbox 
    type="outbrain" 
    embed="PHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiIGFzeW5jPSJhc3luYyIgc3JjPSIvL3dpZGdldHMub3V0YnJhaW4uY29tL291dGJyYWluLmpzIj48L3NjcmlwdD4=">
</tm-consent>
</div>
        </div>
    <script type="module" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.esm.js" defer></script><script nomodule="" src="https://tmsi.akamaized.net/js/custom-element-globals/tm-global-elements.js" defer></script><tm-consent type="adition" no-checkbox embed="PHNjcmlwdCBzcmM9Imh0dHBzOi8vY3JlYXRpdmUtY2RuLm9kZHNzZXJ2ZS5jb20vbG9hZGVyLmpzP3B1Ymxpc2hlcj10bSIgYXN5bmM9ImFzeW5jIj48L3NjcmlwdD4="></tm-consent><tm-consent type="googleanalytics" no-checkbox embed="PHNjcmlwdCBhc3luYyBzcmM9Imh0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0YWcvanM/aWQ9VUEtMzgxNjIwNC0xMyI+PC9zY3JpcHQ+"></tm-consent>
<tm-consent type="pubmatic" no-checkbox embed="PHNjcmlwdCB0eXBlPSd0ZXh0L2phdmFzY3JpcHQnPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFBXVD17fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnb29nbGV0YWcgPSBnb29nbGV0YWcgfHwge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnb29nbGV0YWcuY21kID0gZ29vZ2xldGFnLmNtZCB8fCBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncHRSYW4gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBXVC5qc0xvYWRlZCA9ICgpID0+IHsgLy9QdWJNYXRpYyBwd3QuanMgb24gbG9hZCBjYWxsYmFjayBpcyB1c2VkIHRvIGxvYWQgR1BUCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9hZEdQVCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2FkR1BUID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgdGhlIGdwdFJhbiBmbGFnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFncHRSYW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3B0UmFuID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZVNTTCA9ICdodHRwczonID09IGRvY3VtZW50LmxvY2F0aW9uLnByb3RvY29sOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWRzLnNyYyA9ICh1c2VTU0wgPyAnaHR0cHM6JyA6ICdodHRwOicpICsgJy8vc2VjdXJlcHViYWRzLmcuZG91YmxlY2xpY2submV0L3RhZy9qcy9ncHQuanMnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShnYWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gRmFpbHNhZmUgdG8gY2FsbCBncHQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQobG9hZEdQVCwgNTAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gJy8vYWRzLnB1Ym1hdGljLmNvbS9BZFNlcnZlci9qcy9wd3QvMTYzMjI5LzEwMTAzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvZmlsZVZlcnNpb25JZCA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHB1cmwuaW5kZXhPZigncHd0dj0nKT4wKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4cCA9IC9wd3R2PSguKj8pKCZ8JCkvZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IHJlZ2V4cC5leGVjKHB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKG1hdGNoZXMubGVuZ3RoID49IDIgJiYgbWF0Y2hlc1sxXS5sZW5ndGggPiAwKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZmlsZVZlcnNpb25JZCA9ICcvJyttYXRjaGVzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd3RhZHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3dGFkcy5hc3luYyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd3RhZHMudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHd0YWRzLnNyYyA9IHVybCtwcm9maWxlVmVyc2lvbklkKycvcHd0LmpzJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKVswXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHd0YWRzLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2NyaXB0PgogICAgICAgICAgICAgICAgICAgICAgICA="></tm-consent><tm-consent type="amazonadvertising" no-checkbox embed="PHNjcmlwdD4hZnVuY3Rpb24odCwkLGUscyxpLGEsbyl7JFt0XXx8KCRbdF09e2luaXQ6ZnVuY3Rpb24oKXtfKCJpIixhcmd1bWVudHMpfSxmZXRjaEJpZHM6ZnVuY3Rpb24oKXtfKCJmIixhcmd1bWVudHMpfSxzZXREaXNwbGF5QmlkczpmdW5jdGlvbigpe30sdGFyZ2V0aW5nS2V5czpmdW5jdGlvbigpe3JldHVybltdfSxfUTpbXX0sKGE9ZS5jcmVhdGVFbGVtZW50KHMpKS5hc3luYz0hMCxhLnNyYz1pLChvPWUuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0pLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsbykpO2Z1bmN0aW9uIF8oZSxzKXskW3RdLl9RLnB1c2goW2Usc10pfX0oImFwc3RhZyIsd2luZG93LGRvY3VtZW50LCJzY3JpcHQiLCIvL2MuYW1hem9uLWFkc3lzdGVtLmNvbS9hYXgyL2Fwc3RhZy5qcyIpLGFwc3RhZy5pbml0KHtwdWJJRDoiNTEzNCIsYWRTZXJ2ZXI6Imdvb2dsZXRhZyJ9KTtjb25zdCBpbml0QW1hem9uQWRCaWRzPSh0LCQpPT57KCQmJiJ0Y2xvYWRlZCI9PT10LmV2ZW50U3RhdHVzfHwidXNlcmFjdGlvbmNvbXBsZXRlIj09PXQuZXZlbnRTdGF0dXMpJiZhcHN0YWcuZmV0Y2hCaWRzKAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90czpbCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTYyMTUyNDkwMzk1Ni0wIixzbG90TmFtZToiNTg3NzgxNjQvRGVza3RvcC1CaWxsYm9hcmQtMSIsc2l6ZXM6W1s5NjAsOTBdLFs5NzAsMjUwXSxbOTUwLDkwXSxbNzI4LDkwXSxbOTcwLDkwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI2NDYzNTExLTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLU1lZGl1bVJlY3RhbmdsZS0xIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTI3NTIxOTM5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9EZXNrdG9wLVNreXNjcmFwZXItMSIsc2l6ZXM6W1sxNjAsNjAwXSxbMzM2LDI4MF0sWzMwMCwyNTBdLFszMDAsNjAwXSxbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgwMTg5MzAtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtTWVkaXVtUmVjdGFuZ2xlLTIiLHNpemVzOltbMzM2LDI4MF0sWzMwMCwyNTBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxMjMzOTgtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtU2t5c2NyYXBlci0yIixzaXplczpbWzMwMCwyNTBdLFszMzYsMjgwXSxbMTYwLDYwMF0sWzMwMCw2MDBdLCBbMTIwLCA2MDBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MjgxNzM1MjQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L0Rlc2t0b3AtQmlsbGJvYXJkLTIiLHNpemVzOltbOTUwLDkwXSxbOTcwLDI1MF0sWzcyOCw5MF0sWzk3MCw5MF0sWzk2MCw5MF0sWzMwMCwgMjUwXV19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQyODkyOTYtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1NZWRpdW1SZWN0YW5nbGUtMSIsc2l6ZXM6W1szMDAsMTAwXSxbMzAwLDI1MF0sXX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtzbG90SUQ6ImRpdi1ncHQtYWQtMTY3OTM0MTQ2ODE5My0wIixzbG90TmFtZToiNTg3NzgxNjQvTW9iaWxlLU1lZGl1bVJlY3RhbmdsZS0yIixzaXplczpbWzMwMCwgMjUwXSwgWzMyMCwgNTBdLCBbMjUwLCAyNTBdLCBbMzAwLCAxMDBdLCBbMzM2LCAyODBdLF19LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7c2xvdElEOiJkaXYtZ3B0LWFkLTE2MjE1MzQzNjkyOTQtMCIsc2xvdE5hbWU6IjU4Nzc4MTY0L01vYmlsZS1IYWxmcGFnZS0xIixzaXplczpbWzMwMCw2MDBdLFszMDAsMjUwXSxdfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Nsb3RJRDoiZGl2LWdwdC1hZC0xNjIxNTM0NDMyODI5LTAiLHNsb3ROYW1lOiI1ODc3ODE2NC9Nb2JpbGUtU3RpY2t5IixzaXplczpbWzMwMCw1MF0sWzMyMCw1MF0sXX0sXSx0aW1lb3V0OjJlM30sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKHQpe2dvb2dsZXRhZy5jbWQucHVzaChmdW5jdGlvbigpe2Fwc3RhZy5zZXREaXNwbGF5QmlkcygpLGdvb2dsZXRhZy5wdWJhZHMoKS5yZWZyZXNoKCl9KX0pfTsiZnVuY3Rpb24iPT10eXBlb2Ygd2luZG93Ll9fdGNmYXBpJiZ3aW5kb3cuX190Y2ZhcGkoImFkZEV2ZW50TGlzdGVuZXIiLDIsaW5pdEFtYXpvbkFkQmlkcyk7PC9zY3JpcHQ+"></tm-consent><tm-consent type="googleadvertising" no-checkbox embed="PHNjcmlwdCAgc3JjPSJodHRwczovL3NlY3VyZXB1YmFkcy5nLmRvdWJsZWNsaWNrLm5ldC90YWcvanMvZ3B0LmpzIiBhc3luYz0iYXN5bmMiPjwvc2NyaXB0Pg=="></tm-consent>
<script type="text/javascript" src="https://tmssl.akamaized.net/assets/aa69c6e9c51f1e811847082c63633956/gridview/jquery.yiigridview.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-menu.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/vendors.min.js?lm=1703164009"></script>
<script type="text/javascript" src="https://tmsi.akamaized.net/js/svelte-components/consent/bundle.js"></script>
<script type="text/javascript" src="https://tmssl.akamaized.net/js/custom/tm-skyscraper.min.js?lm=1703164009"></script>
<script type="text/javascript">
/*<![CDATA[*/
	var loginUrl='/profil/login';
	var onlyDE = '';
	var onlyMobile = '';
	var onlyTablet = '';
	var getUserID = '';

    function sendIvwData(typ) {
        if(typ == 'tabelle') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_t",
"co":""
}

        }else if(typ == 'reiter') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_r",
"co":""
}

        }else if(typ == 'forum') {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_forum",
"co":""
}

        }else {
            var iam_data = {
"st":"transfer",
"cp":"ausland_co.uk_r_s",
"co":""
}

        }
        if(typeof IOMm === 'function') {
            IOMm('pageview', { cp: iam_data.cp, co: iam_data.co });
        }
    }
jQuery(function($) {
jQuery('#yw1').yiiGridView({'ajaxUpdate':['yw1'],'ajaxVar':'ajax','pagerClass':'pager','loadingClass':'grid\x2Dview\x2Dloading','filterClass':'filters','tableClass':'items','selectableRows':1,'enableHistory':false,'updateSelector':'\x7Bpage\x7D,\x20\x7Bsort\x7D','filterSelector':'\x7Bfilter\x7D','afterAjaxUpdate':function() {window.LazyLoadInstance.update(); tmTrackingAndAds(); trackLinks(); document.dispatchEvent(new CustomEvent("tmInitTooltip"));}});
});
/*]]>*/
</script>
</body>

</html>
  recorded_at: Sun, 31 Dec 2023 15:14:57 GMT
recorded_with: VCR 6.2.0
